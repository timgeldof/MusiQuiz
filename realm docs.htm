<!DOCTYPE html>
<!-- saved from url=(0042)https://realm.io/docs/swift/latest/#models -->
<html class="lc-cb-container-vi"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">  <meta http-equiv="X-UA-Compatible" content="IE=11"> <meta name="viewport" content="width=device-width, initial-scale=1"> <title>Realm: Create reactive mobile apps in a fraction of the time</title> <meta property="og:title" content="Realm: Create reactive mobile apps in a fraction of the time"> <meta property="twitter:title" content="Realm: Create reactive mobile apps in a fraction of the time"> <meta name="description" content="Realm Swift is the first database built for mobile. An alternative to SQLite and Core Data that&#39;s fast, easy to use, and open source. "> <meta name="twitter:description" content="Realm Swift is the first database built for mobile. An alternative to SQLite and Core Data that&#39;s fast, easy to use, and open source. "> <meta name="og:description" content="Realm Swift is the first database built for mobile. An alternative to SQLite and Core Data that&#39;s fast, easy to use, and open source. "> <link rel="canonical" href="https://realm.io/docs/swift/latest/"> <style class="anchorjs"></style><link href="./realm docs_files/css" rel="stylesheet"> <meta name="twitter:site" content="@realm"> <meta name="twitter:creator" content="@realm"> <meta name="google-site-verification" content="V61I6JaPDNM_SLXv4YaUU-madBffKP6UAAy5Brm6crg"> <meta name="twitter:card" content="summary"> <meta name="twitter:image" content="https://realm.io/assets/img/social/realmDark.jpg"> <meta property="og:image" content="https://realm.io/assets/img/social/realmDark.jpg"> <meta property="og:type" content="Website"> <meta property="og:url" content="https://realm.io/docs/swift/latest/"> <link rel="icon" href="https://realm.io/assets/img/favicons/favicon.ico"> <link rel="apple-touch-icon-precomposed" sizes="57x57" href="https://realm.io/assets/img/favicons/favicon-57x57.png"> <link rel="apple-touch-icon-precomposed" sizes="114x114" href="https://realm.io/assets/img/favicons/favicon-114x114.png"> <link rel="apple-touch-icon-precomposed" sizes="72x72" href="https://realm.io/assets/img/favicons/favicon-72x72.png"> <link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://realm.io/assets/img/favicons/favicon-144x144.png"> <link rel="apple-touch-icon-precomposed" sizes="120x120" href="https://realm.io/assets/img/favicons/favicon-120x120.png"> <link rel="apple-touch-icon-precomposed" sizes="152x152" href="https://realm.io/assets/img/favicons/favicon-152x152.png"> <link rel="icon" type="image/png" href="https://realm.io/assets/img/favicons/favicon-32x32.png" sizes="32x32"> <link rel="icon" type="image/png" href="https://realm.io/assets/img/favicons/favicon-16x16.png" sizes="16x16"> <meta name="application-name" content="Realm is a mobile platform and a replacement for SQLite &amp; Core Data. Build offline-first, reactive mobile experiences using simple data sync."> <meta name="msapplication-TileColor" content="#1C233F"> <meta name="msapplication-TileImage" content="../../../assets/img/favicons/favicon-144x144.png"> <meta name="msapplication-notification" content="frequency=30;polling-uri=http://notifications.buildmypinnedsite.com/?feed=https://realm.io/feed.xml&amp;id=1;polling-uri2=http://notifications.buildmypinnedsite.com/?feed=https://realm.io/feed.xml&amp;id=2;polling-uri3=http://notifications.buildmypinnedsite.com/?feed=https://realm.io/feed.xml&amp;id=3;polling-uri4=http://notifications.buildmypinnedsite.com/?feed=https://realm.io/feed.xml&amp;id=4;polling-uri5=http://notifications.buildmypinnedsite.com/?feed=https://realm.io/feed.xml&amp;id=5;cycle=1"> <link rel="alternate" type="application/rss+xml" title="Realm News" href="https://academy.realm.io/feed.xml"> <script type="text/javascript" src="./realm docs_files/pd.js"></script><script type="text/javascript" async="" src="./realm docs_files/insight.min.js"></script><script src="./realm docs_files/1837.js" async="" type="text/javascript"></script><script async="" src="https://www.googletagmanager.com/gtm.js?id=GTM-NDCSRV"></script><script type="text/javascript" async="" src="./realm docs_files/mixpanel-2-latest.min.js"></script><script src="./realm docs_files/jquery.min.js"></script> <script src="./realm docs_files/jquery-migrate-1.1.0.min.js"></script> <script src="./realm docs_files/bootstrap.js"></script> <link href="./realm docs_files/bootstrap.css" rel="stylesheet"> <link href="./realm docs_files/site.css" rel="stylesheet"> <script async="" src="./realm docs_files/docs.js"></script> <script async="" src="./realm docs_files/anchor.js"></script> <link href="./realm docs_files/docs.css" rel="stylesheet"> <link rel="stylesheet" href="./realm docs_files/docsearch.min.css"> <script src="./realm docs_files/slick.min.js"></script> <script src="./realm docs_files/realm.js"></script> <script>
    piAId = '211132';
    piCId = '1214';

    (function() {
        function async_load(){
            var s = document.createElement('script'); s.type = 'text/javascript';
            s.src = ('https:' == document.location.protocol ? 'https://pi' : 'http://cdn') + '.pardot.com/pd.js';
            var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
        }
        if(window.attachEvent) { window.attachEvent('onload', async_load); }
        else { window.addEventListener('load', async_load, false); }
    })();
    </script> <script>
    setTimeout(function(){var a=document.createElement("script");
    var b=document.getElementsByTagName("script")[0];
    a.src=document.location.protocol+"//script.crazyegg.com/pages/scripts/0066/1837.js?"+Math.floor(new Date().getTime()/3600000);
    a.async=true;a.type="text/javascript";b.parentNode.insertBefore(a,b)}, 1);
    </script> <script>(function(e,a){if(!a.__SV){var b=window;try{var c,l,i,j=b.location,g=j.hash;c=function(a,b){return(l=a.match(RegExp(b+"=([^&]*)")))?l[1]:null};g&&c(g,"state")&&(i=JSON.parse(decodeURIComponent(c(g,"state"))),"mpeditor"===i.action&&(b.sessionStorage.setItem("_mpcehash",g),history.replaceState(i.desiredHash||"",e.title,j.pathname+j.search)))}catch(m){}var k,h;window.mixpanel=a;a._i=[];a.init=function(b,c,f){function e(b,a){var c=a.split(".");2==c.length&&(b=b[c[0]],a=c[1]);b[a]=function(){b.push([a].concat(Array.prototype.slice.call(arguments,
    0)))}}var d=a;"undefined"!==typeof f?d=a[f]=[]:f="mixpanel";d.people=d.people||[];d.toString=function(b){var a="mixpanel";"mixpanel"!==f&&(a+="."+f);b||(a+=" (stub)");return a};d.people.toString=function(){return d.toString(1)+".people (stub)"};k="disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset people.set people.set_once people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");
    for(h=0;h<k.length;h++)e(d,k[h]);a._i.push([b,c,f])};a.__SV=1.2;b=e.createElement("script");b.type="text/javascript";b.async=!0;b.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"file:"===e.location.protocol&&"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)?"https://cdn.mxpnl.com/libs/mixpanel-2-latest.min.js":"//cdn.mxpnl.com/libs/mixpanel-2-latest.min.js";c=e.getElementsByTagName("script")[0];c.parentNode.insertBefore(b,c)}})(document,window.mixpanel||[]);
    mixpanel.init("449d47e4fac4e6b03a98df14b2aaf5c6");</script> <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-NDCSRV');</script> <link rel="stylesheet" type="text/css" href="./realm docs_files/visitor.css"><style></style><script type="text/javascript" src="https://pi.pardot.com/analytics?ver=3&amp;visitor_id=505832858&amp;pi_opt_in=&amp;campaign_id=1214&amp;account_id=211132&amp;title=Realm%3A%20Create%20reactive%20mobile%20apps%20in%20a%20fraction%20of%20the%20time&amp;url=https%3A%2F%2Frealm.io%2Fdocs%2Fswift%2Flatest%2F%23relationships&amp;referrer=https%3A%2F%2Fwww.google.com%2F"></script><script type="text/javascript" src="https://www2.realm.io/analytics?conly=true&amp;visitor_id=505832858&amp;pi_opt_in=&amp;campaign_id=1214&amp;account_id=211132&amp;title=Realm%3A%20Create%20reactive%20mobile%20apps%20in%20a%20fraction%20of%20the%20time&amp;url=https%3A%2F%2Frealm.io%2Fdocs%2Fswift%2Flatest%2F%23relationships&amp;referrer=https%3A%2F%2Fwww.google.com%2F&amp;visitor_id_sign=d1b8aa0c395986735f141ca6785444886852212b504ca255420041dde264876ccf44af2272928cd60047cfb5d98cb55a32c72dc1"></script></head> <body class="docs swift latest  chrome desktop nav-up" data-spy="scroll" data-target=".navbar-docs"><div role="dialog" aria-live="polite" aria-label="cookieconsent" aria-describedby="cookieconsent:desc" class="cc-window cc-floating cc-type-info cc-theme-edgeless cc-bottom cc-left cc-color-override-627660333 cc-invisible" style="display: none;"><!--googleoff: all--><span id="cookieconsent:desc" class="cc-message">This website uses cookies to ensure you get the best experience on our website. <a aria-label="learn more about cookies" role="button" tabindex="0" class="cc-link" href="https://realm.io/legal" rel="noopener noreferrer nofollow" target="_blank">Learn more</a></span><div class="cc-compliance"><a aria-label="dismiss cookie message" role="button" tabindex="0" class="cc-btn cc-dismiss">Got it!</a></div><!--googleon: all--></div> <noscript><iframe src="//www.googletagmanager.com/ns.html?id=GTM-NDCSRV" height=0 width=0 style="display:none;visibility:hidden"></iframe></noscript> <nav class="navtop navbar navbar-default js-navbar white nav-up" role="navigation" id="header"> <div class="row"> <div class="col-xs-12"> <div class="navbar-header"> <button type="button" class="navbar-toggle collapsed visible-xs" data-toggle="modal" data-target="#mobileModal"> <span>Menu</span> </button> <a class="navbar-brand" href="https://realm.io/"><img class="logo" src="./realm docs_files/general_logo.svg"></a> </div> <div class="navbar-collapse collapse no-transition pull-right"> <ul class="nav nav-pills"> <li id="nav-products"> <a href="https://realm.io/docs/swift/latest/#" class="dropdown-toggle nav-products" data-toggle="dropdown"> Products <span class="caret"></span> </a> <ul class="dropdown-menu" role="menu"> <li class="flex product-set"> <a href="https://realm.io/products/realm-platform"> <img class="product-icon" src="./realm docs_files/platform.svg"> </a> <div class="col-xs-12 product-header text-left"> <a href="https://realm.io/products/realm-platform"> <h5 class="title"> Platform </h5> </a> <a href="https://realm.io/products/realm-platform"> <span> Edge-to-cloud data synchronization that deploys in minutes. </span> </a> </div> </li> <li class="flex product-set"> <a href="https://realm.io/products/realm-database"> <img class="product-icon" src="./realm docs_files/database.svg"> </a> <div class="col-xs-12 product-header text-left"> <a href="https://realm.io/products/realm-database"> <h5 class="title"> Database </h5> </a> <a href="https://realm.io/products/realm-database"> <span> A database by 100k+ developers and downloaded over 2 billion times. </span> </a> </div> </li> <li class="flex product-set"> <a href="https://realm.io/products/realm-studio"> <img class="product-icon" src="./realm docs_files/favicon.png"> </a> <div class="col-xs-12 product-header text-left"> <a href="https://realm.io/products/realm-studio"> <h5 class="title"> Studio </h5> </a> <a href="https://realm.io/products/realm-studio"> <span> The developer tool for Realm Database and Realm Platform </span> </a> </div> </li> </ul> </li> <li id="nav-developers"> <a href="https://realm.io/docs/swift/latest/#" class="dropdown-toggle nav-solutions" data-toggle="dropdown">Docs <span class="caret"></span> </a> <ul class="dropdown-menu" role="menu"> <li> <a href="https://docs.realm.io/sync/"><img class="product-icon" src="./realm docs_files/sync.png">Sync</a> </li> <li> <a href="https://realm.io/docs"><img class="product-icon" src="./realm docs_files/database.svg">Database</a> </li> </ul> </li> <li id="nav-pricing"> <a class="nav-pricing" href="https://realm.io/pricing">Pricing</a> </li> <li id="nav-support"> <a href="https://realm.io/docs/swift/latest/#" class="dropdown-toggle nav-solutions" data-toggle="dropdown">Support <span class="caret"></span> </a> <ul class="dropdown-menu" role="menu"> <li> <a class="nav-support" href="https://realm.io/support">Support Overview</a> </li> <li> <a class="nav-forums" href="https://forums.realm.io/">Forums</a> </li> <li id="nav-academy"> <a class="nav-academy" href="https://academy.realm.io/">Academy</a> </li> <li> <a class="nav-resources" href="https://realm.io/resources">Resources</a> </li> </ul> </li> <li id="nav-company"> <a href="https://realm.io/docs/swift/latest/#" class="dropdown-toggle nav-solutions" data-toggle="dropdown">Company <span class="caret"></span> </a> <ul class="dropdown-menu" role="menu"> <li id="nav-blog"> <a class="nav-blog" href="https://realm.io/blog/">Blog</a> </li> <li> <a class="nav-press" href="https://realm.io/press">Press</a> </li> <li> <a class="nav-jobs" href="https://mongodb.com/careers">Jobs</a> </li> <li> <a class="nav-about" href="https://realm.io/about">About</a> </li> </ul> </li> <li> <a href="https://cloud.realm.io/login/sign-up" class="navbar-trial-btn btn btn-indigo">Free Trial <svg width="13px" height="13px" viewBox="0 0 13 13" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="iconmonstr-download-11"></g> <path d="M13,6.5 C13,2.910375 10.089625,0 6.5,0 C2.910375,0 0,2.910375 0,6.5 C0,10.089625 2.910375,13 6.5,13 C10.089625,13 13,10.089625 13,6.5 Z M3,6.76923077 L5.33333333,6.76923077 L5.33333333,3 L7.66666667,3 L7.66666667,6.76923077 L10,6.76923077 L6.5,10 L3,6.76923077 Z" id="download" fill="#FFFFFF" fill-rule="nonzero"></path> </g> </svg> </a> </li> </ul> </div> </div> </div> </nav> <div class="nav modal fullscreen fadeInUp" id="mobileModal" tabindex="-1" role="dialog" aria-labelledby="MobileMenu" aria-hidden="true"> <div class="modal-dialog"> <div class="modal-content"> <div class="modal-header flex" style="border:0;"> <h3 class="modal-title col-xs-10"> <a class="navbar-brand" href="https://realm.io/"><img class="logo" src="./realm docs_files/general_logo_white.svg"></a> <span class="sr-only">main navigation</span> </h3> <button type="button col-xs-2" class="close btn btn-link" data-dismiss="modal" aria-hidden="true"> <i class="fa fa-close fa-lg" style="color:#fff;"></i> </button> </div> <div class="modal-body"> <h4 class="sub">Products</h4> <ul> <li> <a class="nav-products" href="https://realm.io/products/realm-platform">Platform</a> </li> <li> <a class="nav-products" href="https://realm.io/products/realm-database">Database</a> </li> </ul> <a class="nav-pricing" href="https://realm.io/pricing"> <h4>Pricing</h4> </a> <a href="https://realm.io/docs/"> <h4 class="sub">Docs</h4> </a> <ul> <li><a class="nac-docs" href="https://docs.realm.io/platform/">Database</a></li> <li> <a class="nac-docs" href="https://realm.io/docs/java/latest">Java</a> </li> <li> <a class="nac-docs" href="https://realm.io/docs/objc/latest">Objective‑C</a> </li> <li> <a class="nac-docs" href="https://realm.io/docs/javascript/latest">JavaScript</a> </li> <li> <a class="nac-docs" href="https://realm.io/docs/swift/latest">Swift</a> </li> <li> <a class="nac-docs" href="https://realm.io/docs/dotnet/latest">.NET</a> </li> </ul> <h4 class="sub">Support</h4> <ul> <h4 class="sub"><a href="https://realm.io/support">Overview</a></h4> <ul> <li> <a class="nav-support" href="https://realm.io/support">Support</a> </li> <li> <a class="nav-forums" href="https://forums.realm.io/">Forums</a> </li> <li id="nav-academy"> <a class="nav-academy" href="https://academy.realm.io/">Academy</a> </li> <li> <a class="nav-resources" href="https://realm.io/resources">Resources</a> </li> </ul> <h4 class="sub">Language</h4> <ul> <li> <a class="nav-language" href="https://realm.io/jp/">日本語</a> </li> <li> <a class="nav-language" href="https://realm.io/kr/">한국어</a> </li> <li> <a class="nav-language" href="https://realm.io/">English</a> </li> </ul> <a class="nav-blog" href="https://realm.io/blog/"> <h4>Blog</h4> </a> <a class="nav-academy" href="https://academy.realm.io/"> <h4>Academy</h4> </a> <a href="https://realm.io/trial/self-hosted-standard-plan/" class="navbar-trial-btn btn btn-indigo">Free Trial <svg width="13px" height="13px" viewBox="0 0 13 13" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="iconmonstr-download-11"></g> <path d="M13,6.5 C13,2.910375 10.089625,0 6.5,0 C2.910375,0 0,2.910375 0,6.5 C0,10.089625 2.910375,13 6.5,13 C10.089625,13 13,10.089625 13,6.5 Z M3,6.76923077 L5.33333333,6.76923077 L5.33333333,3 L7.66666667,3 L7.66666667,6.76923077 L10,6.76923077 L6.5,10 L3,6.76923077 Z" id="download" fill="#FFFFFF" fill-rule="nonzero"></path> </g> </svg> </a> </ul></div> </div> </div> </div> <main id="main"> <div class="doc-content "> <div class="col-xs-12 col-sm-9 docs-body"> <style>
body.cn .doc-version-dropdown-container .dropdown-menu>li:first-child>a:after {
  content: "Latest";
}
body.cn .doc-version-dropdown-container .dropdown-menu>li:not(:first-child)>a:after {
  content: "Outdated";
}
body.jp .doc-version-dropdown-container .dropdown-menu>li:first-child>a:after {
  content: "最新版";
}
body.jp .doc-version-dropdown-container .dropdown-menu>li:not(:first-child)>a:after {
  content: "旧版";
}
body.kr .doc-version-dropdown-container .dropdown-menu>li:first-child>a:after {
  content: "최신";
}
body.kr .doc-version-dropdown-container .dropdown-menu>li:not(:first-child)>a:after {
  content: "기존버전";
}
</style> <div class="row"> <div class="doc-header-container col-xs-12 col-sm-9 text-center" style="top: 0px;"> <div class="doc-controller"> <div id="nav-doc-versions" class="doc-dropdown-container doc-version-dropdown-container "> <a href="https://realm.io/docs/swift/latest/#" class="dropdown-toggle flex js-current-version" data-toggle="dropdown" data-version="4.1.1"> <span class="language-title">Realm Swift </span> 4.1.1 <span class="outdated">Outdated</span> <span class="latest">Latest</span> <span class="caret"></span> </a> <ul class="dropdown-menu" role="menu"> <li> <a href="https://realm.io/docs/swift/latest/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-4.1.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item active-dropdown"> <span class="version-dropdown-text current">4.1.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/4.1.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-4.1.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">4.1.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/4.0.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-4.0.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">4.0.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.21.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.21.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.21.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.20.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.20.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.20.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.19.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.19.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.19.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.19.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.19.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.19.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.18.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.18.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.18.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.17.3/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.17.3&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.17.3 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.17.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.17.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.17.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.17.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.17.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.17.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.16.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.16.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.16.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.16.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.16.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.16.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.16.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.16.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.16.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.15.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.15.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.15.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.14.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.14.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.14.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.14.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.14.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.14.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.14.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.14.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.14.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.13.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.13.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.13.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.13.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.13.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.13.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.12.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.12.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.12.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.11.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.11.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.11.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.11.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.11.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.11.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.11.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.11.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.11.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.10.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.10.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.10.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.9.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.9.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.9.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.8.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.8.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.8.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.7.6/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.7.6&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.7.6 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.7.5/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.7.5&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.7.5 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.7.4/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.7.4&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.7.4 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.7.3/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.7.3&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.7.3 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.7.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.7.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.7.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.7.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.7.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.7.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.7.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.7.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.7.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.6.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.6.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.6.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.5.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.5.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.5.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.4.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.4.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.4.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.3.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.3.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.3.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.3.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.3.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.3.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.3.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.3.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.3.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.2.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.2.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.2.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.1.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.1.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.1.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.1.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.1.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.1.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.0.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.0.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.0.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.0.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.0.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.0.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/3.0.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-3.0.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">3.0.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.10.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.10.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.10.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.10.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.10.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.10.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.10.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.10.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.10.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.9.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.9.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.9.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.9.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.9.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.9.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.8.3/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.8.3&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.8.3 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.8.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.8.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.8.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.8.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.8.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.8.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.8.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.8.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.8.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.7.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.7.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.7.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.6.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.6.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.6.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.6.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.6.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.6.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.6.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.6.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.6.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.5.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.5.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.5.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.5.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.5.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.5.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.4.4/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.4.4&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.4.4 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.4.3/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.4.3&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.4.3 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.4.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.4.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.4.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.4.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.4.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.4.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.4.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.4.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.4.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.3.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.3.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.3.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.2.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.2.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.2.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.1.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.1.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.1.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.1.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.1.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.1.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.1.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.1.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.1.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.0.4/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.0.4&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.0.4 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.0.3/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.0.3&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.0.3 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.0.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.0.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.0.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.0.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.0.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.0.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/2.0.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-2.0.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">2.0.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/1.1.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-1.1.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">1.1.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/1.0.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-1.0.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">1.0.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/1.0.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-1.0.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">1.0.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/1.0.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-1.0.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">1.0.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.103.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.103.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.103.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.103.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.103.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.103.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.103.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.103.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.103.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.102.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.102.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.102.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.102.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.102.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.102.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.101.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.101.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.101.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.100.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.100.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.100.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.99.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.99.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.99.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.99.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.99.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.99.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.98.8/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.98.8&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.98.8 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.98.7/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.98.7&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.98.7 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.98.6/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.98.6&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.98.6 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.98.5/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.98.5&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.98.5 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.98.4/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.98.4&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.98.4 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.98.3/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.98.3&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.98.3 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.98.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.98.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.98.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.98.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.98.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.98.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.98.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.98.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.98.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.97.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.97.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.97.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.97.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.97.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.97.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.96.3/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.96.3&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.96.3 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.96.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.96.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.96.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.96.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.96.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.96.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.96.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.96.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.96.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.95.3/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.95.3&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.95.3 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.95.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.95.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.95.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.95.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.95.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.95.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.95.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.95.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.95.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.94.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.94.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.94.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.94.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.94.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.94.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.93.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.93.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.93.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.93.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.93.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.93.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.93.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.93.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.93.0 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.92.4/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.92.4&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.92.4 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.92.3/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.92.3&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.92.3 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.92.2/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.92.2&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.92.2 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.92.1/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.92.1&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.92.1 </span> </a> </li> <li> <a href="https://realm.io/docs/swift/0.92.0/" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Link&#39;, &#39;docs-dropdown-0.92.0&#39;, &#39;Docs&#39;);" class="version-dropdown-item "> <span class="version-dropdown-text">0.92.0 </span> </a> </li> </ul> </div> </div> </div> </div> <div class="docs-wrapper col-xs-12"> <h3 id="prerequisites">Prerequisites</h3> <ul> <li>XCode 10.0 or higher</li> <li>Target of iOS 9 or higher, macOS 10.9 or higher, or any version of tvOS or watchOS</li> </ul> <h3 id="installation">Installation</h3> <ul class="nav nav-tabs getting-started" role="tablist"> <li><a href="https://realm.io/docs/swift/latest/#dynamic-install" role="tab" data-toggle="tab">Dynamic Framework</a></li> <li class="active"><a href="https://realm.io/docs/swift/latest/#cocoapods-install" role="tab" data-toggle="tab">CocoaPods</a></li> <li><a href="https://realm.io/docs/swift/latest/#carthage-install" role="tab" data-toggle="tab">Carthage</a></li> </ul> <div class="tab-content getting-started"> <div class="tab-pane" id="dynamic-install"> <ol> <li>Download the <a href="https://static.realm.io/downloads/swift/realm-swift-4.1.1.zip" onclick="that=this;var timeoutFunc;ga(&#39;send&#39;, {&#39;hitType&#39;: &#39;event&#39;, &#39;eventCategory&#39;: &#39;Downloads&#39;, &#39;eventAction&#39;: &#39;Download - Swift&#39;, &#39;eventLabel&#39;: &#39;Download&#39;, &#39;hitCallback&#39;: function(){ location.href = that.href; clearTimeout(timeoutFunc);}});timeoutFunc = setTimeout(function(){location.href = that.href;}, 1500);return false;">latest release of Realm</a> and extract the zip.</li> <li>Go to your Xcode project’s “General” settings. Drag <code>RealmSwift.framework</code> and <code>Realm.framework</code> from the appropriate Swift-versioned directory for your project in <code>ios/</code>, <code>osx/</code>, <code>tvos/</code> or <code>watchos/</code> directory to the “Embedded Binaries” section. Make sure <strong>Copy items if needed</strong> is selected (except if using Realm on multiple platforms in your project) and click <strong>Finish</strong>.</li> <li>In your unit test target’s “Build Settings”, add the parent path to <code>RealmSwift.framework</code> in the “Framework Search Paths” section.</li> <li> <p>If using Realm in an iOS, tvOS or watchOS project, create a new “Run Script Phase” in your app’s target’s “Build Phases” and paste the following snippet in the script text field:</p> <pre class="highlight shell"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code>bash <span class="s2">"</span><span class="k">${</span><span class="nv">BUILT_PRODUCTS_DIR</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">FRAMEWORKS_FOLDER_PATH</span><span class="k">}</span><span class="s2">/Realm.framework/strip-frameworks.sh"</span></code></pre> <p>This step is required to work around an <a href="http://www.openradar.me/radar?id=6409498411401216">App Store submission bug</a> when archiving universal binaries.</p> </li> </ol> </div> <div class="tab-pane active" id="cocoapods-install"> <ol> <li><a href="https://guides.cocoapods.org/using/getting-started.html">Install CocoaPods 1.6.0 or later.</a></li> <li>Run <code>pod repo update</code> to make CocoaPods aware of the latest available Realm versions.</li> <li>In your Podfile, add <code>use_frameworks!</code> and <code>pod 'RealmSwift'</code> to your main and test targets.</li> <li>From the command line, run <code>pod install</code>.</li> <li>Use the <code>.xcworkspace</code> file generated by CocoaPods to work on your project!</li> </ol> </div> <div class="tab-pane" id="carthage-install"> <ol> <li><a href="https://github.com/Carthage/Carthage#installing-carthage">Install Carthage 0.33.0 or later.</a></li> <li>Add <code>github "realm/realm-cocoa"</code> to your Cartfile.</li> <li>Run <code>carthage update</code>.</li> <li>Drag <code>RealmSwift.framework</code> and <code>Realm.framework</code> from the appropriate platform directory in <code>Carthage/Build/</code> to the “Linked Frameworks and Libraries” section of your Xcode project’s “General” settings.</li> </ol> <p><strong>iOS/tvOS/watchOS:</strong> On your application target’s “Build Phases” settings tab, click the “+” icon and choose “New Run Script Phase”. Create a Run Script with the following contents:</p> <pre class="highlight plaintext"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code>/usr/local/bin/carthage copy-frameworks</code></pre> <p>and add the paths to the frameworks you want to use under “Input Files”, e.g.:</p> <pre class="highlight plaintext"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code>$(SRCROOT)/Carthage/Build/iOS/Realm.framework$(SRCROOT)/Carthage/Build/iOS/RealmSwift.framework</code></pre> <p>This script works around an <a href="http://www.openradar.me/radar?id=6409498411401216">App Store submission bug</a> triggered by universal binaries.</p> </div> </div> <h2 id="getting-started">Getting started<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#getting-started" aria-label="Anchor link for: getting started" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <div class="card download-card"> <p class="button"> <a class="btn btn-lg btn-indigo" href="https://static.realm.io/downloads/swift/realm-swift-4.1.1.zip" onclick="that=this;var timeoutFunc;ga(&#39;send&#39;, {&#39;hitType&#39;: &#39;event&#39;, &#39;eventCategory&#39;: &#39;Downloads&#39;, &#39;eventAction&#39;: &#39;Download - Swift&#39;, &#39;eventLabel&#39;: &#39;Download&#39;, &#39;hitCallback&#39;: function(){ location.href = that.href; clearTimeout(timeoutFunc);}});timeoutFunc = setTimeout(function(){location.href = that.href;}, 1500);return false;">Download Realm for Swift</a> </p> <div class="col-xs-12 gh-star flex center"> <p><a href="https://github.com/realm/realm-cocoa">View more on GitHub</a></p> <iframe src="./realm docs_files/github-btn.html" frameborder="0" scrolling="0" width="100px" height="20px"></iframe> </div> </div> <div class="alert alert-warning"> <p>If you’re looking to use Realm from <strong>Objective‑C</strong>, or from mixed Objective‑C &amp; Swift apps, please see <a href="https://realm.io/docs/objc/latest">Realm Objective‑C</a> instead. The Realm Objective‑C and Realm Swift APIs are not interoperable and using them together is not supported.</p> </div> <p>Realm Swift enables you to efficiently write your app’s model layer in a safe, persisted and fast way. Here’s what it looks like:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Define your models like regular Swift classes</span>
<span class="kd">class</span> <span class="kt">Dog</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">age</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="kt">Person</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">picture</span><span class="p">:</span> <span class="kt">Data</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span> <span class="c1">// optionals supported</span>
    <span class="k">let</span> <span class="nv">dogs</span> <span class="o">=</span> <span class="kt">List</span><span class="o">&lt;</span><span class="kt">Dog</span><span class="o">&gt;</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// Use them like regular Swift objects</span>
<span class="k">let</span> <span class="nv">myDog</span> <span class="o">=</span> <span class="kt">Dog</span><span class="p">()</span>
<span class="n">myDog</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"Rex"</span>
<span class="n">myDog</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"name of dog: </span><span class="se">\(</span><span class="n">myDog</span><span class="o">.</span><span class="n">name</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>

<span class="c1">// Get the default Realm</span>
<span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>

<span class="c1">// Query Realm for all dogs less than 2 years old</span>
<span class="k">let</span> <span class="nv">puppies</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"age &lt; 2"</span><span class="p">)</span>
<span class="n">puppies</span><span class="o">.</span><span class="n">count</span> <span class="c1">// =&gt; 0 because no dogs have been added to the Realm yet</span>

<span class="c1">// Persist your data easily</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">myDog</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Queries are updated in realtime</span>
<span class="n">puppies</span><span class="o">.</span><span class="n">count</span> <span class="c1">// =&gt; 1</span>

<span class="c1">// Query and update from any thread</span>
<span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="s">"background"</span><span class="p">)</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
    <span class="n">autoreleasepool</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">theDog</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"age == 1"</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
        <span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
            <span class="n">theDog</span><span class="o">!.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">3</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <h4 id="realm-studio">Realm Studio</h4> <p><a href="https://realm.io/products/realm-studio/">Realm Studio</a> is our premiere developer tool, built so you can easily manage the Realm Database and Realm Platform. With <a href="https://realm.io/products/realm-studio/">Realm Studio</a>, you can open and edit local and synced Realms, and administer any Realm Object Server instance. It supports Mac, Windows and Linux.</p> <p><img class="img-responsive img-rounded" src="./realm docs_files/realm-studio.png" alt="Realm Studio"></p> <section class="block-studio col-xs-12 card" id="download-studio"> <div class="col-xs-12 col-sm-6 col-md-4 text-center download-icons"> <p><a href="https://studio-releases.realm.io/latest/download/mac-dmg" class="text-center"> <img src="./realm docs_files/apple.svg" class="col-xs-12 col-sm-6 col-sm-push-3 col-md-4 col-md-push-4"> <button class="btn btn-indigo col-xs-12">Download for Mac</button> </a></p> </div> <div class="col-xs-12 col-sm-6 col-md-4 text-center download-icons"> <p><a href="https://studio-releases.realm.io/latest/download/linux-appimage" class="text-center"> <img src="./realm docs_files/linux.svg" class="col-xs-12 col-sm-6 col-sm-push-3 col-md-4 col-md-push-4"> <button class="btn btn-indigo col-xs-12">Download for Linux</button> </a></p> </div> <div class="col-xs-12 col-sm-6 col-md-4 text-center download-icons"> <p><a href="https://studio-releases.realm.io/latest/download/win-setup" class="text-center"> <img src="./realm docs_files/windows.svg" class="col-xs-12 col-sm-6 col-sm-push-3 col-md-4 col-md-push-4"> <button class="btn btn-indigo col-xs-12">Download for Windows</button> </a></p> </div> </section> <p>Create a test database with sample data using the menu item <strong>Tools &gt; Generate demo database</strong>.</p> <p>If you need help finding your app’s Realm file, check this <a href="http://stackoverflow.com/a/28465803/3838010">StackOverflow answer</a> for detailed instructions.</p> <h3 id="examples">Examples</h3> <p>You can find example applications for both iOS and macOS in our <a href="https://static.realm.io/downloads/swift/realm-swift-4.1.1.zip" onclick="that=this;var timeoutFunc;ga(&#39;send&#39;, {&#39;hitType&#39;: &#39;event&#39;, &#39;eventCategory&#39;: &#39;Downloads&#39;, &#39;eventAction&#39;: &#39;Download - Swift&#39;, &#39;eventLabel&#39;: &#39;Download&#39;, &#39;hitCallback&#39;: function(){ location.href = that.href; clearTimeout(timeoutFunc);}});timeoutFunc = setTimeout(function(){location.href = that.href;}, 1500);return false;">release zip</a> under <code>examples/</code>, demonstrating how to use many features of Realm like migrations, how to use it with <code>UITableViewController</code>s, encryption, command-line tools and much more.</p> <h2 id="using-the-realm-framework">Using the Realm framework<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#using-the-realm-framework" aria-label="Anchor link for: using the realm framework" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <p>At the top of your Swift source files, use <code>import RealmSwift</code> to import Realm Swift and make it available for use with your code. That’s all you need to get started!</p> <h3 id="tvos">tvOS</h3> <p>Because writing to the “Documents” directory is prohibited on tvOS, the default Realm location is set to <code>NSCachesDirectory</code>. However, please be mindful that tvOS can purge files in the “Caches” directory at any point, so we encourage you to rely on Realm as a rebuildable cache rather than storing important user data.</p> <p>If you would like to share a Realm file between a tvOS app and a TV services extension (e.g. Top Shelf extension), you have to use the <code>Library/Caches/</code> directory within the shared container for the application group.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">fileURL</span> <span class="o">=</span> <span class="kt">FileManager</span><span class="o">.</span><span class="k">default</span>
    <span class="o">.</span><span class="nf">containerURL</span><span class="p">(</span><span class="nv">forSecurityApplicationGroupIdentifier</span><span class="p">:</span> <span class="s">"group.io.realm.examples.extension"</span><span class="p">)</span><span class="o">!</span>
    <span class="o">.</span><span class="nf">appendingPathComponent</span><span class="p">(</span><span class="s">"Library/Caches/default.realm"</span><span class="p">)</span></code></pre> <p>You can also <a href="https://realm.io/docs/swift/latest/#other-realms">bundle prebuilt Realm files</a> in your app. However, be sure to comply with App Store guidelines, keeping your app under 200MB. Please browse our <a href="https://github.com/realm/realm-cocoa/tree/master/examples/tvos/objc">tvOS examples</a> for sample tvOS apps demonstrating how to use Realm as either an offline cache or with preloaded data.</p> <h3 id="using-realm-with-background-app-refresh">Using Realm with background app refresh</h3> <p>On iOS 8 and above, files inside apps are automatically encrypted using <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSFileManager_Class/index.html#//apple_ref/doc/constant_group/File_Protection_Values"><code>NSFileProtection</code></a> whenever the device is locked. If your app attempts to do any work involving Realm while the device is locked and the <code>NSFileProtection</code> attributes of your Realm files are set to encrypt them (which is the case by default), an <code>open() failed: Operation not permitted</code> exception will be thrown.</p> <p>In order to handle this, it is necessary to ensure that the file protection attributes applied to both the Realm file itself and its <a href="https://realm.io/docs/swift/latest/#auxiliary-realm-files">auxiliary files</a> is downgraded to a less strict one that allows file access even when the device is locked, such as <code>NSFileProtectionCompleteUntilFirstUserAuthentication</code>.</p> <p>If you choose to opt out of complete iOS file encryption in this way, we encourage you to use <a href="https://realm.io/docs/swift/latest/#encryption">Realm’s own built-in encryption</a> to ensure your data is still properly secured.</p> <p>Since the auxiliary files can sometimes be lazily created and deleted mid-operation, we recommend that you apply the file protection attributes to the parent folder containing these Realm files. This will ensure the attribute is properly applied to all of the relevant Realm files, regardless of their creation time.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>

<span class="c1">// Get our Realm file's parent directory</span>
<span class="k">let</span> <span class="nv">folderPath</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">fileURL</span><span class="o">!.</span><span class="nf">deletingLastPathComponent</span><span class="p">()</span><span class="o">.</span><span class="n">path</span>

<span class="c1">// Disable file protection for this directory</span>
<span class="k">try!</span> <span class="kt">FileManager</span><span class="o">.</span><span class="k">default</span><span class="o">.</span><span class="nf">setAttributes</span><span class="p">([</span><span class="kt">FileAttributeKey</span><span class="p">(</span><span class="nv">rawValue</span><span class="p">:</span> <span class="kt">NSFileProtectionKey</span><span class="p">):</span> <span class="kt">NSFileProtectionNone</span><span class="p">],</span>
                                       <span class="nv">ofItemAtPath</span><span class="p">:</span> <span class="n">folderPath</span><span class="p">)</span></code></pre> <h2 id="realms">Realms<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#realms" aria-label="Anchor link for: realms" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <p>A <strong>Realm</strong> is an instance of a Realm Mobile Database container.</p> <p>For a detailed discussion about Realms, please read <a href="https://realm.io/docs/data-model"><em>The Realm Data Model</em></a>.</p> <h3 id="opening-realms">Opening Local Realms</h3> <p>To open a Realm, instantiate a new <code>Realm</code> object:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>

<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">myDog</span><span class="p">)</span>
<span class="p">}</span></code></pre> <p>This instantiates the <a href="https://realm.io/docs/swift/latest/#default-realm">default Realm</a>.</p> <h4 id="configuring-a-realm">Configuring a Local Realm</h4> <p>Configure a Realm before opening it by creating an instance of <a href="https://realm.io/docs/swift/latest/api/Classes/Realm/Configuration.html"><code>Realm.Configuration</code></a> and setting the appropriate properties. Creating and customizing a configuration value allows you to customize, among other aspects:</p> <ul> <li>The path to a local Realm’s file location</li> <li>The <a href="https://realm.io/docs/swift/latest/#migrations">migration function</a>, if a Realm’s schemas change between revisions and must be updated</li> <li>Configuring the <a href="https://realm.io/docs/swift/latest/#compacting-realms">compaction function</a> to ensure efficient utilization of disk space.</li> </ul> <p>The configuration can either be passed to <code>Realm(configuration: config)</code> each time you need a Realm instance, or you can set the configuration to use for the default Realm with <code>Realm.Configuration.defaultConfiguration = config</code>.</p> <p>For example, suppose you have an application where users have to log in to your web backend, and you want to support quickly switching between accounts. You could give each account its own Realm file that will be used as the default Realm by doing the following:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">func</span> <span class="nf">setDefaultRealmForUser</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">()</span>

    <span class="c1">// Use the default directory, but replace the filename with the username</span>
    <span class="n">config</span><span class="o">.</span><span class="n">fileURL</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">fileURL</span><span class="o">!.</span><span class="nf">deletingLastPathComponent</span><span class="p">()</span><span class="o">.</span><span class="nf">appendingPathComponent</span><span class="p">(</span><span class="s">"</span><span class="se">\(</span><span class="n">username</span><span class="se">)</span><span class="s">.realm"</span><span class="p">)</span>

    <span class="c1">// Set this as the configuration used for the default Realm</span>
    <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="o">.</span><span class="n">defaultConfiguration</span> <span class="o">=</span> <span class="n">config</span>
<span class="p">}</span></code></pre> <p>You can have multiple configuration objects, so you can control the version, schema and location of each Realm independently.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">(</span>
    <span class="c1">// Get the URL to the bundled file</span>
    <span class="nv">fileURL</span><span class="p">:</span> <span class="kt">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">url</span><span class="p">(</span><span class="nv">forResource</span><span class="p">:</span> <span class="s">"MyBundledData"</span><span class="p">,</span> <span class="nv">withExtension</span><span class="p">:</span> <span class="s">"realm"</span><span class="p">),</span>
    <span class="c1">// Open the file in read-only mode as application bundles are not writeable</span>
    <span class="nv">readOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>

<span class="c1">// Open the Realm with the configuration</span>
<span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">(</span><span class="nv">configuration</span><span class="p">:</span> <span class="n">config</span><span class="p">)</span>

<span class="c1">// Read some data from the bundled Realm</span>
<span class="k">let</span> <span class="nv">results</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"age &gt; 5"</span><span class="p">)</span></code></pre> <p>The most common location to store writable Realm files is the “Documents” directory on iOS and the “Application Support” directory on macOS. Please respect <a href="https://developer.apple.com/icloud/documentation/data-storage/index.html">Apple’s iOS Data Storage Guidelines</a>, which recommend that if documents that can be regenerated by the app should be stored in the <code>&lt;Application_Home&gt;/Library/Caches</code> directory. If a custom URL is used to initialize a Realm, it must describe a location with write permissions.</p> <h4 id="default-realm">The default Realm</h4> <p>You may have noticed so far that we have initialized access to our <code>realm</code> variable by calling <a href="https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5RealmcFMS0_FT4pathSS_S0_"><code>Realm()</code></a>. That method returns a <code>Realm</code> object that maps to a file named <code>default.realm</code> in the Documents folder (iOS) or Application Support folder (macOS) of your app.</p> <h3 id="opening-a-synchronized-realm">Opening a synchronized Realm</h3> <div class="alert alert-info"> <p>Are you looking to use Realm Mobile Platform to synchronize all of your Realm Databases? <a href="https://docs.realm.io/platform/">All sync related documentation has been moved to our platform documentation</a></p> </div> <h3 id="in-memory-realms">In-memory Realms</h3> <p>By setting the <code>inMemoryIdentifier</code> rather than the <code>fileURL</code> on your <code>Realm.Configuration</code>, you can create a Realm that runs entirely in memory without being persisted to disk. Setting <code>inMemoryIdentifier</code> will nil out <code>fileURL</code> (and vice-versa).</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">(</span><span class="nv">configuration</span><span class="p">:</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">(</span><span class="nv">inMemoryIdentifier</span><span class="p">:</span> <span class="s">"MyInMemoryRealm"</span><span class="p">))</span></code></pre> <p>In-memory Realms do not save data across app launches, but all other features of Realm will work as expected, including querying, relationships and thread-safety. This is a useful option if you need flexible data access without the overhead of disk persistence.</p> <div class="alert alert-warning"> <p>In-memory Realms create several files in a temporary directory for coordinating things like cross-process notifications. No data is actually written to the files unless the operating system needs to swap to disk due to memory pressure.</p> </div> <div class="alert alert-danger"> <p><strong>Notice:</strong> When all in-memory Realm instances with a particular identifier go out of scope with no references, <em>all data in that Realm is deleted.</em> We recommend holding onto a strong reference to any in-memory Realms during your app’s lifetime. (This is not necessary for on-disk Realms.)</p> </div> <h3 id="error-handling">Error handling</h3> <p>Like any disk I/O operation, creating a <code>Realm</code> instance could sometimes fail if resources are constrained. In practice, this can only happen the first time a Realm instance is created on a given thread. Subsequent accesses to a Realm from the same thread will reuse a cached instance and will always succeed.</p> <p>To handle errors when first accessing a Realm on a given thread, use Swift’s built-in error handling mechanism:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">do</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">Realm</span><span class="p">()</span>
<span class="p">}</span> <span class="k">catch</span> <span class="k">let</span> <span class="nv">error</span> <span class="k">as</span> <span class="kt">NSError</span> <span class="p">{</span>
    <span class="c1">// handle error</span>
<span class="p">}</span></code></pre> <h3 id="auxiliary-realm-files">Auxiliary Realm files</h3> <p>Alongside the standard <code>.realm</code> files, Realm also generates and maintains additional files and directories for its own internal operations.</p> <ul> <li><code>.realm.lock</code> - A lock file for resource locks.</li> <li><code>.realm.management</code> - Directory of interprocess lock files.</li> <li><code>.realm.note</code> - A named pipe for notifications.</li> </ul> <p>These files don’t have any effect on <code>.realm</code> database files, and won’t cause any erroneous behavior if their parent database file is deleted or replaced.</p> <p>When <a href="https://realm.io/docs/swift/latest/#reporting-realm-issues">reporting Realm issues</a>, please be sure to include these auxiliary files along with your main <code>.realm</code> file as they contain useful information for debugging purposes.</p> <h3 id="bundling-a-realm">Bundling a Realm</h3> <p>It’s common to seed an app with initial data, making it available to your users immediately on first launch. Here’s how to do this:</p> <ol> <li>First, populate the Realm. You should use the same data model as your final, shipping app to create a Realm and populate it with the data you wish to bundle with your app. Since Realm files are cross-platform, you can use a macOS app (see our <a href="https://github.com/realm/realm-cocoa/tree/master/examples/osx/objc/JSONImport">JSONImport example</a>) or your iOS app running in the simulator.</li> <li>In the code where you’re generating this Realm file, you should finish by making a compacted copy of the file (see <a href="https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5Realm15writeCopyToPathFS0_FTSS13encryptionKeyGSqCSo6NSData__GSqCSo7NSError_"><code>Realm().writeCopyToPath(_:encryptionKey:)</code></a>). This will reduce the Realm’s file size, making your final app lighter to download for your users.</li> <li>Drag the new compacted copy of your Realm file to your final app’s Xcode Project Navigator.</li> <li>Go to your app target’s build phases tab in Xcode and add the Realm file to the “Copy Bundle Resources” build phase.</li> <li>At this point, your bundled Realm file will be accessible to your app. You can find its path by using <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSBundle_Class/#//apple_ref/occ/instm/NSBundle/pathForResource:ofType:"><code>NSBundle.main.pathForResource(_:ofType:)</code></a>.</li> <li>If the bundled Realm contains fixed data that you don’t need to modify, you can open it directly from the bundle path by setting <code>readOnly = true</code> on the <code>Realm.Configuration</code> object. Otherwise, if it’s initial data that you’ll be modifying, you can copy the bundled file to your application’s Documents directory using <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSFileManager_Class/index.html#//apple_ref/occ/instm/NSFileManager/copyItemAtPath:toPath:error:"><code>NSFileManager.default.copyItemAtPath(_:toPath:)</code></a>.</li> </ol> <p>You can refer to our <a href="https://github.com/realm/realm-cocoa/tree/master/examples/ios/swift/Migration">migration sample app</a> for an example of how to use a bundled Realm file.</p> <h3 id="class-subsets">Class subsets</h3> <p>In some scenarios you may wish to limit which classes can be stored in a specific Realm. For example, if you have two teams working on different components of your application which both use Realm internally, you may not want to have to coordinate <a href="https://realm.io/docs/swift/latest/#migrations">migrations</a> between them. You can do this by setting the <code>objectTypes</code> property of your <code>Realm.Configuration</code>:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">(</span><span class="nv">objectTypes</span><span class="p">:</span> <span class="p">[</span><span class="kt">MyClass</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="kt">MyOtherClass</span><span class="o">.</span><span class="k">self</span><span class="p">])</span>
<span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">(</span><span class="nv">configuration</span><span class="p">:</span> <span class="n">config</span><span class="p">)</span></code></pre> <h3 id="compacting-realms">Compacting Realms</h3> <p>Realm works in such a way that the size of a Realm file is always larger than the total size of the objects stored within it. See our documentation on <a href="https://realm.io/docs/swift/latest/#threading">threading</a> for some of the reasons why this architecture enables some of Realm’s great performance, concurrency and safety advantages.</p> <p>In order to avoid making expensive system calls, Realm files are rarely shrunk at runtime. Instead, they grow by specific size increments, with new data being written within unused space tracked inside the file. However, there may be situations in which a significant portion of a Realm file is comprised of unused space. In order to deal with this, you may set the <code>shouldCompactOnLaunch</code> block property upon a Realm’s configuration object to determine if, when opened for the first time, the Realm file should be compacted. For example:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">(</span><span class="nv">shouldCompactOnLaunch</span><span class="p">:</span> <span class="p">{</span> <span class="n">totalBytes</span><span class="p">,</span> <span class="n">usedBytes</span> <span class="k">in</span>
    <span class="c1">// totalBytes refers to the size of the file on disk in bytes (data + free space)</span>
    <span class="c1">// usedBytes refers to the number of bytes used by data in the file</span>

    <span class="c1">// Compact if the file is over 100MB in size and less than 50% 'used'</span>
    <span class="k">let</span> <span class="nv">oneHundredMB</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span>
    <span class="nf">return</span> <span class="p">(</span><span class="n">totalBytes</span> <span class="o">&gt;</span> <span class="n">oneHundredMB</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="kt">Double</span><span class="p">(</span><span class="n">usedBytes</span><span class="p">)</span> <span class="o">/</span> <span class="kt">Double</span><span class="p">(</span><span class="n">totalBytes</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mf">0.5</span>
<span class="p">})</span>
<span class="k">do</span> <span class="p">{</span>
    <span class="c1">// Realm is compacted on the first open if the configuration block conditions were met.</span>
    <span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">Realm</span><span class="p">(</span><span class="nv">configuration</span><span class="p">:</span> <span class="n">config</span><span class="p">)</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
    <span class="c1">// handle error compacting or opening Realm</span>
<span class="p">}</span></code></pre> <p>The compaction operation works by reading the entire contents of the Realm file, rewriting it to a new file at a different location, then replacing the original file. Depending on the amount of data in a file, this may be an expensive operation.</p> <p>We encourage you to experiment with the numbers to identify a good balance between performing the compaction too often and letting Realm files grow too large.</p> <p>Finally, if another process is accessing the Realm, compaction will be skipped even if the configuration block’s conditions were met. That’s because compaction cannot be safely performed while a Realm is being accessed.</p> <h3 id="deleting-realm-files">Deleting Realm files</h3> <p>In some cases, such as clearing caches, or resetting your entire dataset, it may be appropriate to completely delete a Realm file from disk.</p> <p>Because Realm avoids copying data into memory except when absolutely required, all objects managed by a Realm contain references to the file on disk, and must be deallocated before the file can be safely deleted. This includes all objects read from (or added to) the Realm, all <code>List</code>, <code>Results</code>, and <code>ThreadSafeReference</code> objects, and the <code>Realm</code> itself.</p> <p>In practice, this means that deleting a Realm file should be done either on application startup before you have opened the Realm, or after only opening the Realm within an explicit <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmAutoreleasePools.html">autorelease pool</a>, which ensures that all of the Realm objects will have been deallocated.</p> <p>Finally, although not strictly necessary, you should delete <a href="https://realm.io/docs/swift/latest/#auxiliary-realm-files">auxiliary Realm files</a> as well as the main Realm file to fully clean up all related files.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="n">autoreleasepool</span> <span class="p">{</span>
    <span class="c1">// all Realm usage here</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">realmURL</span> <span class="o">=</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="o">.</span><span class="n">defaultConfiguration</span><span class="o">.</span><span class="n">fileURL</span><span class="o">!</span>
<span class="k">let</span> <span class="nv">realmURLs</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">realmURL</span><span class="p">,</span>
    <span class="n">realmURL</span><span class="o">.</span><span class="nf">appendingPathExtension</span><span class="p">(</span><span class="s">"lock"</span><span class="p">),</span>
    <span class="n">realmURL</span><span class="o">.</span><span class="nf">appendingPathExtension</span><span class="p">(</span><span class="s">"note"</span><span class="p">),</span>
    <span class="n">realmURL</span><span class="o">.</span><span class="nf">appendingPathExtension</span><span class="p">(</span><span class="s">"management"</span><span class="p">)</span>
<span class="p">]</span>
<span class="k">for</span> <span class="kt">URL</span> <span class="k">in</span> <span class="n">realmURLs</span> <span class="p">{</span>
    <span class="k">do</span> <span class="p">{</span>
        <span class="k">try</span> <span class="kt">FileManager</span><span class="o">.</span><span class="k">default</span><span class="o">.</span><span class="nf">removeItem</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
        <span class="c1">// handle error</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <h2 id="models">Models<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#models" aria-label="Anchor link for: models" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <p>Realm data models are defined as regular Swift classes with regular properties. To create one, simply subclass <code>Object</code> or an existing Realm model class. Realm model objects mostly function like any other Swift objects. You can define your own methods on them, conform them to protocols, and use them like you would any other object. The main restriction is that you can only use an object on the thread which it was created.</p> <p>Relationships and nested data structures are modeled by including properties of the target type or <a href="https://realm.io/docs/swift/latest/api/Classes/List.html"><code>List</code>s</a> for typed lists of objects. <code>List</code> instances can also be used to model collections of primitive values (for example, an array of strings or integers).</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">import</span> <span class="kt">RealmSwift</span>

<span class="c1">// Dog model</span>
<span class="kd">class</span> <span class="kt">Dog</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">owner</span><span class="p">:</span> <span class="kt">Person</span><span class="p">?</span> <span class="c1">// Properties can be optional</span>
<span class="p">}</span>

<span class="c1">// Person model</span>
<span class="kd">class</span> <span class="kt">Person</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">birthdate</span> <span class="o">=</span> <span class="kt">Date</span><span class="p">(</span><span class="nv">timeIntervalSince1970</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">dogs</span> <span class="o">=</span> <span class="kt">List</span><span class="o">&lt;</span><span class="kt">Dog</span><span class="o">&gt;</span><span class="p">()</span>
<span class="p">}</span></code></pre> <p>Since Realm parses all models defined in your code at launch, they must all be valid, even if they are never used.</p> <p>When using Realm from Swift, the <code>Swift.reflect(_:)</code> function is used to determine information about your models, which requires that calling <code>init()</code> succeed. This means that all non-optional properties must have a default value.</p> <p>See our <a href="https://realm.io/docs/swift/latest/api/Classes/Object.html">API documentation on <code>Object</code></a> for more details.</p> <h3 id="supported-types">Supported property types</h3> <p>Realm supports the following property types: <code>Bool</code>, <code>Int</code>, <code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code>, <code>Double</code>, <code>Float</code>, <code>String</code>, <code>Date</code>, and <code>Data</code>.</p> <p><code>CGFloat</code> properties are discouraged, as the type is not platform independent.</p> <p><code>String</code>, <code>Date</code> and <code>Data</code> properties can be optional. <code>Object</code> properties <em>must</em> be optional. Storing optional numbers is done using <code>RealmOptional</code>.</p> <h3 id="required-properties">Required properties</h3> <p><code>String</code>, <code>Date</code>, and <code>Data</code> properties can be declared as optional or required (non-optional) using standard Swift syntax. Optional numeric types are declared using the <a href="https://realm.io/docs/swift/latest/api/Classes/RealmOptional.html"><code>RealmOptional</code></a> type:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Person</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="c1">// Optional string property, defaulting to nil</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>

    <span class="c1">// Optional int property, defaulting to nil</span>
    <span class="c1">// RealmOptional properties should always be declared with `let`,</span>
    <span class="c1">// as assigning to them directly will not work as desired</span>
    <span class="k">let</span> <span class="nv">age</span> <span class="o">=</span> <span class="kt">RealmOptional</span><span class="o">&lt;</span><span class="kt">Int</span><span class="o">&gt;</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="nf">write</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">person</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="kt">Person</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="p">[</span><span class="s">"Jane"</span><span class="p">,</span> <span class="mi">27</span><span class="p">])</span>
    <span class="c1">// Reading from or modifying a `RealmOptional` is done via the `value` property</span>
    <span class="n">person</span><span class="o">.</span><span class="n">age</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">28</span>
<span class="p">}</span></code></pre> <p><code>RealmOptional</code> supports <code>Int</code>, <code>Float</code>, <code>Double</code>, <code>Bool</code>, and all of the sized versions of <code>Int</code> (<code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code>).</p> <h3 id="primary-keys">Primary keys</h3> <p>Override <a href="https://realm.io/docs/swift/latest/api/Classes/Object.html#/s:ZFC10RealmSwift6Object17indexedPropertiesFMS0_FT_GSaSS_"><code>Object.primaryKey()</code></a> to set the model’s primary key. Declaring a primary key allows objects to be looked up and updated efficiently and enforces uniqueness for each value. Once an object with a primary key is added to a Realm, the primary key cannot be changed.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Person</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">id</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>

    <span class="k">override</span> <span class="kd">static</span> <span class="kd">func</span> <span class="nf">primaryKey</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"id"</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <h3 id="indexing-properties">Indexing properties</h3> <p>To index a property, override <a href="https://realm.io/docs/swift/latest/api/Classes/Object.html#/s:ZFC10RealmSwift6Object17indexedPropertiesFMS0_FT_GSaSS_"><code>Object.indexedProperties()</code></a>. Like primary keys, indexes make writes slightly slower, but makes queries using equality and <code>IN</code> operators faster. (It also makes your Realm file slightly larger, to store the index.) It’s best to only add indexes when you’re optimizing the read performance for specific situations.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Book</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">price</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">title</span> <span class="o">=</span> <span class="s">""</span>

    <span class="k">override</span> <span class="kd">static</span> <span class="kd">func</span> <span class="nf">indexedProperties</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span><span class="s">"title"</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <p>Realm supports indexing for string, integer, boolean, and <code>Date</code> properties.</p> <h3 id="ignoring-properties">Ignoring properties</h3> <p>If you don’t want to save a field in your model to its Realm, override <a href="https://realm.io/docs/swift/latest/api/Classes/Object.html#/s:ZFC10RealmSwift6Object17ignoredPropertiesFMS0_FT_GSaSS_"><code>Object.ignoredProperties()</code></a>. Realm won’t interfere with the regular operation of these properties; they’ll be backed by ivars, and you can freely override their setters and getters.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Person</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">tmpID</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="c1">// read-only properties are automatically ignored</span>
        <span class="k">return</span> <span class="s">"</span><span class="se">\(</span><span class="n">firstName</span><span class="se">)</span><span class="s"> </span><span class="se">\(</span><span class="n">lastName</span><span class="se">)</span><span class="s">"</span>
    <span class="p">}</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">firstName</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">lastName</span> <span class="o">=</span> <span class="s">""</span>

    <span class="k">override</span> <span class="kd">static</span> <span class="kd">func</span> <span class="nf">ignoredProperties</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span><span class="s">"tmpID"</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <p>Ignored properties behave exactly like normal properties. They don’t support any Realm-specific functionality (e.g., they can’t be used in queries and won’t trigger notifications). They can still be observed using KVO.</p> <h3 id="property-attributes">Property attributes</h3> <p>Realm model properties must have the <code>@objc dynamic var</code> attribute to become accessors for the underlying database data. Note that if the class is declared as <code>@objcMembers</code> (Swift 4 or later), the individual properties can just be declared as <code>dynamic var</code>.</p> <p>There are three exceptions to this: <code>LinkingObjects</code>, <code>List</code> and <code>RealmOptional</code>. Those properties cannot be declared as dynamic because generic properties cannot be represented in the Objective‑C runtime, which is used for dynamic dispatch of <code>dynamic</code> properties. These properties should always be declared with <code>let</code>.</p> <h3 id="property-cheatsheet">Property cheatsheet</h3> <p>This table provides a handy reference to declaring model properties.</p> <table> <thead> <tr> <th>Type</th> <th>Non-optional</th> <th>Optional</th> </tr> </thead> <tbody> <tr> <td data-label="Type">Bool</td> <td data-label="Non-optional"><code>@objc dynamic var value = false</code></td> <td data-label="Optional"><code>let value = RealmOptional&lt;Bool&gt;()</code></td> </tr> <tr> <td data-label="Type">Int</td> <td data-label="Non-optional"><code>@objc dynamic var value = 0</code></td> <td data-label="Optional"><code>let value = RealmOptional&lt;Int&gt;()</code></td> </tr> <tr> <td data-label="Type">Float</td> <td data-label="Non-optional"><code>@objc dynamic var value: Float = 0.0</code></td> <td data-label="Optional"><code>let value = RealmOptional&lt;Float&gt;()</code></td> </tr> <tr> <td data-label="Type">Double</td> <td data-label="Non-optional"><code>@objc dynamic var value: Double = 0.0</code></td> <td data-label="Optional"><code>let value = RealmOptional&lt;Double&gt;()</code></td> </tr> <tr> <td data-label="Type">String</td> <td data-label="Non-optional"><code>@objc dynamic var value = ""</code></td> <td data-label="Optional"><code>@objc dynamic var value: String? = nil</code></td> </tr> <tr> <td data-label="Type">Data</td> <td data-label="Non-optional"><code>@objc dynamic var value = Data()</code></td> <td data-label="Optional"><code>@objc dynamic var value: Data? = nil</code></td> </tr> <tr> <td data-label="Type">Date</td> <td data-label="Non-optional"><code>@objc dynamic var value = Date()</code></td> <td data-label="Optional"><code>@objc dynamic var value: Date? = nil</code></td> </tr> <tr> <td data-label="Type">Object</td> <td data-label="Non-optional">n/a: must be optional</td> <td data-label="Optional"><code>@objc dynamic var value: Class?</code></td> </tr> <tr> <td data-label="Type">List</td> <td data-label="Non-optional"><code>let value = List&lt;Type&gt;()</code></td> <td data-label="Optional">n/a: must be non-optional</td> </tr> <tr> <td data-label="Type">LinkingObjects</td> <td data-label="Non-optional"><code>let value = LinkingObjects(fromType: Class.self, property: "property")</code></td> <td data-label="Optional">n/a: must be non-optional</td> </tr> </tbody> </table> <h2 id="working-with-realm-objects">Working with Realm objects<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#working-with-realm-objects" aria-label="Anchor link for: working with realm objects" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <h3 id="auto-updating-objects">Auto-updating objects</h3> <p><code>Object</code> instances are live, auto-updating views into the underlying data; you never have to refresh objects. Modifying the properties of an object will immediately be reflected in any other instances referring to the same object.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">myDog</span> <span class="o">=</span> <span class="kt">Dog</span><span class="p">()</span>
<span class="n">myDog</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"Fido"</span>
<span class="n">myDog</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">myDog</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">myPuppy</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"age == 1"</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">myPuppy</span><span class="o">!.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">2</span>
<span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="s">"age of my dog: </span><span class="se">\(</span><span class="n">myDog</span><span class="o">.</span><span class="n">age</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="c1">// =&gt; 2</span></code></pre> <p>This not only keeps Realm fast and efficient, it allows your code to be simpler and more reactive. If your UI code is dependent on a specific Realm object, you don’t need to worry about refreshing or re-fetching it before triggering a UI redraw.</p> <p>You can subscribe to <a href="https://realm.io/docs/swift/latest/#notifications">Realm notifications</a> to know when Realm data in an object is updated, indicating when your app’s UI should be refreshed.</p> <h3 id="model-inheritance">Model inheritance</h3> <p>Realm allows models to be further subclassed, allowing for code reuse across models, but some Cocoa features that contribute to the runtime’s rich class polymorphism aren’t available. Here’s what’s possible:</p> <ul> <li>Class methods, instance methods, and properties on parent classes are inherited in their child classes.</li> <li>Methods and functions that take parent classes as arguments can operate on subclasses.</li> </ul> <p>The following is currently not possible:</p> <ul> <li>Casting between polymorphic classes (ie, subclass to subclass, subclass to parent, parent to subclass, etc.)</li> <li>Querying on multiple classes simultaneously</li> <li>Multi-class containers (<code>List</code> and <code>Results</code>)</li> </ul> <p>Adding this functionality to Realm is <a href="https://github.com/realm/realm-cocoa/issues/1109">on the roadmap</a>. For the time being, we’ve provided some <a href="https://github.com/realm/realm-cocoa/issues/1109#issuecomment-143834756">code samples</a> for working around some of the more common patterns.</p> <p>Alternatively, if your implementation allows it, we recommend using the following pattern of class composition to build up subclasses encompassing logic from other classes:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Base Model</span>
<span class="kd">class</span> <span class="kt">Animal</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">age</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">}</span>

<span class="c1">// Models composed with Animal</span>
<span class="kd">class</span> <span class="kt">Duck</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">animal</span><span class="p">:</span> <span class="kt">Animal</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="kt">Frog</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">animal</span><span class="p">:</span> <span class="kt">Animal</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">dateProp</span> <span class="o">=</span> <span class="kt">Date</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// Usage</span>
<span class="k">let</span> <span class="nv">duck</span> <span class="o">=</span> <span class="kt">Duck</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="p">[</span> <span class="s">"animal"</span><span class="p">:</span> <span class="p">[</span> <span class="s">"age"</span><span class="p">:</span> <span class="mi">3</span> <span class="p">],</span> <span class="s">"name"</span><span class="p">:</span> <span class="s">"Gustav"</span> <span class="p">])</span></code></pre> <h2 id="collections">Collections<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#collections" aria-label="Anchor link for: collections" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <p>Realm has several types that help represent groups of objects, which we refer to as “Realm collections”:</p> <ol> <li><a href="https://realm.io/docs/swift/latest/api/Classes/Results.html"><code>Results</code></a>, a class representing objects retrieved from <a href="https://realm.io/docs/swift/latest/#queries">queries</a>.</li> <li><a href="https://realm.io/docs/swift/latest/api/Classes/List.html"><code>List</code></a>, a class representing <a href="https://realm.io/docs/swift/latest/#many-to-many">to-many relationships</a> in models.</li> <li><a href="https://realm.io/docs/swift/latest/api/Classes/LinkingObjects.html"><code>LinkingObjects</code></a>, a class representing <a href="https://realm.io/docs/swift/latest/#inverse-relationships">inverse relationships</a> in models.</li> <li><a href="https://realm.io/docs/swift/latest/api/Protocols/RealmCollection.html"><code>RealmCollection</code></a>, a protocol defining the common interface to which all Realm collections conform.</li> <li><a href="https://realm.io/docs/swift/latest/api/Classes/AnyRealmCollection.html"><code>AnyRealmCollection</code></a>, a type-erased class that can forward calls to a concrete Realm collection like <code>Results</code>, <code>List</code> or <code>LinkingObjects</code>.</li> </ol> <p>The Realm collection types each conform to the <code>RealmCollection</code> protocol, which ensures they behave consistently. This protocol inherits from <code>CollectionType</code> so that it may be used in the same ways as other standard library collections. Additional common Realm collection APIs are declared in this protocol, such as querying, sorting and aggregate operations, among others. <code>List</code>s have additional mutation operations that extend beyond the protocol interface such as adding and deleting objects or values.</p> <p>Using the <code>RealmCollection</code> protocol, you can write generic code that can operate on any Realm collection:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">func</span> <span class="n">operateOn</span><span class="o">&lt;</span><span class="kt">C</span><span class="p">:</span> <span class="kt">RealmCollection</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">collection</span><span class="p">:</span> <span class="kt">C</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Collection could be either Results or List</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"operating on collection containing </span><span class="se">\(</span><span class="n">collection</span><span class="o">.</span><span class="n">count</span><span class="se">)</span><span class="s"> objects"</span><span class="p">)</span>
<span class="p">}</span></code></pre> <p>Due to limitations with Swift’s type system, it’s necessary to use a <a href="https://realm.io/news/type-erased-wrappers-in-swift/">type-erased wrapper</a> such as <a href="https://realm.io/docs/swift/latest/api/Classes/AnyRealmCollection.html"><code>AnyRealmCollection</code></a> in order to store this collection as a property or variable:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">ViewController</span> <span class="p">{</span>
<span class="c1">//    let collection: RealmCollection</span>
<span class="c1">//                    ^</span>
<span class="c1">//                    error: protocol 'RealmCollection' can only be used</span>
<span class="c1">//                    as a generic constraint because it has Self or</span>
<span class="c1">//                    associated type requirements</span>
<span class="c1">//</span>
<span class="c1">//    init&lt;C: RealmCollection&gt;(collection: C) where C.ElementType == MyModel {</span>
<span class="c1">//        self.collection = collection</span>
<span class="c1">//    }</span>

    <span class="k">let</span> <span class="nv">collection</span><span class="p">:</span> <span class="kt">AnyRealmCollection</span><span class="o">&lt;</span><span class="kt">MyModel</span><span class="o">&gt;</span>

    <span class="kd">init</span><span class="o">&lt;</span><span class="kt">C</span><span class="p">:</span> <span class="kt">RealmCollection</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">collection</span><span class="p">:</span> <span class="kt">C</span><span class="p">)</span> <span class="k">where</span> <span class="kt">C</span><span class="o">.</span><span class="kt">ElementType</span> <span class="o">==</span> <span class="kt">MyModel</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">collection</span> <span class="o">=</span> <span class="kt">AnyRealmCollection</span><span class="p">(</span><span class="n">collection</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <h3 id="copying-objects-between-realms">Copying objects between Realms</h3> <p>Copying Realm objects to other Realms is as simple as passing in the original object to <a href="https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5Realm6createFS0_U__FTMQ_5valuePSs9AnyObject_6updateSb_Q_"><code>Realm().create(_:value:update:)</code></a>. For example, <code>realm.create(MyObjectSubclass.self, value: originalObjectInstance)</code>. Remember that Realm objects can only be accessed from the thread on which they were first created, so this copy will only work for Realms on the same thread.</p> <p>Note that <code>Realm().create(_:value:update:)</code> does not support handling cyclical object graphs. Do not pass in an object containing relationships involving objects that refer back to their parents, either directly or indirectly.</p> <h2 id="relationships">Relationships<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#relationships" aria-label="Anchor link for: relationships" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <p>You can link any two Realm Objects together. Relationships are cheap in Realm: traversing links isn’t expensive in terms of speed or memory. Let’s explore the different types of relationships Realm lets you define between objects.</p> <p>Link a <code>Object</code> by using <code>Object</code> and <code>List</code> properties. <code>List</code>s have an interface very similar to <code>Array</code>, and objects contained in a <code>List</code> can be accessed using indexed subscripting. Unlike <code>Array</code>s, <code>List</code>s only hold <code>Object</code>s of a single subclass type. For more details, see the API documentation for <a href="https://realm.io/docs/swift/latest/api/Classes/List.html"><code>List</code></a>.</p> <p>Assuming your Person model has already been defined (see <a href="https://realm.io/docs/swift/latest/#models">models</a>), let’s create another model called <code>Dog</code>:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Dog</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
<span class="p">}</span></code></pre> <h3 id="many-to-one">Many-to-one</h3> <p>To set up a many-to-one or one-to-one relationship, give a model a property whose type is one of your <code>Object</code> subclasses:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Dog</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="c1">// ... other property declarations</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">owner</span><span class="p">:</span> <span class="kt">Person</span><span class="p">?</span> <span class="c1">// to-one relationships must be optional</span>
<span class="p">}</span></code></pre> <p>You can use this property like you would any other:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">jim</span> <span class="o">=</span> <span class="kt">Person</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">rex</span> <span class="o">=</span> <span class="kt">Dog</span><span class="p">()</span>
<span class="n">rex</span><span class="o">.</span><span class="n">owner</span> <span class="o">=</span> <span class="n">jim</span></code></pre> <p>When using <code>Object</code> properties, you can access nested properties using normal property syntax. For example, <code>rex.owner?.address.country</code> will traverse the object graph and automatically fetch each object from Realm as needed.</p> <h3 id="many-to-many">Many-to-many</h3> <p>You can can create a relationship to any number of objects or supported primitive values using <code>List</code> properties. <code>List</code>s contain other <code>Object</code>s or primitive values of a single type and have an interface very similar to a mutable <code>Array</code>.</p> <p><code>List</code>s containing Realm objects may store multiple references to the same Realm object, including objects with primary keys. For example, you may create an empty <code>List</code> and insert the same object into it three times; the <code>List</code> will then return that object if the element at any of the indices 0, 1, and 2 is accessed.</p> <p><code>List</code>s can store primitive values in lieu of Realm objects. To do so, simply define a <code>List</code> containing <code>Bool</code>, <code>Int</code>, <code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code>, <code>Float</code>, <code>Double</code>, <code>String</code>, <code>Data</code>, or <code>Date</code> values, or the optional versions of any of the aforementioned types.</p> <p>To add a <code>dogs</code> property on our <code>Person</code> model that links to multiple dogs, we can declare a property of type <code>List&lt;Dog&gt;</code>:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Person</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="c1">// ... other property declarations</span>
    <span class="k">let</span> <span class="nv">dogs</span> <span class="o">=</span> <span class="kt">List</span><span class="o">&lt;</span><span class="kt">Dog</span><span class="o">&gt;</span><span class="p">()</span>
<span class="p">}</span></code></pre> <p>You can access and assign <code>List</code> properties as usual:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">someDogs</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"name contains 'Fido'"</span><span class="p">)</span>
<span class="n">jim</span><span class="o">.</span><span class="n">dogs</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nv">objectsIn</span><span class="p">:</span> <span class="n">someDogs</span><span class="p">)</span>
<span class="n">jim</span><span class="o">.</span><span class="n">dogs</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">rex</span><span class="p">)</span></code></pre> <p><code>List</code> properties are guaranteed to preserve their order of insertion.</p> <p>Note that querying <code>List</code>s containing primitive values is currently not supported.</p> <h3 id="inverse-relationships">Inverse relationships</h3> <p>Relationships are unidirectional. Take our two classes <code>Person</code> and <code>Dog</code> as an example. If <code>Person.dogs</code> links to a <code>Dog</code> instance, you can follow the link from <code>Person</code> to a <code>Dog</code>, but there’s no way to go from a <code>Dog</code> to its <code>Person</code> objects. You can set a one-to-one property <code>Dog.owner</code> linking to <code>Person</code>, but those links are independent from one another. Adding a <code>Dog</code> to <code>Person.dogs</code> won’t set that dog’s <code>Dog.owner</code> property to the correct <code>Person</code>. To solve this problem, Realm provides <em>linking objects</em> properties to represent inverse relationships.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Dog</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">age</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">let</span> <span class="nv">owners</span> <span class="o">=</span> <span class="kt">LinkingObjects</span><span class="p">(</span><span class="nv">fromType</span><span class="p">:</span> <span class="kt">Person</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">property</span><span class="p">:</span> <span class="s">"dogs"</span><span class="p">)</span>
<span class="p">}</span></code></pre> <p>With linking objects properties, you can obtain all objects that link to a given object from a specific property. A <code>Dog</code> object can have a property named <code>owners</code> that contains all of the <code>Person</code> objects that have this exact <code>Dog</code> object in their <code>dogs</code> property. Make the <code>owners</code> property of type <code>LinkingObjects</code> and then specifying the relationship that it has with the <code>Person</code> object.</p> <h2 id="writes">Writes<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#writes" aria-label="Anchor link for: writes" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <div class="alert alert-warning"> <p>All changes to an object (addition, modification and deletion) must be done within a write transaction.</p> </div> <p>Realm objects can be instantiated and used as unmanaged objects (i.e. not yet added to a Realm) just like regular Swift objects. To share objects between threads or re-use them between app launches, however, you must add them to a Realm. Adding an object to a Realm must be done within a write transaction. Since write transactions incur non-negligible overhead, you should architect your code to minimize the number of write transactions.</p> <p>Realm write operations are <em>synchronous and blocking,</em> not asynchronous. If thread A starts a write operation, then thread B starts a write operation on the same Realm before thread A is finished, thread A must finish and commit its transaction before thread B’s write operation takes place. Write operations always refresh automatically on <code>beginWrite()</code>, so no race condition is created by overlapping writes.</p> <p>Because write transactions could potentially fail like any other disk IO operations, both <code>Realm.write()</code> &amp; <code>Realm.commitWrite()</code> are marked as <code>throws</code> so you can handle and recover from failures like running out of disk space. There are no other recoverable errors. For brevity, our code samples don’t handle these errors, but you certainly should in your production applications.</p> <h3 id="creating-objects">Creating objects</h3> <p>When you have defined a model you can instantiate your <code>Object</code> subclass and add the new instance to the Realm. Consider this simple model:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Dog</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">age</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">}</span></code></pre> <p>We can create new objects in several ways:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// (1) Create a Dog object and then set its properties</span>
<span class="k">var</span> <span class="nv">myDog</span> <span class="o">=</span> <span class="kt">Dog</span><span class="p">()</span>
<span class="n">myDog</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"Rex"</span>
<span class="n">myDog</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">10</span>

<span class="c1">// (2) Create a Dog object from a dictionary</span>
<span class="k">let</span> <span class="nv">myOtherDog</span> <span class="o">=</span> <span class="kt">Dog</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="p">[</span><span class="s">"name"</span> <span class="p">:</span> <span class="s">"Pluto"</span><span class="p">,</span> <span class="s">"age"</span><span class="p">:</span> <span class="mi">3</span><span class="p">])</span>

<span class="c1">// (3) Create a Dog object from an array</span>
<span class="k">let</span> <span class="nv">myThirdDog</span> <span class="o">=</span> <span class="kt">Dog</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="p">[</span><span class="s">"Fido"</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span></code></pre> <ol> <li>The most obvious is to use the designated initializer to create an object.</li> <li>Objects can also be created from dictionaries using appropriate keys and values.</li> <li>Finally, <code>Object</code> subclasses can be instantiated using arrays. The values in the array have to be in the same order as the corresponding properties in the model.</li> </ol> <p>Values in an array should correspond to properties stored in the Realm—you shouldn’t specify values for ignored properties, or computed properties.</p> <p>After the object is created, you can add it to a Realm:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Get the default Realm</span>
<span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>
<span class="c1">// You only need to do this once (per thread)</span>

<span class="c1">// Add to the Realm inside a transaction</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">myDog</span><span class="p">)</span>
<span class="p">}</span></code></pre> <p>After you have added the object to the Realm you can continue using it, and all changes you make to it will be persisted (and must be made within a write transaction). Any changes are made available to other threads that use the same Realm when the write transaction is committed.</p> <p>Please note that writes block each other, and will block the thread they are made on if multiple writes are in progress. This is similar to other persistence solutions and we recommend that you use the usual best practice for this situation: offloading your writes to a separate thread.</p> <p>Thanks to Realm’s MVCC architecture, reads are not blocked while a write transaction is open. Unless you need to make simultaneous writes from many threads at once, you should favor larger write transactions that do more work over many fine-grained write transactions. When you commit a write transaction to a Realm, all other instances of that Realm will be notified, and be <a href="https://realm.io/docs/swift/latest/#auto-updating-results">updated automatically</a>.</p> <p>See <a href="https://realm.io/docs/swift/latest/api/Classes/Realm.html">Realm</a> and <a href="https://realm.io/docs/swift/latest/api/Classes/Object.html">Object</a> for more details.</p> <h3 id="nested-objects">Nested objects</h3> <p>If an object has properties that are <code>Object</code>s or <code>List</code>s, these can be set recursively using nested arrays and/or dictionaries. You simply replace each object with a dictionary or array representing its properties:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Instead of using already existing dogs...</span>
<span class="k">let</span> <span class="nv">aPerson</span> <span class="o">=</span> <span class="kt">Person</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="p">[</span><span class="s">"Jane"</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="p">[</span><span class="n">aDog</span><span class="p">,</span> <span class="n">anotherDog</span><span class="p">]])</span>

<span class="c1">// ...we can create them inline</span>
<span class="k">let</span> <span class="nv">anotherPerson</span> <span class="o">=</span> <span class="kt">Person</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="p">[</span><span class="s">"Jane"</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="p">[[</span><span class="s">"Buster"</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="p">[</span><span class="s">"Buddy"</span><span class="p">,</span> <span class="mi">6</span><span class="p">]]])</span></code></pre> <p>This will work for any combination of nested arrays and dictionaries. Note that a <code>List</code> may only contain <code>Object</code>s, not basic types such as <code>String</code>.</p> <h3 id="updating-objects">Updating objects</h3> <p>Realm provides a few ways to update objects, all of which offer different tradeoffs depending on the situation.</p> <h4 id="typed-updates">Typed updates</h4> <p>You can update any object by setting its properties within a write transaction.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Update an object with a transaction</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">author</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"Thomas Pynchon"</span>
<span class="p">}</span></code></pre> <h4 id="key-value-coding">Key-value coding</h4> <p><code>Object</code>, <code>Result</code>, and <code>List</code> all conform to <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/">key-value coding</a> (KVC). This can be useful when you need to determine which property to update at runtime.</p> <p>Applying KVC to a collection is a great way to update objects in bulk without the overhead of iterating over a collection while creating accessors for every item.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">persons</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Person</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">persons</span><span class="o">.</span><span class="n">first</span><span class="p">?</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="s">"isFirst"</span><span class="p">)</span>
    <span class="c1">// set each person's planet property to "Earth"</span>
    <span class="n">persons</span><span class="o">.</span><span class="nf">setValue</span><span class="p">(</span><span class="s">"Earth"</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="s">"planet"</span><span class="p">)</span>
<span class="p">}</span></code></pre> <h3 id="objects-with-primary-keys">Objects with primary keys</h3> <p>If your model class includes a <a href="https://realm.io/docs/swift/latest/#primary-keys">primary key</a>, you can have Realm intelligently update or add objects based off of their primary key values using <a href="https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5Realm3addFS0_FTCS_6Object6updateSb_T_"><code>Realm().add(_:update:)</code></a>.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Creating a book with the same primary key as a previously saved book</span>
<span class="k">let</span> <span class="nv">cheeseBook</span> <span class="o">=</span> <span class="kt">Book</span><span class="p">()</span>
<span class="n">cheeseBook</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"Cheese recipes"</span>
<span class="n">cheeseBook</span><span class="o">.</span><span class="n">price</span> <span class="o">=</span> <span class="mi">9000</span>
<span class="n">cheeseBook</span><span class="o">.</span><span class="n">id</span> <span class="o">=</span> <span class="mi">1</span>

<span class="c1">// Updating book with id = 1</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">cheeseBook</span><span class="p">,</span> <span class="nv">update</span><span class="p">:</span> <span class="o">.</span><span class="n">modified</span><span class="p">)</span>
<span class="p">}</span></code></pre> <p>If a <code>Book</code> object with a primary key value of ‘1’ already exists in the database, then that object will simply be updated. If it does not exist, then a completely new <code>Book</code> object will be created and added to the database.</p> <p>You can also partially update objects with primary keys by passing just a subset of the values you wish to update, along with the primary key:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Assuming a "Book" with a primary key of `1` already exists.</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="kt">Book</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="p">[</span><span class="s">"id"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"price"</span><span class="p">:</span> <span class="mf">9000.0</span><span class="p">],</span> <span class="nv">update</span><span class="p">:</span> <span class="o">.</span><span class="n">modified</span><span class="p">)</span>
    <span class="c1">// the book's `title` property will remain unchanged.</span>
<span class="p">}</span></code></pre> <p>You may not pass <code>update: .modified</code> or <code>update: .all</code> for object types which don’t define a primary key.</p> <p>When updating objects you can choose to either have all of the properties on the existing object set to the passed-in value, or only the properties which have actually changed to new values by passing in either <code>.modified</code> or <code>.all</code> to <code>update: </code>. This decision has a few effects:</p> <ol> <li>What notifications are produced. When using <a href="https://realm.io/docs/swift/latest/#object-notifications">object notifications</a>, <code>.all</code> will report that all properties present in the object passed to <code>value</code> have been modified, while <code>.modified</code> will result in only the properties which have new values being reported.</li> <li>How conflicting writes are merged when using Realm Object Server. Supposed you have a Book with a title of Cheese Recipes and a price of 9000, and one client calls <code>realm.create(Book.self, value: ["id": 1, title: "Fruit recipes", price: 9000], update: .all)</code> at the same time as another one calls <code>realm.create(Book.self, value: ["id": 1, title: "Cheese recipes", price: 4000], update: .all)</code>. Because all properties are set, the merged result will be either a Book with a title of Cheese Recipes and a price of 4000 or a Book with a title of Fruit recipes and a price of 9000. If instead they passed <code>.modified</code> the result would be a Book with a title of Fruit recipes and a price of 4000.</li> <li>Performance. There is a small amount of overhead to checking if properties have changed for <code>.modified</code>. However, if properties have not changed, <code>.all</code> will write significantly more data, both increasing the amount of data that has to be written to the local Realm and increasing the number of instructions which need to be processed by the Realm Object Server.</li> </ol> <p>When in doubt, <code>.modified</code> is probably the one you want.</p> <p>Please note that when updating objects, <code>nil</code> is still considered a valid value for <a href="https://realm.io/docs/swift/latest/#required-properties">optional properties</a>. If you supply a dictionary with <code>nil</code> property values, then these will be applied to your object and those properties will be emptied. To ensure you don’t experience any unplanned data loss, please make sure to provide only the properties you wish to update when using this method.</p> <h3 id="deleting-objects">Deleting objects</h3> <p>Pass the object to be deleted to the <a href="https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5Realm6deleteFS0_FCS_6ObjectT_"><code>Realm().delete(_:)</code></a> method within a write transaction.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// let cheeseBook = ... Book stored in Realm</span>

<span class="c1">// Delete an object with a transaction</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">cheeseBook</span><span class="p">)</span>
<span class="p">}</span></code></pre> <p>You can also delete all objects stored in a Realm. Note the Realm file will maintain its size on disk to efficiently reuse that space for future objects.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Delete all objects from the realm</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">deleteAll</span><span class="p">()</span>
<span class="p">}</span></code></pre> <h2 id="queries">Queries<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#queries" aria-label="Anchor link for: queries" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <p>Queries return a <a href="https://realm.io/docs/swift/latest/api/Classes/Results.html"><code>Results</code></a> instance, which contains a collection of <code>Object</code>s. <code>Results</code> have an interface very similar to <code>Array</code> and objects contained in a <code>Results</code> can be accessed using indexed subscripting. Unlike <code>Array</code>s, <code>Results</code> only hold <code>Object</code>s of a single subclass type.</p> <p>All queries (including queries and property access) are lazy in Realm. Data is only read when the properties are accessed.</p> <p>Results to a query are not copies of your data: modifying the results of a query (within a write transaction) will modify the data on disk directly. Similarly, you can traverse your graph of <a href="https://realm.io/docs/swift/latest/#relationships">relationships</a> directly from the <code>Object</code>s contained in a <code>Results</code>.</p> <p>Execution of a query is deferred until the results are used. This means that chaining several temporary <code>Results</code> to sort and filter your data does not perform extra work processing the intermediate state.</p> <p>Once the query has been executed, or a <a href="https://realm.io/docs/swift/latest/#notifications">notification block</a> has been added, the <code>Results</code> is kept up to date with changes made in the Realm, with the query execution performed on a background thread when possible.</p> <p>The most basic method for retrieving objects from a Realm is <a href="https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5Realm7objectsFS0_U__FMQ_GCS_7ResultsQ__"><code>Realm().objects(_:)</code></a>, which returns a Results of all Object instances of the subclass type being queried from the default Realm.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">dogs</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="c1">// retrieves all Dogs from the default Realm</span></code></pre> <h3 id="filtering">Filtering</h3> <p>If you’re familiar with <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSPredicate_Class/Reference/NSPredicate.html"><code>NSPredicate</code></a>, then you already know how to query in Realm. <code>Objects</code>, <code>Realm</code>, <code>List</code>, and <code>Results</code> all provide methods that allow you to query for specific <code>Object</code> instances by simply passing in an <code>NSPredicate</code> instance, predicate string, or predicate format string just as you would when querying an <code>NSArray</code>.</p> <p>For example, the following would extend our earlier example by calling <a href="https://realm.io/docs/swift/latest/api/Classes/Results.html#/s:FC10RealmSwift7Results6filterU__FGS0_Q__FtSSGSaPSs11CVarArgType___GS0_Q__"><code>Results().filter(_:...)</code></a> to retrieve all tan-colored dogs whose names begin with ‘B’ from the default Realm:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Query using a predicate string</span>
<span class="k">var</span> <span class="nv">tanDogs</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"color = 'tan' AND name BEGINSWITH 'B'"</span><span class="p">)</span>

<span class="c1">// Query using an NSPredicate</span>
<span class="k">let</span> <span class="nv">predicate</span> <span class="o">=</span> <span class="kt">NSPredicate</span><span class="p">(</span><span class="nv">format</span><span class="p">:</span> <span class="s">"color = %@ AND name BEGINSWITH %@"</span><span class="p">,</span> <span class="s">"tan"</span><span class="p">,</span> <span class="s">"B"</span><span class="p">)</span>
<span class="n">tanDogs</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="n">predicate</span><span class="p">)</span></code></pre> <p>See Apple’s <a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Predicates/AdditionalChapters/Introduction.html">Predicates Programming Guide</a> for more information about building predicates and use our <a href="https://academy.realm.io/posts/nspredicate-cheatsheet/">NSPredicate Cheatsheet</a>. Realm supports many common predicates:</p> <ul> <li>The comparison operands can be property names or constants. At least one of the operands must be a property name.</li> <li>The comparison operators <strong>==</strong>, <strong>&lt;=</strong>, <strong>&lt;</strong>, <strong>&gt;=</strong>, <strong>&gt;</strong>, <strong>!=</strong>, and <strong>BETWEEN</strong> are supported for <code>Int</code>, <code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code>, <code>Float</code>, <code>Double</code> and <code>Date</code> property types, e.g. <code>age == 45</code></li> <li>Identity comparisons <strong>==</strong>, <strong>!=</strong>, e.g. <code>Results&lt;Employee&gt;().filter("company == %@", company)</code>.</li> <li>The comparison operators <strong>==</strong> and <strong>!=</strong> are supported for boolean properties.</li> <li>For <code>String</code> and <code>Data</code> properties, the <strong>==</strong>, <strong>!=</strong>, <strong>BEGINSWITH</strong>, <strong>CONTAINS</strong>, and <strong>ENDSWITH</strong> operators are supported, e.g. <code>name CONTAINS 'Ja'</code></li> <li>For <code>String</code> properties, the <strong>LIKE</strong> operator may be used to compare the left hand property with the right hand expression: <code>?</code> and <code>*</code> are allowed as wildcard characters, where <code>?</code> matches 1 character and <code>*</code> matches 0 or more characters. Example: <code>value LIKE '?bc*'</code> matching strings like “abcde” and “cbc”.</li> <li>Case-insensitive comparisons for strings, such as <code>name CONTAINS[c] 'Ja'</code>. Note that only characters “A-Z” and “a-z” will be ignored for case. The <code>[c] modifier can be combined with the </code>[d]` modifier.</li> <li>Diacritic-insensitive comparisons for strings, such as <code>name BEGINSWITH[d] 'e'</code> matching <strong>étoile</strong>. This modifier can be combined with the <code>[c]</code> modifier. (This modifier can only be applied to a subset of strings Realm supports: see <a href="https://realm.io/docs/swift/latest/#limitations-general">limitations</a> for details.)</li> <li>Realm supports the following compound operators: <strong>“AND”</strong>, <strong>“OR”</strong>, and <strong>“NOT”</strong>, e.g. <code>name BEGINSWITH 'J' AND age &gt;= 32</code>.</li> <li>The containment operand <strong>IN</strong>, e.g. <code>name IN {'Lisa', 'Spike', 'Hachi'}</code></li> <li>Nil comparisons <strong>==</strong>, <strong>!=</strong>, e.g. <code>Results&lt;Company&gt;().filter("ceo == nil")</code>. Note that Realm treats <code>nil</code> as a special value rather than the absence of a value; unlike with SQL, <code>nil</code> equals itself.</li> <li><strong>ANY</strong> comparisons, e.g. <code>ANY student.age &lt; 21</code>.</li> <li>The aggregate expressions <strong>@count</strong>, <strong>@min</strong>, <strong>@max</strong>, <strong>@sum</strong> and <strong>@avg</strong> are supported on <code>List</code> and <code>Results</code> properties, e.g. <code>realm.objects(Company.self).filter("employees.@count &gt; 5")</code> to find all companies with more than five employees.</li> <li>Subqueries are supported with the following limitations: <ul> <li><strong>@count</strong> is the only operator that may be applied to the <strong>SUBQUERY</strong> expression.</li> <li>The <code>SUBQUERY(…).@count</code> expression must be compared with a constant.</li> <li>Correlated subqueries are not yet supported.</li> </ul> </li> </ul> <p>See <a href="https://realm.io/docs/swift/latest/api/Classes/Results.html#/s:FC10RealmSwift7Results6filterU__FGS0_Q__FtSSGSaPSs11CVarArgType___GS0_Q__"><code>Results().filter(_:...)</code></a>.</p> <h3 id="sorting">Sorting</h3> <p><code>Results</code> allows you to specify a sort criteria and order based on a key path, a property, or on one or more sort descriptors. For example, the following calls sorts the dogs returned from the example above alphabetically by name:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Sort tan dogs with names starting with "B" by name</span>
<span class="k">let</span> <span class="nv">sortedDogs</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"color = 'tan' AND name BEGINSWITH 'B'"</span><span class="p">)</span><span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">byKeyPath</span><span class="p">:</span> <span class="s">"name"</span><span class="p">)</span></code></pre> <p>The key path may also be the property of a <a href="https://realm.io/docs/swift/latest/#many-to-one">to-one relationship</a>:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Person</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">dog</span><span class="p">:</span> <span class="kt">Dog</span><span class="p">?</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="kt">Dog</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">age</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">dogOwners</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Person</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">ownersByDogAge</span> <span class="o">=</span> <span class="n">dogOwners</span><span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">byKeyPath</span><span class="p">:</span> <span class="s">"dog.age"</span><span class="p">)</span></code></pre> <p>Note that <code>sorted(byKeyPath:)</code> and <code>sorted(byProperty:)</code> do not support multiple properties as sort criteria, and cannot be chained (only the last call to <code>sorted</code> will be used). To sort by multiple properties, use the <code>sorted(by:)</code> method with multiple <code>SortDescriptor</code> objects.</p> <p>For more, see:</p> <ul> <li><a href="https://realm.io/docs/swift/latest/api/Classes/Results.html#/s:FC10RealmSwift7Results6sortedu__Rdq_CS_6Objectqd__Ss12SequenceTypezqqqd__S2_9GeneratorSs13GeneratorType7ElementVS_14SortDescriptor_FGS0_q__Fqd__GS0_q__"><code>Results().sorted(_:)</code></a></li> <li><a href="https://realm.io/docs/swift/latest/api/Classes/Results.html#/s:FC10RealmSwift7Results6sortedFT9byKeyPathSS9ascendingSb_GS0_x_"><code>Results().sorted(byKeyPath:ascending:)</code></a></li> </ul> <div class="alert alert-warning"> <p>Note that the order of <code>Results</code> is only guaranteed to stay consistent when the query is sorted. For performance reasons, insertion order is not guaranteed to be preserved. If you need to maintain order of insertion, some solutions are proposed <a href="https://realm.io/docs/swift/latest/#realm-doesnt-have-auto-incrementing-properties">here</a>.</p> </div> <h3 id="chaining-queries">Chaining queries</h3> <p>One unique property of Realm’s query engine is the ability to chain queries with very little transactional overhead when compared to traditional databases that require a separate trip to the database server for each successive query.</p> <p>If you wanted a result set for just tan colored dogs, and tan colored dogs whose names also start with ‘B’, you might chain two queries like this:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">tanDogs</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"color = 'tan'"</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">tanDogsWithBNames</span> <span class="o">=</span> <span class="n">tanDogs</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"name BEGINSWITH 'B'"</span><span class="p">)</span></code></pre> <h3 id="auto-updating-results">Auto-updating results</h3> <p><code>Results</code> instances are live, auto-updating views into the underlying data, which means results never have to be re-fetched. They always reflect the current state of the Realm on the current thread, including during write transactions on the current thread. The one exception to this is when using <code>for...in</code> enumeration, which will always enumerate over the objects which matched the query when the enumeration is begun, even if some of them are deleted or modified to be excluded by the filter during the enumeration.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">puppies</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"age &lt; 2"</span><span class="p">)</span>
<span class="n">puppies</span><span class="o">.</span><span class="n">count</span> <span class="c1">// =&gt; 0</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="p">[</span><span class="s">"name"</span><span class="p">:</span> <span class="s">"Fido"</span><span class="p">,</span> <span class="s">"age"</span><span class="p">:</span> <span class="mi">1</span><span class="p">])</span>
<span class="p">}</span>
<span class="n">puppies</span><span class="o">.</span><span class="n">count</span> <span class="c1">// =&gt; 1</span></code></pre> <p>This applies to all <code>Results</code>: all objects, filtered and chained.</p> <p>This property of <code>Results</code> not only keeps Realm fast and efficient, it allows your code to be simpler and more reactive. For example, if your view controller relies on the results of a query, you can store the <code>Results</code> in a property and access it without having to make sure to refresh its data prior to each access.</p> <p>You can subscribe to <a href="https://realm.io/docs/swift/latest/#notifications">Realm notifications</a> to know when Realm data is updated, indicating when your app’s UI should be refreshed for example, without having to re-fetch your <code>Results</code>.</p> <p>Since results are auto-updating, it’s important to not rely on indices and counts staying constant. The only time a <code>Results</code> is frozen is when fast-enumerating over it, which makes it possible to mutate the objects matching a query while enumerating over it:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">person</span> <span class="k">in</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Person</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"age == 10"</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">person</span><span class="o">.</span><span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <p>Alternatively, use <a href="https://realm.io/docs/swift/latest/#key-value-coding">key-value coding</a> to perform operations on <code>Results</code>.</p> <h3 id="limiting-results">Limiting results</h3> <p>Most other database technologies provide the ability to ‘paginate’ results from queries (such as the ‘LIMIT’ keyword in SQLite). This is often done out of necessity to avoid reading too much from disk, or pulling too many results into memory at once.</p> <p>Since queries in Realm are lazy, performing this sort of paginating behavior isn’t necessary at all, as Realm will only load objects from the results of the query once they are explicitly accessed.</p> <p>If for UI-related or other implementation reasons you require a specific subset of objects from a query, it’s as simple as taking the <code>Results</code> object, and reading out only the objects you need.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Loop through the first 5 Dog objects</span>
<span class="c1">// restricting the number of objects read from disk</span>
<span class="k">let</span> <span class="nv">dogs</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="mi">5</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">dog</span> <span class="o">=</span> <span class="n">dogs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="c1">// ...</span>
<span class="p">}</span></code></pre> <h2 id="migrations">Migrations<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#migrations" aria-label="Anchor link for: migrations" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <p>When working with any database, it is likely your data model will change over time. Since data models in Realm are defined as standard Swift classes, making model changes is as easy as changing any other Swift class.</p> <p>Suppose we have the following <code>Person</code> model:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Person</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">firstName</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">lastName</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">age</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">}</span></code></pre> <p>We want to update the data model to require a <code>fullName</code> property, rather than separate first and last names. To do this, we simply change the object interface to the following:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Person</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">fullName</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">age</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">}</span></code></pre> <p>At this point if you had saved any data with the previous model version, there will be a mismatch between what Realm sees defined in code and the data Realm sees on disk. When this occurs, an exception will be thrown when you try to open the existing file unless you run a migration.</p> <p>Note that <a href="https://realm.io/docs/swift/latest/#default-property-values">default property values</a> aren’t applied to new objects or new properties on existing objects during migrations. We consider this to be a bug, and are tracking it as <a href="https://github.com/realm/realm-cocoa/issues/1793">#1793</a>.</p> <h3 id="local-migrations">Local migrations</h3> <p>Local migrations are defined by setting <a href="https://realm.io/docs/swift/latest/api/Extensions/Realm/Configuration.html#/s:vVC10RealmSwift5Realm13Configuration13schemaVersionVSs6UInt64"><code>Realm.Configuration.schemaVersion</code></a> and <a href="https://realm.io/docs/swift/latest/api/Extensions/Realm/Configuration.html#/s:vVC10RealmSwift5Realm13Configuration14migrationBlockGSqFT9migrationCS_9Migration16oldSchemaVersionVSs6UInt64_T__"><code>Realm.Configuration.migrationBlock</code></a>. Your migration block provides all the logic for converting data models from previous schemas to the new schema. When creating a <code>Realm</code> with this configuration, the migration block will be applied to update the <code>Realm</code> to the given schema version if a migration is needed.</p> <p>Suppose we want to migrate the <code>Person</code> model declared earlier. The minimal necessary migration block would be the following:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Inside your application(application:didFinishLaunchingWithOptions:)</span>

<span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">(</span>
    <span class="c1">// Set the new schema version. This must be greater than the previously used</span>
    <span class="c1">// version (if you've never set a schema version before, the version is 0).</span>
    <span class="nv">schemaVersion</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>

    <span class="c1">// Set the block which will be called automatically when opening a Realm with</span>
    <span class="c1">// a schema version lower than the one set above</span>
    <span class="nv">migrationBlock</span><span class="p">:</span> <span class="p">{</span> <span class="n">migration</span><span class="p">,</span> <span class="n">oldSchemaVersion</span> <span class="k">in</span>
        <span class="c1">// We haven’t migrated anything yet, so oldSchemaVersion == 0</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">oldSchemaVersion</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// Nothing to do!</span>
            <span class="c1">// Realm will automatically detect new properties and removed properties</span>
            <span class="c1">// And will update the schema on disk automatically</span>
        <span class="p">}</span>
    <span class="p">})</span>

<span class="c1">// Tell Realm to use this new configuration object for the default Realm</span>
<span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="o">.</span><span class="n">defaultConfiguration</span> <span class="o">=</span> <span class="n">config</span>

<span class="c1">// Now that we've told Realm how to handle the schema change, opening the file</span>
<span class="c1">// will automatically perform the migration</span>
<span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span></code></pre> <p>At the very minimum we need to update the version with an empty block to indicate that the schema has been upgraded (automatically) by Realm.</p> <h4 id="updating-values">Updating values</h4> <p>While this is the minimum acceptable migration, we probably want to use this block to populate any new properties (in this case <code>fullName</code>) with something meaningful. Within the migration block we can call <a href="https://realm.io/docs/swift/latest/api/Classes/Migration.html#/s:FC10RealmSwift9Migration9enumerateFS0_FTSSFT9oldObjectGSqCS_13DynamicObject_9newObjectGSqS1___T__T_"><code>Migration().enumerateObjects(ofType: _:_:)</code></a> to enumerate each <code>Object</code> of a certain type, and apply any necessary migration logic. Notice how for each enumeration the existing <code>Object</code> instance is accessed via an <code>oldObject</code> variable and the updated instance is accessed via <code>newObject</code>:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Inside your application(application:didFinishLaunchingWithOptions:)</span>

<span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="o">.</span><span class="n">defaultConfiguration</span> <span class="o">=</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">(</span>
    <span class="nv">schemaVersion</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nv">migrationBlock</span><span class="p">:</span> <span class="p">{</span> <span class="n">migration</span><span class="p">,</span> <span class="n">oldSchemaVersion</span> <span class="k">in</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">oldSchemaVersion</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// The enumerateObjects(ofType:_:) method iterates</span>
            <span class="c1">// over every Person object stored in the Realm file</span>
            <span class="n">migration</span><span class="o">.</span><span class="nf">enumerateObjects</span><span class="p">(</span><span class="nv">ofType</span><span class="p">:</span> <span class="kt">Person</span><span class="o">.</span><span class="nf">className</span><span class="p">())</span> <span class="p">{</span> <span class="n">oldObject</span><span class="p">,</span> <span class="n">newObject</span> <span class="k">in</span>
                <span class="c1">// combine name fields into a single field</span>
                <span class="k">let</span> <span class="nv">firstName</span> <span class="o">=</span> <span class="n">oldObject</span><span class="o">!</span><span class="p">[</span><span class="s">"firstName"</span><span class="p">]</span> <span class="k">as!</span> <span class="kt">String</span>
                <span class="k">let</span> <span class="nv">lastName</span> <span class="o">=</span> <span class="n">oldObject</span><span class="o">!</span><span class="p">[</span><span class="s">"lastName"</span><span class="p">]</span> <span class="k">as!</span> <span class="kt">String</span>
                <span class="n">newObject</span><span class="o">!</span><span class="p">[</span><span class="s">"fullName"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">firstName</span><span class="se">)</span><span class="s"> </span><span class="se">\(</span><span class="n">lastName</span><span class="se">)</span><span class="s">"</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">})</span></code></pre> <p>Once the migration is successfully completed, the Realm and all of its objects can be accessed as usual by your app.</p> <h4 id="renaming-properties">Renaming properties</h4> <p>Renaming the property on a class as part of a migration is more efficient than copying values and preserves relationships rather than duplicating them.</p> <p>To rename a property during a migration, make sure that your new models have a property with the new name and don’t have a property with the old name.</p> <p>If the new property has different nullability or indexing settings, those will be applied during the rename operation.</p> <p>Here’s how you could rename <code>Person</code>’s <code>yearsSinceBirth</code> property to <code>age</code>:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Inside your application(application:didFinishLaunchingWithOptions:)</span>

<span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="o">.</span><span class="n">defaultConfiguration</span> <span class="o">=</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">(</span>
    <span class="nv">schemaVersion</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="nv">migrationBlock</span><span class="p">:</span> <span class="p">{</span> <span class="n">migration</span><span class="p">,</span> <span class="n">oldSchemaVersion</span> <span class="k">in</span>
        <span class="c1">// We haven’t migrated anything yet, so oldSchemaVersion == 0</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">oldSchemaVersion</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// The renaming operation should be done outside of calls to `enumerateObjects(ofType: _:)`.</span>
            <span class="n">migration</span><span class="o">.</span><span class="nf">renameProperty</span><span class="p">(</span><span class="nv">onType</span><span class="p">:</span> <span class="kt">Person</span><span class="o">.</span><span class="nf">className</span><span class="p">(),</span> <span class="nv">from</span><span class="p">:</span> <span class="s">"yearsSinceBirth"</span><span class="p">,</span> <span class="nv">to</span><span class="p">:</span> <span class="s">"age"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">})</span></code></pre> <h4 id="linear-migrations">Linear migrations</h4> <p>Suppose we have two users for our app: JP and Tim. JP updates the app very often, but Tim happens to skip a few versions. It’s likely that JP has seen every new version of our app, and every schema upgrade in order: he downloaded a version of the app that took him from v0 to v1, and later another update that took him from v1 to v2. In contrast, it’s possible that Tim might download an update of the app that will need to take him from v0 to v2 immediately. Structuring your migration blocks with <strong><em>non-nested</em></strong> <code>if (oldSchemaVersion &lt; X)</code> calls ensures that they will see all necessary upgrades, no matter which schema version they start from.</p> <p>Another scenario may arise in the case of users who skipped versions of your app. If you delete a property <code>email</code> at version 2 and re-introduce it at version 3, and a user jumps from version 1 to version 3, Realm will not be able to automatically detect the deletion of the <code>email</code> property, as there will be no mismatch between the schema on disk and the schema in the code for that property. This will lead to Tim’s Person object having a v3 address property that has the contents of the v1 address property. This may not be a problem, unless you changed the internal storage representation of that property between v1 and v3 (say, went from an ISO address representation to a custom one). To avoid this, we recommend you nil out the <code>email</code> property on the <code>if (oldSchemaVersion &lt; 3)</code> statement, guaranteeing that all Realms upgraded to version 3 will have a correct dataset.</p> <h2 id="notifications">Notifications<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#notifications" aria-label="Anchor link for: notifications" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <p>It is possible to register a listener to receive notifications for changes on a Realm or its entities. <a href="https://realm.io/docs/swift/latest/#realm-notifications">Realm notifications</a> are sent when the Realm as a whole is changed; <a href="https://realm.io/docs/swift/latest/#collection-notifications">collection notifications</a> are sent when individual objects are changed, added, or removed.</p> <p>Notifications are delivered as long as a reference is held to the returned notification token. You should keep a strong reference to this token on the class registering for updates, as notifications are automatically unregistered when the notification token is deallocated.</p> <p>Notifications are always delivered on the thread that they were originally registered on. That thread must have a currently running <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html">run loop</a>. If you wish to register notifications on a thread other than the main thread, you are responsible for configuring and starting a run loop on that thread if one doesn’t already exist.</p> <p>Notification handlers are asynchronously called after each relevant write transaction is committed, no matter which thread or process the write transaction took place on.</p> <p>If a Realm is advanced to the latest version as part of starting a write transaction, notification handlers might be called <em>synchronously</em>. This will happen if, when the Realm was advanced to the latest version, Realm entities being observed were modified or deleted in a way that would trigger notifications. Such notifications will run within the context of the current write transaction, meaning attempting to begin a write transaction within the notification handler will cause Realm to throw an exception. If your app is architected in such a way that this scenario could occur, you can use <code>Realm.isInWriteTransaction</code> to determine whether you are already inside a write transaction or not.</p> <p>Since notifications are delivered using a run loop, the delivery of notifications might be delayed by other activity on the run loop. When notifications can’t be delivered immediately, changes from multiple write transactions may be coalesced into a single notification.</p> <h3 id="realm-notifications">Realm notifications</h3> <p>A notification handler can be registered on an entire Realm. Every time a write transaction involving that Realm is committed, no matter which thread or process the write transaction took place on, the notification handler will be fired:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Observe Realm Notifications</span>
<span class="k">let</span> <span class="nv">token</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="n">observe</span> <span class="p">{</span> <span class="n">notification</span><span class="p">,</span> <span class="n">realm</span> <span class="k">in</span>
    <span class="n">viewController</span><span class="o">.</span><span class="nf">updateUI</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// later</span>
<span class="n">token</span><span class="o">.</span><span class="nf">invalidate</span><span class="p">()</span></code></pre> <p>Sometimes you want to write to Realm without triggering the notification handler. For example, you may update the UI immediately in response to a user action to make your app appear responsive. When the notification handler later applies the update again to the already-updated UI, it could put the UI out of sync with the data source.</p> <p>To suppress specific notifications for specific writes, pass the tokens of the notifications you want to ignore to the <code>Realm.write(withoutNotifying:)</code> method:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>

<span class="c1">// Observe Realm Notifications</span>
<span class="k">let</span> <span class="nv">token</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="n">observe</span> <span class="p">{</span> <span class="n">notification</span><span class="p">,</span> <span class="n">realm</span> <span class="k">in</span>
    <span class="c1">// ... handle update</span>
<span class="p">}</span>

<span class="c1">// Later, pass the token in an array to the realm.write(withoutNotifying:)</span>
<span class="c1">// method to write without send a notification to that observer.</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="nf">write</span><span class="p">(</span><span class="nv">withoutNotifying</span><span class="p">:</span> <span class="p">[</span><span class="n">token</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ... write to realm</span>
<span class="p">}</span>

<span class="c1">// Finally</span>
<span class="n">token</span><span class="o">.</span><span class="nf">invalidate</span><span class="p">()</span></code></pre> <h3 id="collection-notifications">Collection notifications</h3> <p>Collection notifications don’t receive the whole Realm, but instead receive fine-grained descriptions of changes. These consist of the indices of objects that have been added, removed, or modified since the last notification. Collection notifications are delivered asynchronously, first with the initial results and then again after each write transaction which changes any of the objects in the collection (or adds new ones).</p> <p>These changes can be accessed via the <code>RealmCollectionChange</code> parameter that is passed to the notification block. This object holds information about the indices affected by <code>deletions</code>, <code>insertions</code> and <code>modifications</code>.</p> <p>The first two, <em>deletions</em> and <em>insertions,</em> record the indices whenever objects start and stop being part of the collection. This takes into account when you add objects to the Realm or delete them from the Realm. For <code>Results</code> this also applies when you filter for specific values and the object was changed so that it is now matching the query or not matching anymore. For collections based either on <code>List</code> or <code>LinkingObjects</code>, including derived <code>Results</code>, this applies in addition when objects are added or removed from the relationship.</p> <p>You’re notified about <em>modifications</em> whenever a property of an object in the collection has changed. This also happens for changes on <a href="https://realm.io/docs/swift/latest/#many-to-one">to-one</a> and <a href="https://realm.io/docs/swift/latest/#many-to-many">to-many relationships</a>, although notifications won’t take <a href="https://realm.io/docs/swift/latest/#inverse-relationships">inverse relationships</a> into account.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">Dog</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">age</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Person</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">let</span> <span class="nv">dogs</span> <span class="o">=</span> <span class="kt">List</span><span class="o">&lt;</span><span class="kt">Dog</span><span class="o">&gt;</span><span class="p">()</span>
<span class="p">}</span></code></pre> <p>Let’s assume you’re observing a list of dog owners as given by the model code above. You will be notified about modifications for a matched <code>Person</code> object when:</p> <ul> <li>You modify the <code>Person</code>’s <code>name</code> property.</li> <li>You add or remove a <code>Dog</code> to the <code>Person</code>’s <code>dogs</code> property.</li> <li>You modify the <code>age</code> property of a <code>Dog</code> belonging to that <code>Person</code>.</li> </ul> <p>This makes it possible to discretely control the animations and visual updates made to the content inside your UI, instead of arbitrarily reloading everything each time a notification occurs.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewController</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">notificationToken</span><span class="p">:</span> <span class="kt">NotificationToken</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">results</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Person</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"age &gt; 5"</span><span class="p">)</span>

        <span class="c1">// Observe Results Notifications</span>
        <span class="n">notificationToken</span> <span class="o">=</span> <span class="n">results</span><span class="o">.</span><span class="n">observe</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="p">(</span><span class="nv">changes</span><span class="p">:</span> <span class="kt">RealmCollectionChange</span><span class="p">)</span> <span class="k">in</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">tableView</span> <span class="o">=</span> <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">tableView</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
            <span class="k">switch</span> <span class="n">changes</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="nv">initial</span><span class="p">:</span>
                <span class="c1">// Results are now populated and can be accessed without blocking the UI</span>
                <span class="n">tableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
            <span class="k">case</span> <span class="o">.</span><span class="nf">update</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="k">let</span> <span class="nv">deletions</span><span class="p">,</span> <span class="k">let</span> <span class="nv">insertions</span><span class="p">,</span> <span class="k">let</span> <span class="nv">modifications</span><span class="p">):</span>
                <span class="c1">// Query results have changed, so apply them to the UITableView</span>
                <span class="n">tableView</span><span class="o">.</span><span class="nf">beginUpdates</span><span class="p">()</span>
                <span class="c1">// Always apply updates in the following order: deletions, insertions, then modifications.</span>
                <span class="c1">// Handling insertions before deletions may result in unexpected behavior.</span>
                <span class="n">tableView</span><span class="o">.</span><span class="nf">deleteRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">deletions</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="kt">IndexPath</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="nv">$0</span><span class="p">,</span> <span class="nv">section</span><span class="p">:</span> <span class="mi">0</span><span class="p">)}),</span>
                                     <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">automatic</span><span class="p">)</span>
                <span class="n">tableView</span><span class="o">.</span><span class="nf">insertRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">insertions</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="kt">IndexPath</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="nv">$0</span><span class="p">,</span> <span class="nv">section</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">}),</span>
                                     <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">automatic</span><span class="p">)</span>
                <span class="n">tableView</span><span class="o">.</span><span class="nf">reloadRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">modifications</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="kt">IndexPath</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="nv">$0</span><span class="p">,</span> <span class="nv">section</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">}),</span>
                                     <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">automatic</span><span class="p">)</span>
                <span class="n">tableView</span><span class="o">.</span><span class="nf">endUpdates</span><span class="p">()</span>
            <span class="k">case</span> <span class="o">.</span><span class="nf">error</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
                <span class="c1">// An error occurred while opening the Realm file on the background worker thread</span>
                <span class="nf">fatalError</span><span class="p">(</span><span class="s">"</span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">deinit</span> <span class="p">{</span>
        <span class="n">notificationToken</span><span class="p">?</span><span class="o">.</span><span class="nf">invalidate</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <h3 id="object-notifications">Object notifications</h3> <p>Realm supports object-level notifications. You may register a notification on a particular Realm object in order to be notified if the object is deleted, or whenever any of the managed properties on the object have their values modified. (This also applies to managed properties that have their values set to their existing value.)</p> <p>Only objects managed by a Realm may have notification handlers registered on them.</p> <p>For write transactions performed on different threads or in different processes, the block will be called when the Realm that manages the object is (auto)refreshed to a version including the changes, while for local write transactions it will be called at some point in the future after the write transaction is committed.</p> <p>The notification handler takes an <code>ObjectChange</code> enum value which indicates if the object was deleted, if property values on the object were changed, or if an error occurred. The notification block will be called with <code>ObjectChange.deleted</code> if the object was deleted. The block will never be called again.</p> <p>The block will be called with <code>ObjectChange.change</code> if the object’s properties were changed. The enum will contain an array of <code>PropertyChange</code> values. Each of these values contains the name of a property that was changed (as a string), the previous value, and the current value.</p> <p>The block will be called with <code>ObjectChange.error</code> containing an <code>NSError</code> if an error occurs. The block will never be called again.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">StepCounter</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">steps</span> <span class="o">=</span> <span class="mi">0</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">stepCounter</span> <span class="o">=</span> <span class="kt">StepCounter</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">stepCounter</span><span class="p">)</span>
<span class="p">}</span>
<span class="k">var</span> <span class="nv">token</span> <span class="p">:</span> <span class="kt">NotificationToken</span><span class="p">?</span>
<span class="n">token</span> <span class="o">=</span> <span class="n">stepCounter</span><span class="o">.</span><span class="n">observe</span> <span class="p">{</span> <span class="n">change</span> <span class="k">in</span>
    <span class="k">switch</span> <span class="n">change</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">change</span><span class="p">(</span><span class="k">let</span> <span class="nv">properties</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">property</span> <span class="k">in</span> <span class="n">properties</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">property</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">"steps"</span> <span class="o">&amp;&amp;</span> <span class="n">property</span><span class="o">.</span><span class="n">newValue</span> <span class="k">as!</span> <span class="kt">Int</span> <span class="o">&gt;</span> <span class="mi">1000</span> <span class="p">{</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"Congratulations, you've exceeded 1000 steps."</span><span class="p">)</span>
                <span class="n">token</span> <span class="o">=</span> <span class="kc">nil</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">error</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"An error occurred: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">deleted</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"The object was deleted."</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <h3 id="interface-driven-writes">Interface-driven writes</h3> <p>Notifications in Realm are always delivered asynchronously so they never block the main UI thread, causing your app to stutter. However, there are situations when changes <em>need</em> to be done synchronously, on the main thread, and reflected in the UI instantly. We refer to these transactions as interface-driven writes.</p> <p>For example, say a user adds an item to a table view. The UI should ideally animate this operation and start this process as soon as the user initiates the action.</p> <p>However, when the Realm change notification for this insertion is delivered a little later, it will indicate that an object was added to the collection backing the table view and we will once again attempt to insert a new row in the UI. This double insertion leads to inconsistent state between the UI and the backing data, which in turn will crash your app!</p> <p>When performing an interface-driven write, pass the notification tokens of the notification blocks that shouldn’t react to a change for a second time to <code>Realm.commitWrite(withoutNotifying:)</code>.</p> <p>This feature is especially useful when using fine-grained collection notifications with a <a href="https://docs.realm.io/platform/">synchronized Realm</a>, because many of the workarounds to previously account for interface-driven writes rely on controlling the full state of when the app can perform changes. With synchronized Realms, changes are applied whenever they’re synchronized, which can happen at any point in the app’s lifetime.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Add fine-grained notification block</span>
<span class="n">token</span> <span class="o">=</span> <span class="n">collection</span><span class="o">.</span><span class="n">observe</span> <span class="p">{</span> <span class="n">changes</span> <span class="k">in</span>
    <span class="k">switch</span> <span class="n">changes</span> <span class="p">{</span>
    <span class="k">case</span> <span class="o">.</span><span class="nv">initial</span><span class="p">:</span>
        <span class="n">tableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">update</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="k">let</span> <span class="nv">deletions</span><span class="p">,</span> <span class="k">let</span> <span class="nv">insertions</span><span class="p">,</span> <span class="k">let</span> <span class="nv">modifications</span><span class="p">):</span>
        <span class="c1">// Query results have changed, so apply them to the UITableView</span>
        <span class="n">tableView</span><span class="o">.</span><span class="nf">beginUpdates</span><span class="p">()</span>
        <span class="c1">// Always apply updates in the following order: deletions, insertions, then modifications.</span>
        <span class="c1">// Handling insertions before deletions may result in unexpected behavior.</span>
        <span class="n">tableView</span><span class="o">.</span><span class="nf">deleteRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">deletions</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="kt">IndexPath</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="nv">$0</span><span class="p">,</span> <span class="nv">section</span><span class="p">:</span> <span class="mi">0</span><span class="p">)}),</span>
                             <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">automatic</span><span class="p">)</span>
        <span class="n">tableView</span><span class="o">.</span><span class="nf">insertRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">insertions</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="kt">IndexPath</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="nv">$0</span><span class="p">,</span> <span class="nv">section</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">}),</span>
                             <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">automatic</span><span class="p">)</span>
        <span class="n">tableView</span><span class="o">.</span><span class="nf">reloadRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="n">modifications</span><span class="o">.</span><span class="nf">map</span><span class="p">({</span> <span class="kt">IndexPath</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="nv">$0</span><span class="p">,</span> <span class="nv">section</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">}),</span>
                             <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">automatic</span><span class="p">)</span>
        <span class="n">tableView</span><span class="o">.</span><span class="nf">endUpdates</span><span class="p">()</span>
    <span class="k">case</span> <span class="o">.</span><span class="nf">error</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
        <span class="c1">// handle error</span>
        <span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">insertItem</span><span class="p">()</span> <span class="k">throws</span> <span class="p">{</span>
    <span class="c1">// Perform an interface-driven write on the main thread, making sure </span>
    <span class="c1">// the change notification doesn't apply the change a second time</span>
    <span class="k">try</span> <span class="n">collection</span><span class="o">.</span><span class="n">realm</span><span class="o">!.</span><span class="nf">write</span><span class="p">(</span><span class="nv">withoutNotifying</span><span class="p">:</span> <span class="p">[</span><span class="n">token</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">collection</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="kt">Item</span><span class="p">(),</span> <span class="nv">at</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c1">// And mirror it instantly in the UI instead</span>
    <span class="n">tableView</span><span class="o">.</span><span class="nf">insertRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="p">[</span><span class="kt">IndexPath</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">section</span><span class="p">:</span> <span class="mi">0</span><span class="p">)],</span> <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">automatic</span><span class="p">)</span>
<span class="p">}</span></code></pre> <h3 id="key-value-observation">Key-value observation</h3> <p>Realm objects are <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html">key-value observing compliant</a> for most properties. Almost all managed (non-ignored) properties on <code>Object</code> subclasses are KVO-compliant, along with the <code>invalidated</code> property on <code>Object</code> and <code>List</code>. (<code>LinkingObjects</code> properties can’t be observed using KVO.)</p> <p>Observing properties of unmanaged instances of <code>Object</code> subclasses works just like with any other dynamic property, but note that you cannot add an object to a Realm (with <code>realm.add(obj)</code> or other similar methods) while it has any registered observers.</p> <p>Observing properties of managed objects (those previously added to a Realm) works a little differently. With managed objects, there are three times when the value of a property may change: when you directly assign to it; when you call <code>realm.refresh()</code> or the Realm is automatically refreshed after a write transaction is committed on a different thread; and when you call <code>realm.beginWrite()</code> after changes on a different thread which have not been picked up by a refresh on the current thread.</p> <p>In the latter two cases, all of the changes made in the write transaction(s) on another thread will be applied at once, and KVO notifications will all be sent at once. Any intermediate steps are discarded, so if in the write transaction you incremented a property from one to ten, on the main thread you’ll get a single notification of a change directly from one to ten. Because properties can change in value when not in a write transaction or even as part of beginning a write transaction, trying to modify managed Realm objects from within <code>observeValueForKeyPath(_:ofObject:change:context:)</code> is not recommended.</p> <p>Unlike <code>NSMutableArray</code> properties, observing changes made to <code>List</code> properties does not require using <code>mutableArrayValueForKey(_:)</code>, although that is supported for compatibility with code not written with Realm in mind. Instead, you can simply call the modification methods on <code>List</code> directly, and anyone observing the property it is stored in will be notified. List properties do not need to be marked as <code>dynamic</code> to be observable, unlike normal properties.</p> <p>In our example apps you can find a short example of using Realm with <a href="https://github.com/realm/realm-cocoa/tree/master/examples/ios/objc/RACTableView">ReactiveCocoa from Objective‑C</a>, and <a href="https://github.com/realm/realm-cocoa/tree/v2.3.0/examples/ios/swift-2.2/ReactKit">ReactKit from Swift</a>.</p> <h2 id="encryption">Encryption<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#encryption" aria-label="Anchor link for: encryption" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <div class="alert alert-info"> <p>Please take note of the Export Compliance section of our LICENSE, as it places restrictions against the usage of Realm if you are located in countries with an export restriction or embargo from the United States.</p> </div> <p>Realm supports encrypting the database file on disk with AES-256+SHA2 by supplying a 64-byte encryption key when creating a Realm.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Generate a random encryption key</span>
<span class="k">var</span> <span class="nv">key</span> <span class="o">=</span> <span class="kt">Data</span><span class="p">(</span><span class="nv">count</span><span class="p">:</span> <span class="mi">64</span><span class="p">)</span>
<span class="n">_</span> <span class="o">=</span> <span class="n">key</span><span class="o">.</span><span class="n">withUnsafeMutableBytes</span> <span class="p">{</span> <span class="n">bytes</span> <span class="k">in</span>
    <span class="kt">SecRandomCopyBytes</span><span class="p">(</span><span class="n">kSecRandomDefault</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="n">bytes</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Open the encrypted Realm file</span>
<span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">(</span><span class="nv">encryptionKey</span><span class="p">:</span> <span class="n">key</span><span class="p">)</span>
<span class="k">do</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try</span> <span class="kt">Realm</span><span class="p">(</span><span class="nv">configuration</span><span class="p">:</span> <span class="n">config</span><span class="p">)</span>
    <span class="c1">// Use the Realm as normal</span>
    <span class="k">let</span> <span class="nv">dogs</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="nf">filter</span><span class="p">(</span><span class="s">"name contains 'Fido'"</span><span class="p">)</span>
<span class="p">}</span> <span class="k">catch</span> <span class="k">let</span> <span class="nv">error</span> <span class="k">as</span> <span class="kt">NSError</span> <span class="p">{</span>
    <span class="c1">// If the encryption key is wrong, `error` will say that it's an invalid database</span>
    <span class="nf">fatalError</span><span class="p">(</span><span class="s">"Error opening realm: </span><span class="se">\(</span><span class="n">error</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span></code></pre> <p>This makes it so that all of the data stored on disk is transparently encrypted and decrypted with AES-256 as needed, and verified with a SHA-2 HMAC. The same encryption key must be supplied every time you obtain a Realm instance.</p> <p>See our <a href="https://github.com/realm/realm-cocoa/tree/master/examples/ios/swift/Encryption">encryption sample app</a> for an end-to-end app that generates an encryption key, stores it securely in the keychain, and uses it to encrypt a Realm.</p> <p>There is a small performance hit (typically less than 10% slower) when using encrypted Realms.</p> <h2 id="working-with-synced-realms">Working with synced Realms<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#working-with-synced-realms" aria-label="Anchor link for: working with synced realms" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <div class="alert alert-info"> <p>Are you looking to use Realm Mobile Platform to synchronize all of your Realm Databases? <a href="https://docs.realm.io/platform/">All sync related documentation has been moved to our platform documentation</a></p> </div> <h2 id="threading">Threading<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#threading" aria-label="Anchor link for: threading" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <div class="alert alert-info"> <p>Realm read transaction lifetimes are tied to the memory lifetime of <code>Realm</code> instances. Avoid “pinning” old Realm transactions by using auto-refreshing Realms and wrapping all use of Realm APIs from background threads in explicit autorelease pools.</p> <p>Refer to our <a href="https://realm.io/docs/swift/latest/#limitations-file-size">Current Limitations</a> for more details on this effect.</p> </div> <p>Within individual threads you can just treat everything as regular objects without worrying about concurrency or multithreading. There is no need for any locks or resource coordination to access them (even if they are simultaneously being modified on other threads) and it is only modifying operations that have to be wrapped in write transactions.</p> <p>Realm makes concurrent usage easy by ensuring that each thread always has a consistent view of the Realm. You can have any number of threads working on the same Realms in parallel, and since they all have their own snapshots, they will never cause each other to see inconsistent state.</p> <p>The only thing you have to be aware of is that you cannot have multiple threads sharing the same <em>instances</em> of Realm objects. If multiple threads need to access the same objects they will each need to get their own instances (otherwise changes happening on one thread could cause other threads to see incomplete or inconsistent data).</p> <h3 id="seeing-changes-from-other-threads">Seeing changes from other threads</h3> <p>On the main UI thread (or any thread with a runloop) objects will automatically update with changes from other threads between each iteration of the runloop. At any other time you will be working on the snapshot, so individual methods always see a consistent view and never have to worry about what happens on other threads.</p> <p>When you initially open a Realm on a thread, its state will be based off the most recent successful write commit, and it will remain on that version until refreshed. Realms are automatically refreshed at the start of every runloop iteration, unless Realm’s <code>autorefresh</code> property is set to <code>NO</code>. If a thread has no runloop (which is generally the case in a background thread), then <code>Realm.refresh()</code> must be called manually in order to advance the transaction to the most recent state.</p> <p>Realms are also refreshed when write transactions are committed (<code>Realm.commitWrite()</code>).</p> <p>Failing to refresh Realms on a regular basis could lead to some transaction versions becoming “pinned,” preventing Realm from reusing the disk space used by that version, leading to larger file sizes.</p> <h3 id="passing-instances-across-threads">Passing instances across threads</h3> <p>Unmanaged instances of <code>Object</code>s behave exactly as regular <code>NSObject</code> subclasses, and are safe to pass across threads.</p> <p>Instances of <code>Realm</code>, <code>Results</code>, or <code>List</code>, or managed instances of <code>Object</code> are <em>thread-confined</em>, meaning that they can only be used on the thread on which they were created, otherwise an exception is thrown*. This is one way Realm enforces transaction version isolation. Otherwise, it would be impossible to determine what should be done when an object is passed between threads at different transaction versions without a potentially extensive relationship graph.</p> <p>Realm exposes a mechanism to safely pass thread-confined instances in three steps:</p> <ol> <li>Initialize a <code>ThreadSafeReference</code> with the thread-confined object.</li> <li>Pass that <code>ThreadSafeReference</code> to a destination thread or queue.</li> <li>Resolve this reference on the target Realm by calling <code>Realm.resolve(_:)</code>. Use the returned object as you normally would.</li> </ol> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">person</span> <span class="o">=</span> <span class="kt">Person</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Jane"</span><span class="p">)</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">person</span><span class="p">)</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">personRef</span> <span class="o">=</span> <span class="kt">ThreadSafeReference</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">person</span><span class="p">)</span>
<span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="s">"background"</span><span class="p">)</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
    <span class="n">autoreleasepool</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">person</span> <span class="o">=</span> <span class="n">realm</span><span class="o">.</span><span class="nf">resolve</span><span class="p">(</span><span class="n">personRef</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="c1">// person was deleted</span>
        <span class="p">}</span>
        <span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
            <span class="n">person</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"Jane Doe"</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <p>A <code>ThreadSafeReference</code> object must be resolved at most once. Failing to resolve a <code>ThreadSafeReference</code> will result in the source version of the Realm being pinned until the reference is deallocated. For this reason, <code>ThreadSafeReference</code> should be short-lived.</p> <p>Some properties and methods on these types can be accessed from any thread:</p> <ul> <li><code>Realm</code>: all properties, class methods, and initializers.</li> <li><code>Object</code>: <code>isInvalidated</code>, <code>objectSchema</code>, <code>realm</code>, class methods, and initializers.</li> <li><code>Results</code>: <code>objectClassName</code> and <code>realm</code>.</li> <li><code>List</code>: <code>isInvalidated</code>, <code>objectClassName</code>, and <code>realm</code>.</li> </ul> <h3 id="using-a-realm-across-threads">Using a Realm across threads</h3> <p>To access the same Realm file from different threads, you must initialize a new Realm to get a different instance for every thread of your app. As long as you specify the same configuration, all Realm instances will map to the same file on disk.</p> <p><strong>Sharing Realm instances across threads is <em>not</em> supported. Realm instances accessing the same Realm file must also all use the same <code>Realm.Configuration</code></strong>.</p> <p>Realm can be very efficient when writing large amounts of data by batching together multiple mutations within a single transaction. Transactions can also be performed in the background using Grand Central Dispatch to avoid blocking the main thread. <code>Realm</code> objects are not thread safe and cannot be shared across threads, so you must get a Realm instance in each thread/dispatch queue in which you want to read or write. Here’s an example of inserting a million objects in a background queue:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kt">DispatchQueue</span><span class="p">(</span><span class="nv">label</span><span class="p">:</span> <span class="s">"background"</span><span class="p">)</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
    <span class="n">autoreleasepool</span> <span class="p">{</span>
        <span class="c1">// Get realm and table instances for this thread</span>
        <span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>

        <span class="c1">// Break up the writing blocks into smaller portions</span>
        <span class="c1">// by starting a new transaction</span>
        <span class="k">for</span> <span class="n">idx1</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="mi">1000</span> <span class="p">{</span>
            <span class="n">realm</span><span class="o">.</span><span class="nf">beginWrite</span><span class="p">()</span>

            <span class="c1">// Add row via dictionary. Property order is ignored.</span>
            <span class="k">for</span> <span class="n">idx2</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="mi">1000</span> <span class="p">{</span>
                <span class="n">realm</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="kt">Person</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="p">[</span>
                    <span class="s">"name"</span><span class="p">:</span> <span class="s">"</span><span class="se">\(</span><span class="n">idx1</span><span class="se">)</span><span class="s">"</span><span class="p">,</span>
                    <span class="s">"birthdate"</span><span class="p">:</span> <span class="kt">Date</span><span class="p">(</span><span class="nv">timeIntervalSince1970</span><span class="p">:</span> <span class="kt">TimeInterval</span><span class="p">(</span><span class="n">idx2</span><span class="p">))</span>
                <span class="p">])</span>
            <span class="p">}</span>

            <span class="c1">// Commit the write transaction</span>
            <span class="c1">// to make this data available to other threads</span>
            <span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="nf">commitWrite</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <h2 id="json">JSON<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#json" aria-label="Anchor link for: json" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <p>Realm does not have direct support for JSON, but it’s possible to add <code>Object</code>s from JSON using the output of <code>NSJSONSerialization.JSONObjectWithData(_:options:)</code>. The resulting KVC-compliant object can be used to add/update <code>Object</code>s using the <a href="https://realm.io/docs/swift/latest/#creating-objects">standard APIs</a> for creating and updating objects.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// A Realm Object that represents a city</span>
<span class="kd">class</span> <span class="kt">City</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">city</span> <span class="o">=</span> <span class="s">""</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">id</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="c1">// other properties left out ...</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="s">"{</span><span class="se">\"</span><span class="s">name</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">San Francisco</span><span class="se">\"</span><span class="s">, </span><span class="se">\"</span><span class="s">cityId</span><span class="se">\"</span><span class="s">: 123}"</span><span class="o">.</span><span class="nf">data</span><span class="p">(</span><span class="nv">using</span><span class="p">:</span> <span class="o">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span>
<span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>

<span class="c1">// Insert from Data containing JSON</span>
<span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">json</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">JSONSerialization</span><span class="o">.</span><span class="nf">jsonObject</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[])</span>
    <span class="n">realm</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="kt">City</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">json</span><span class="p">,</span> <span class="nv">update</span><span class="p">:</span> <span class="o">.</span><span class="n">modified</span><span class="p">)</span>
<span class="p">}</span></code></pre> <p>If there are nested objects or arrays in the JSON, these will be mapped automatically to to-one and to-many relationships. See the <a href="https://realm.io/docs/swift/latest/#nested-objects">nested objects</a> section for more detail.</p> <p>When inserting or updating JSON data in a Realm using this approach, be aware that Realm expects the JSON property names and types to exactly match the Object properties. For example:</p> <ul> <li><code>float</code> properties should be initialized with <code>float</code>-backed <code>NSNumbers</code>.</li> <li><code>Date</code> and <code>Data</code> properties cannot be automatically inferred from strings, but should be converted to the appropriate type before passing to <code>Realm().create(_:value:update:)</code>.</li> <li>If a JSON <code>null</code> (i.e. <code>NSNull</code>) is supplied for a required property, an exception will be thrown.</li> <li>If no property is supplied on insert for a required property, an exception will be thrown.</li> <li>Realm will ignore any properties in the JSON not defined by the <code>Object</code>.</li> </ul> <p>If your JSON schema doesn’t align exactly with your Realm objects, we recommend you use a third party model mapping framework in order to transform your JSON. Swift has a thriving set of actively maintained model mapping frameworks which work with Realm, some of which are listed in the <a href="https://github.com/realm/realm-cocoa/issues/694#issuecomment-144785299">realm-cocoa repository</a>.</p> <h2 id="testing-and-debugging">Testing and debugging<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#testing-and-debugging" aria-label="Anchor link for: testing and debugging" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <h3 id="configuring-the-default-realm">Configuring the default Realm</h3> <p>The easiest way to use and test Realm apps is to use the <a href="https://realm.io/docs/swift/latest/#default-realm">default Realm</a>. To avoid overriding application data or leaking state between tests, you can simply set the default Realm to a new file for each test.</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">import</span> <span class="kt">XCTest</span>

<span class="c1">// A base class which each of your Realm-using tests should inherit from rather</span>
<span class="c1">// than directly from XCTestCase</span>
<span class="kd">class</span> <span class="kt">TestCaseBase</span><span class="p">:</span> <span class="kt">XCTestCase</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">setUp</span><span class="p">()</span>

        <span class="c1">// Use an in-memory Realm identified by the name of the current test.</span>
        <span class="c1">// This ensures that each test can't accidentally access or modify the data</span>
        <span class="c1">// from other tests or the application itself, and because they're in-memory,</span>
        <span class="c1">// there's nothing that needs to be cleaned up.</span>
        <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="o">.</span><span class="n">defaultConfiguration</span><span class="o">.</span><span class="n">inMemoryIdentifier</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">name</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <h3 id="injecting-realm-instances">Injecting Realm instances</h3> <p>Another way to test Realm-related code is to have all the methods you’d like to test accept a <a href="https://realm.io/docs/swift/latest/api/Classes/Realm.html"><code>Realm</code></a> instance as an argument, so that you can pass in different Realms when running the app and when testing it. For example, suppose your app has a method to <code>GET</code> a user profile from a JSON API and you’d like to test that the local profile is properly created:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="c1">// Application Code</span>
<span class="kd">func</span> <span class="nf">updateUserFromServer</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"http://myapi.example.com/user"</span><span class="p">)</span>
    <span class="kt">URLSession</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">dataTask</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="o">!</span><span class="p">)</span> <span class="p">{</span> <span class="n">data</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="k">in</span>
        <span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span>
        <span class="nf">createOrUpdateUser</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="n">realm</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="n">data</span><span class="o">!</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">public</span> <span class="kd">func</span> <span class="nf">createOrUpdateUser</span><span class="p">(</span><span class="k">in</span> <span class="nv">realm</span><span class="p">:</span> <span class="kt">Realm</span><span class="p">,</span> <span class="n">with</span> <span class="nv">data</span><span class="p">:</span> <span class="kt">Data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">object</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">JSONSerialization</span><span class="o">.</span><span class="nf">jsonObject</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span> <span class="k">as!</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">String</span><span class="p">]</span>
    <span class="k">try!</span> <span class="n">realm</span><span class="o">.</span><span class="n">write</span> <span class="p">{</span>
        <span class="n">realm</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="kt">User</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">object</span><span class="p">,</span> <span class="nv">update</span><span class="p">:</span> <span class="o">.</span><span class="n">modified</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Test Code</span>

<span class="k">let</span> <span class="nv">testRealmURL</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">fileURLWithPath</span><span class="p">:</span> <span class="s">"..."</span><span class="p">)</span>

<span class="kd">func</span> <span class="nf">testThatUserIsUpdatedFromServer</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">(</span><span class="nv">fileURL</span><span class="p">:</span> <span class="n">testRealmURL</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">testRealm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">(</span><span class="nv">configuration</span><span class="p">:</span> <span class="n">config</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">jsonData</span> <span class="o">=</span> <span class="s">"{</span><span class="se">\"</span><span class="s">email</span><span class="se">\"</span><span class="s">: </span><span class="se">\"</span><span class="s">help@realm.io</span><span class="se">\"</span><span class="s">}"</span><span class="o">.</span><span class="nf">data</span><span class="p">(</span><span class="nv">using</span><span class="p">:</span> <span class="o">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span>
    <span class="nf">createOrUpdateUser</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="n">testRealm</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="n">jsonData</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">expectedUser</span> <span class="o">=</span> <span class="kt">User</span><span class="p">()</span>
    <span class="n">expectedUser</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="s">"help@realm.io"</span>
    <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">testRealm</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">User</span><span class="o">.</span><span class="k">self</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">!</span><span class="p">,</span> <span class="n">expectedUser</span><span class="p">,</span>
                   <span class="s">"User was not properly updated from server."</span><span class="p">)</span>
<span class="p">}</span></code></pre> <h3 id="debugging">Debugging</h3> <h4 id="realm-studio-1">Realm Studio</h4> <p><a href="https://realm.io/products/realm-studio/">Realm Studio</a> is our premiere developer tool, built so you can easily manage the Realm Database and Realm Platform. With <a href="https://realm.io/products/realm-studio/">Realm Studio</a>, you can open and edit local and synced Realms, and administer any Realm Object Server instance. It supports Mac, Windows and Linux.</p> <p><img class="img-responsive img-rounded" src="./realm docs_files/realm-studio.png" alt="Realm Studio"></p> <section class="block-studio col-xs-12 card" id="download-studio"> <div class="col-xs-12 col-sm-6 col-md-4 text-center download-icons"> <p><a href="https://studio-releases.realm.io/latest/download/mac-dmg" class="text-center"> <img src="./realm docs_files/apple.svg" class="col-xs-12 col-sm-6 col-sm-push-3 col-md-4 col-md-push-4"> <button class="btn btn-indigo col-xs-12">Download for Mac</button> </a></p> </div> <div class="col-xs-12 col-sm-6 col-md-4 text-center download-icons"> <p><a href="https://studio-releases.realm.io/latest/download/linux-appimage" class="text-center"> <img src="./realm docs_files/linux.svg" class="col-xs-12 col-sm-6 col-sm-push-3 col-md-4 col-md-push-4"> <button class="btn btn-indigo col-xs-12">Download for Linux</button> </a></p> </div> <div class="col-xs-12 col-sm-6 col-md-4 text-center download-icons"> <p><a href="https://studio-releases.realm.io/latest/download/win-setup" class="text-center"> <img src="./realm docs_files/windows.svg" class="col-xs-12 col-sm-6 col-sm-push-3 col-md-4 col-md-push-4"> <button class="btn btn-indigo col-xs-12">Download for Windows</button> </a></p> </div> </section> <p>Debugging apps using Realm’s Swift API must be done through the LLDB console.</p> <p>Note that although the LLDB script allows inspecting the contents of your Realm variables in Xcode’s UI, this doesn’t yet work for Swift. Instead, those variables will show incorrect data. You should instead use LLDB’s <code>po</code> command to inspect the contents of data stored in a Realm.</p> <p>Since you’re using Realm as a dynamic framework, you’ll need to make sure your unit test target can find Realm. You can do this by adding the parent path to <code>RealmSwift.framework</code> to your unit test’s “Framework Search Paths”.</p> <p>If your tests fail with an exception message <code>"Object type 'YourObject' is not managed by the Realm"</code>, it’s likely because you’ve linked the Realm framework directly to your test target, which should not be done. Unlinking Realm from your test target should address that.</p> <p>You should also make sure to only compile your model class files in your application or framework targets; never add them to your unit test targets. Otherwise, those classes will be duplicated when testing, which can lead to difficult to debug issues (see <a href="https://github.com/realm/realm-cocoa/issues/1350">this issue</a> for details).</p> <p>You’ll need to make sure all the code you need to test is exposed to your unit test targets (use the <code>public</code> access modifier or <code>@testable</code>). See this <a href="http://stackoverflow.com/a/32276984/373262">Stack Overflow</a> answer for details.</p> <h2 id="current-limitations">Current limitations<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#current-limitations" aria-label="Anchor link for: current limitations" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <p>Here’s a list of our most commonly hit limitations.</p> <p>Please refer to our <a href="https://github.com/realm/realm-cocoa/issues">GitHub issues</a> for a more comprehensive list of known issues.</p> <h3 id="limitations-general">General</h3> <p>Realm aims to strike a balance between flexibility and performance. In order to accomplish this goal, realistic limits are imposed on various aspects of storing information in a Realm. For example:</p> <ol> <li>Class names are limited to a maximum of 57 UTF8 characters.</li> <li>Property names are limited to a maximum of 63 UTF8 characters.</li> <li><code>Data</code> and <code>String</code> properties cannot hold data exceeding 16MB in size. To store larger amounts of data, either break it up into 16MB chunks or store it directly on the file system, storing paths to these files in the Realm. An exception will be thrown at runtime if your app attempts to store more than 16MB in a single property.</li> <li>Any single Realm file cannot be larger than the amount of memory your application would be allowed to map in iOS — this changes per device, and depends on how fragmented the memory space is at that point in time (there is a radar open about this issue: <a href="http://www.openradar.me/17119975">rdar://17119975</a>). If you need to store more data, you can map it over multiple Realm files.</li> <li>String sorting and case insensitive queries are only supported for character sets in ‘Latin Basic’, ‘Latin Supplement’, ‘Latin Extended A’, ‘Latin Extended B’ (UTF-8 range 0-591).</li> </ol> <p>To avoid size limitations and a performance impact, it is best not to store large blobs (such as image and video files) directly in Realm. Instead, save the file to a file store (such as S3) and keep only the location of the file and any relevant metadata in Realm.</p> <h3 id="limitations-threads">Threads</h3> <p>Although Realm files can be accessed by multiple threads concurrently, you cannot directly pass Realms, Realm objects, queries, and results between threads. If you need to pass Realm objects between threads, you can use the <code>ThreadSafeReference</code> API. <a href="https://realm.io/docs/swift/latest/#threading">Read more</a> about Realm’s threading.</p> <h3 id="limitations-models">Models</h3> <p><strong>Setters and getters:</strong> Since Realm overrides setters and getters to back properties directly by the underlying database, you cannot override them on your objects. A simple workaround is to create new, Realm-ignored properties, whose accessors <em>can</em> be overridden, and can call other setters/getters.</p> <p><span id="realm-doesnt-have-auto-incrementing-properties"></span> <strong>Auto-incrementing properties:</strong> Realm has no mechanism for thread-safe/process-safe auto-incrementing properties commonly used in other databases when generating primary keys. However, in most situations where a unique auto-generated value is desired, it isn’t necessary to have sequential, contiguous, integer IDs. A unique string primary key is typically sufficient. A common pattern is to set the default property value to <code>NSUUID().UUIDString</code> to generate unique string IDs.</p> <p>Another common motivation for auto-incrementing properties is to preserve order of insertion. In some situations, this can be accomplished by appending objects to a <code>List</code> or by using a <code>createdAt</code> property with a default value of <code>Date()</code>.</p> <p><strong>Properties from Objective-C:</strong> If you need to access your Realm Swift models from Objective‑C, <code>List</code> and <code>RealmOptional</code> properties will cause the auto-generated Objective‑C header (<code>-Swift.h</code>) to fail to compile because of the use of generics. You can work around this <a href="https://twitter.com/UINT_MIN/status/598247846639370240">known Swift bug</a> by annotating your <code>List</code> and <code>RealmOptional</code> properties as <code>@nonobjc</code>, which will hide them from the auto-generated Objective‑C header (<code>-Swift.h</code>).</p> <p><strong>Custom initializers for Object subclasses:</strong> When creating your model <code>Object</code> subclasses, you may sometimes want to add your own custom initialization methods for added convenience.</p> <p>Due to some present limitations with Swift introspection, these methods cannot be designated initializers for the class. Instead, they need to be marked as convenience initializers using the Swift keyword of the same name:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">MyModel</span><span class="p">:</span> <span class="kt">Object</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">dynamic</span> <span class="k">var</span> <span class="nv">myValue</span> <span class="o">=</span> <span class="s">""</span>

    <span class="n">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">myValue</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span> <span class="c1">//Please note this says 'self' and not 'super'</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myValue</span> <span class="o">=</span> <span class="n">myValue</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre> <h3 id="limitations-file-size">File size</h3> <div class="alert alert-info"> <p>Realm read transaction lifetimes are tied to the memory lifetime of <code>Realm</code> instances. Avoid “pinning” old Realm transactions by using auto-refreshing Realms and wrapping all use of Realm APIs from background threads in explicit autorelease pools.</p> </div> <p>You should expect a Realm database to take less space on disk than an equivalent SQLite database. If your Realm file is much larger than you expect, it may be because you have a <code>Realm</code> that is referring to an older version of the data in the database.</p> <p>In order to give you a consistent view of your data, Realm only updates the active version accessed at the start of a run loop iteration. This means that if you read some data from the Realm and then block the thread on a long-running operation while writing to the Realm on other threads, the version is never updated and Realm has to hold on to intermediate versions of the data which you may not actually need, resulting in the file size growing with each write. The extra space will eventually be reused by future writes, or may be compacted—for example, by setting <a href="https://realm.io/docs/swift/latest/#compacting-realms"><code>shouldCompactOnLaunch</code></a> or calling <a href="https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5Realm15writeCopyToPathFS0_FTSS13encryptionKeyGSqCSo6NSData__GSqCSo7NSError_"><code>Realm().writeCopyToPath(_:encryptionKey:)</code></a>. To avoid this issue, you may call <a href="https://realm.io/docs/swift/latest/api/Classes/Realm.html#/s:FC10RealmSwift5Realm10invalidateFS0_FT_T_"><code>invalidate</code></a> to tell Realm that you no longer need any of the objects that you’ve read from the Realm so far, which frees us from tracking intermediate versions of those objects. The Realm will update to the latest version the next time it is accessed.</p> <p>You may also see this problem when accessing Realm using Grand Central Dispatch. This can happen when a Realm ends up in a dispatch queue’s autorelease pool as those pools may not be drained for some time after executing your code. The intermediate versions of data in the Realm file cannot be reused until the <code>Realm</code> object is deallocated. To avoid this issue, you should use an explicit autorelease pool when accessing a Realm from a dispatch queue.</p> <h3 id="limitations-swift-properties">Initializing Swift properties using Realm APIs</h3> <p>Your Swift app’s classes and structs might be defined with properties whose values are initialized using Realm APIs. For example:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="kd">class</span> <span class="kt">SomeSwiftType</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">persons</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">()</span><span class="o">.</span><span class="nf">objects</span><span class="p">(</span><span class="kt">Person</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="c1">// ...</span>
<span class="p">}</span></code></pre> <p>If you do define types with such properties, you should note that you may run into problems if such initialization code is called before you have completed setting up your Realm configurations. For example, if you set a migration block for the default Realm configuration in <code>applicationDidFinishLaunching()</code>, but you create an instance of <code>SomeSwiftType</code> before <code>applicationDidFinishLaunching()</code> has run and your Realm requires a migration, you’ll be accessing your Realm before it’s been correctly configured.</p> <p>In order to avoid such issues you may choose to:</p> <ol> <li>Defer instantiation of any type that eagerly initializes properties using Realm APIs until after your app has completed setting up its Realm configurations.</li> <li>Define your properties using Swift’s <code>lazy</code> keyword. This allows you to safely instantiate such types at any time during your application’s lifecycle, as long as you do not attempt to access your lazy properties until after your app has set up its Realm configurations.</li> <li>Only initialize your properties using Realm APIs that explicitly take in user-defined configurations. This way, you can be sure that the configuration values you are using have been set up properly before they are used to open Realms.</li> </ol> <h3 id="limitations-encrypted-realms">Encrypted Realms and multiple processes</h3> <p>Encrypted Realms cannot be accessed by multiple processes simultaneously. This includes iOS Extensions. To work around this, use unencrypted Realms, which can be shared across processes. You can make use of the Security and CommonCrypto system frameworks to encrypt and decrypt data stored in <code>NSData</code> properties on Realm objects.</p> <p>We’re tracking lifting this limitation in both the Realm Cocoa issue tracker (<a href="https://github.com/realm/realm-cocoa/issues/1693">#1693</a>) and the Realm Core issue tracker (<a href="https://github.com/realm/realm-core/issues/1845">#1845</a>).</p> <h2 id="recipes">Recipes<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#recipes" aria-label="Anchor link for: recipes" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <p>We’ve put together some recipes showing how to use Realm to accomplish a few specific tasks. We add more recipes regularly, so check back often. If there’s an example you’d like to see, please open an issue on <a href="https://github.com/realm/realm-cocoa/issues">GitHub</a>.</p> <ul> <li><a href="https://academy.realm.io/posts/tutorial-building-a-todo-app-with-realm/">Building a To-Do App with Realm</a></li> <li><a href="https://academy.realm.io/posts/tutorial-testing-realm-apps/">Testing Realm Apps</a></li> <li><a href="https://academy.realm.io/posts/tutorial-sharing-data-between-watchkit-and-your-app/">Sharing Data between WatchKit &amp; your App with Realm</a></li> <li><a href="https://academy.realm.io/posts/building-an-ios-clustered-map-view-in-swift/">Building an iOS Clustered Map View in Swift</a></li> <li><a href="https://academy.realm.io/posts/building-an-ios-search-controller-in-swift/">Building an iOS Search Controller in Swift</a></li> <li><a href="https://academy.realm.io/posts/building-a-grid-layout-with-uicollectionview-and-realm-swift/">Building a Grid Layout with UICollectionView and Realm Swift</a></li> <li><a href="https://academy.realm.io/posts/unidirectional-data-flow-in-swift/">Unidirectional Data Flow in Swift</a></li> </ul> <h2 id="faq">FAQ<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#faq" aria-label="Anchor link for: faq" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <h3 id="faq-view-realms">How can I find and view the content of my Realm file(s)?</h3> <p><a href="https://stackoverflow.com/questions/28465706/how-to-find-my-realm-file">This SO question</a> describes where to find your Realm file. You can then view the content with our <a href="https://realm.io/products/realm-studio">Realm Studio</a>.</p> <h3 id="faq-library-size">How big is the Realm base library?</h3> <p>Realm should only add around 5 to 8 MB to your app’s download size. The releases we distribute are significantly larger because they include support for the iOS, watchOS and tvOS simulators, some debug symbols, and bitcode, all of which are stripped by the App Store automatically when apps are downloaded.</p> <h3 id="faq-open-source">Is Realm open source?</h3> <p>Yes! Realm’s internal C++ storage engine and the language SDKs over it are entirely open source and licensed under Apache 2.0. Realm also optionally includes a closed-source synchronization component, but that is not required to use Realm as an embedded database.</p> <h3 id="faq-mixpanel">I see a network call to Mixpanel when I run my app</h3> <p>Realm collects anonymous analytics when your app is run with a debugger attached, or when it runs in a simulator. These analytics are completely anonymous and help us improve the product by flagging which versions of Realm, iOS, macOS, or which language you target and which versions we can deprecate support for. <strong>This call does not run when your app is in production, or running on your user’s devices,</strong> only from inside your simulator or when a debugger is attached. You can see exactly what we collect and how we collect it, as well as the rationale for doing so, in our <a href="https://github.com/realm/realm-cocoa/blob/master/Realm/RLMAnalytics.mm">source code</a>.</p> <h3 id="faq-swift-structs">Why doesn’t Realm support Swift structs as models?</h3> <p>There are a number of reasons why Realm doesn’t currently support structs as models.</p> <p>Most importantly, Realm is designed around “live” objects, a concept which is fundamentally incompatible with value type structs. There are a number of features provided by Realm which are incompatible with these semantics: liveness of data, reactiveness of APIs, low memory footprint of data, performance of operations, lazy and cheap access to partial data, lack of data serialization/deserialization, keeping potentially complex object graphs synchronized, etc.</p> <p>That being said, it is sometimes useful to detach objects from their backing Realm. Unfortunately, this is more often needed to work around temporary limitations in our library rather than as an ideal design decision (such as thread-confinement). This is why we’ve worked hard to ensure that standalone/detached Realm objects behave exactly like plain old NSObjects. We support making “in-memory copies” of Realm objects by exposing an initializer that creates a standalone object via KVC copying of a persisted object’s properties. For example:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">standaloneModelObject</span> <span class="o">=</span> <span class="kt">MyModel</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="n">persistedModelObject</span><span class="p">)</span></code></pre> <h2 id="troubleshooting">Troubleshooting<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#troubleshooting" aria-label="Anchor link for: troubleshooting" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <h3 id="crash-reporting">Crash reporting</h3> <p>We encourage you to use a crash reporter in your application. Many Realm operations could potentially fail at runtime (like any other disk I/O), so collecting crash reports from your application will help identify areas where either you (or us) can improve error handling and fix crashing bugs.</p> <p>Most commercial crash reporters have the option of collecting logs. We strongly encourage you to enable this feature. Realm logs metadata information (but no user data) when throwing exceptions and in irrecoverable situations, and these messages can help debug when things go wrong.</p> <h3 id="reporting-realm-issues">Reporting Realm issues</h3> <p>If you’ve found an issue with Realm, please either <a href="https://github.com/realm/realm-cocoa/issues/new">file an issue on GitHub</a> or email us at <a href="mailto:help@realm.io">help@realm.io</a> with as much information as possible for us to understand and reproduce your issue.</p> <p>The following information is very useful to us:</p> <ol> <li>Goals.</li> <li>Expected results.</li> <li>Actual results.</li> <li>Steps to reproduce.</li> <li>Code sample that highlights the issue <em>(full Xcode projects that we can compile ourselves are ideal)</em>.</li> <li>Version of Realm / Xcode / macOS.</li> <li>Version of involved dependency manager (CocoaPods / Carthage).</li> <li>Platform, OS version, and architecture on which the bug happens (e.g. 64-bit iOS 8.1).</li> <li>Crash logs and stack traces. See <a href="https://realm.io/docs/swift/latest/#crash-reporting">Crash Reporting</a> above for details.</li> </ol> <h3 id="dependency-managers">Dependency managers</h3> <p>If you’ve installed Realm via CocoaPods or Carthage and you’re experiencing build errors, then it’s likely that you’re either using an unsupported version of that dependency manager, Realm’s integration into the project didn’t succeed, or part of your build tools have stale caches. If that is the case, please try removing the folders the dependency manager created and installing again.</p> <p>You can also try <strong>deleting derived data</strong> and <strong>cleaning the build folder in Xcode</strong>; this can fix issues caused by updating build tool versions or making changes to your project setup such as adding a new target, sharing dependencies across targets, etc.</p> <p>To clean the build folder, hold down the ‘Option’ key while opening the ‘Product’ menu, then choose ‘Clean Build Folder…’. You can also type ‘Clean’ into the Xcode help search menu and select the ‘Clean Build Folder…’ menu item when it shows up in the search results.</p> <h4 id="cocoapods">CocoaPods</h4> <p>Realm can be installed via CocoaPods 1.6.0 or greater.</p> <p>If you have troubles with your CocoaPods integration, it might help to reset the integration state. To achieve that simply run the following commands in Terminal out of your project directory:</p> <pre class="highlight plaintext"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code>pod cache clean Realm
pod cache clean RealmSwift
pod deintegrate ||&nbsp;rm -rf Pods
pod install --verbose
rm -rf ~/Library/Developer/Xcode/DerivedData</code></pre> <h4 id="carthage">Carthage</h4> <p>Realm can be installed via Carthage 0.33.0 or later.</p> <p>To remove all Carthage-managed dependencies from your project, simply run the following commands in Terminal out of your project directory:</p> <pre class="highlight plaintext"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code>rm -rf Carthage
rm -rf ~/Library/Developer/Xcode/DerivedData
carthage update</code></pre> <h3 id="realm-core-binary-fails-to-download">Realm Core binary fails to download</h3> <p>When building Realm, part of the process includes downloading the core library as a static binary and integrating it into the <code>realm-cocoa</code> project. It’s been reported that in certain instances, the core binary fails to download with the following error:</p> <pre class="highlight plaintext"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code>Downloading core failed. Please try again once you have an Internet connection.</code></pre> <p>This error can occur due to any of the following reasons:</p> <ol> <li>Your IP address range is from a region that is on the list of <a href="https://en.wikipedia.org/wiki/United_States_embargoes">United States embargoes</a>. In order to comply with U.S. law, Realm has not been made available in that region. For more information, please see our <a href="https://github.com/realm/realm-cocoa#license">license</a>.</li> <li>You are located in mainland China, and due to the country-wide firewall are not able to properly access CloudFlare or Amazon AWS S3 services at the moment. Please see <a href="https://github.com/realm/realm-cocoa/issues/2713">this Realm-Cocoa Issue</a> for more information.</li> <li>Amazon AWS S3 could be experiencing service issues. Please check the <a href="http://status.aws.amazon.com/">AWS Service Health Dashboard</a> and try again later.</li> </ol> <h3 id="operating-with-low-memory-constraints">Operating with low memory constraints</h3> <p>If you’d like to use Realm in a context with little available memory, such as a watchOS app or App Extension, we recommend that you specify the classes to be managed by a Realm explicitly in order to avoid a costly call to <code>objc_copyClassList()</code>:</p> <pre class="highlight swift"><button class="btn" data-clipboard-snippet=""><img class="clippy" width="13" src="./realm docs_files/clippy.svg" alt="Copy to clipboard"></button><code><span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">Realm</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">(</span><span class="nv">objectTypes</span><span class="p">:</span> <span class="p">[</span><span class="kt">Dog</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="kt">Person</span><span class="o">.</span><span class="k">self</span><span class="p">])</span>
<span class="k">let</span> <span class="nv">realm</span> <span class="o">=</span> <span class="k">try!</span> <span class="kt">Realm</span><span class="p">(</span><span class="nv">configuration</span><span class="p">:</span> <span class="n">config</span><span class="p">)</span></code></pre> <h2 id="getting-help">Getting help<a class="anchorjs-link " href="https://realm.io/docs/swift/latest/#getting-help" aria-label="Anchor link for: getting help" data-anchorjs-icon="" style="opacity: 1; font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a><div class="feedback-buttons"><button class="thumbs-up" data-toggle="tooltip" data-placement="top" title="" data-original-title="This was helpful"><img src="./realm docs_files/thumbs-up.svg"></button><button class="thumbs-down" data-toggle="tooltip" data-placement="top" title="" data-original-title="This needs improvement"><img src="./realm docs_files/thumbs-down.svg"></button></div></h2> <ul> <li><strong>Need help with your code?</strong> <a href="http://stackoverflow.com/questions/ask?tags=realm">Ask on StackOverflow</a>. We actively monitor &amp; answer questions on SO!</li> <li><strong>Have a bug to report?</strong> <a href="https://github.com/realm/realm-cocoa/issues/new">Open an issue on our repo</a>. If possible, include the version of Realm, a full log, the Realm file, and a project that shows the issue.</li> <li><strong>Have a feature request?</strong> <a href="https://github.com/realm/realm-cocoa/issues/new">Open an issue on our repo</a>. Tell us what the feature should do, and why you want the feature.</li> </ul> <p>If you’re using a crash reporter (like Crashlytics or HockeyApp), make sure to enable log collection. Realm logs metadata information (but no user data) when throwing exceptions and in irrecoverable situations, and these messages can help debug when things go wrong.</p> <div id="toc"> <ul class="nav nav-pills nav-stacked" id="markdown-toc"> <li><a href="https://realm.io/docs/swift/latest/#prerequisites" id="markdown-toc-prerequisites">Prerequisites</a></li> <li><a href="https://realm.io/docs/swift/latest/#installation" id="markdown-toc-installation">Installation</a></li> <li><a href="https://realm.io/docs/swift/latest/#getting-started" id="markdown-toc-getting-started">Getting started</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#realm-studio" id="markdown-toc-realm-studio">Realm Studio</a></li> <li><a href="https://realm.io/docs/swift/latest/#examples" id="markdown-toc-examples">Examples</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#using-the-realm-framework" id="markdown-toc-using-the-realm-framework">Using the Realm framework</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#tvos" id="markdown-toc-tvos">tvOS</a></li> <li><a href="https://realm.io/docs/swift/latest/#using-realm-with-background-app-refresh" id="markdown-toc-using-realm-with-background-app-refresh">Using Realm with background app refresh</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#realms" id="markdown-toc-realms">Realms</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#opening-realms" id="markdown-toc-opening-realms">Opening Local Realms</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#configuring-a-realm" id="markdown-toc-configuring-a-realm">Configuring a Local Realm</a></li> <li><a href="https://realm.io/docs/swift/latest/#default-realm" id="markdown-toc-default-realm">The default Realm</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#opening-a-synchronized-realm" id="markdown-toc-opening-a-synchronized-realm">Opening a synchronized Realm</a></li> <li><a href="https://realm.io/docs/swift/latest/#in-memory-realms" id="markdown-toc-in-memory-realms">In-memory Realms</a></li> <li><a href="https://realm.io/docs/swift/latest/#error-handling" id="markdown-toc-error-handling">Error handling</a></li> <li><a href="https://realm.io/docs/swift/latest/#auxiliary-realm-files" id="markdown-toc-auxiliary-realm-files">Auxiliary Realm files</a></li> <li><a href="https://realm.io/docs/swift/latest/#bundling-a-realm" id="markdown-toc-bundling-a-realm">Bundling a Realm</a></li> <li><a href="https://realm.io/docs/swift/latest/#class-subsets" id="markdown-toc-class-subsets">Class subsets</a></li> <li><a href="https://realm.io/docs/swift/latest/#compacting-realms" id="markdown-toc-compacting-realms">Compacting Realms</a></li> <li><a href="https://realm.io/docs/swift/latest/#deleting-realm-files" id="markdown-toc-deleting-realm-files">Deleting Realm files</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#models" id="markdown-toc-models">Models</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#supported-types" id="markdown-toc-supported-types">Supported property types</a></li> <li><a href="https://realm.io/docs/swift/latest/#required-properties" id="markdown-toc-required-properties">Required properties</a></li> <li><a href="https://realm.io/docs/swift/latest/#primary-keys" id="markdown-toc-primary-keys">Primary keys</a></li> <li><a href="https://realm.io/docs/swift/latest/#indexing-properties" id="markdown-toc-indexing-properties">Indexing properties</a></li> <li><a href="https://realm.io/docs/swift/latest/#ignoring-properties" id="markdown-toc-ignoring-properties">Ignoring properties</a></li> <li><a href="https://realm.io/docs/swift/latest/#property-attributes" id="markdown-toc-property-attributes">Property attributes</a></li> <li><a href="https://realm.io/docs/swift/latest/#property-cheatsheet" id="markdown-toc-property-cheatsheet">Property cheatsheet</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#working-with-realm-objects" id="markdown-toc-working-with-realm-objects">Working with Realm objects</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#auto-updating-objects" id="markdown-toc-auto-updating-objects">Auto-updating objects</a></li> <li><a href="https://realm.io/docs/swift/latest/#model-inheritance" id="markdown-toc-model-inheritance">Model inheritance</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#collections" id="markdown-toc-collections">Collections</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#copying-objects-between-realms" id="markdown-toc-copying-objects-between-realms">Copying objects between Realms</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#relationships" id="markdown-toc-relationships">Relationships</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#many-to-one" id="markdown-toc-many-to-one">Many-to-one</a></li> <li><a href="https://realm.io/docs/swift/latest/#many-to-many" id="markdown-toc-many-to-many">Many-to-many</a></li> <li><a href="https://realm.io/docs/swift/latest/#inverse-relationships" id="markdown-toc-inverse-relationships">Inverse relationships</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#writes" id="markdown-toc-writes">Writes</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#creating-objects" id="markdown-toc-creating-objects">Creating objects</a></li> <li><a href="https://realm.io/docs/swift/latest/#nested-objects" id="markdown-toc-nested-objects">Nested objects</a></li> <li><a href="https://realm.io/docs/swift/latest/#updating-objects" id="markdown-toc-updating-objects">Updating objects</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#typed-updates" id="markdown-toc-typed-updates">Typed updates</a></li> <li><a href="https://realm.io/docs/swift/latest/#key-value-coding" id="markdown-toc-key-value-coding">Key-value coding</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#objects-with-primary-keys" id="markdown-toc-objects-with-primary-keys">Objects with primary keys</a></li> <li><a href="https://realm.io/docs/swift/latest/#deleting-objects" id="markdown-toc-deleting-objects">Deleting objects</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#queries" id="markdown-toc-queries">Queries</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#filtering" id="markdown-toc-filtering">Filtering</a></li> <li><a href="https://realm.io/docs/swift/latest/#sorting" id="markdown-toc-sorting">Sorting</a></li> <li><a href="https://realm.io/docs/swift/latest/#chaining-queries" id="markdown-toc-chaining-queries">Chaining queries</a></li> <li><a href="https://realm.io/docs/swift/latest/#auto-updating-results" id="markdown-toc-auto-updating-results">Auto-updating results</a></li> <li><a href="https://realm.io/docs/swift/latest/#limiting-results" id="markdown-toc-limiting-results">Limiting results</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#migrations" id="markdown-toc-migrations">Migrations</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#local-migrations" id="markdown-toc-local-migrations">Local migrations</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#updating-values" id="markdown-toc-updating-values">Updating values</a></li> <li><a href="https://realm.io/docs/swift/latest/#renaming-properties" id="markdown-toc-renaming-properties">Renaming properties</a></li> <li><a href="https://realm.io/docs/swift/latest/#linear-migrations" id="markdown-toc-linear-migrations">Linear migrations</a></li> </ul> </li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#notifications" id="markdown-toc-notifications">Notifications</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#realm-notifications" id="markdown-toc-realm-notifications">Realm notifications</a></li> <li><a href="https://realm.io/docs/swift/latest/#collection-notifications" id="markdown-toc-collection-notifications">Collection notifications</a></li> <li><a href="https://realm.io/docs/swift/latest/#object-notifications" id="markdown-toc-object-notifications">Object notifications</a></li> <li><a href="https://realm.io/docs/swift/latest/#interface-driven-writes" id="markdown-toc-interface-driven-writes">Interface-driven writes</a></li> <li><a href="https://realm.io/docs/swift/latest/#key-value-observation" id="markdown-toc-key-value-observation">Key-value observation</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#encryption" id="markdown-toc-encryption">Encryption</a></li> <li><a href="https://realm.io/docs/swift/latest/#working-with-synced-realms" id="markdown-toc-working-with-synced-realms">Working with synced Realms</a></li> <li><a href="https://realm.io/docs/swift/latest/#threading" id="markdown-toc-threading">Threading</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#seeing-changes-from-other-threads" id="markdown-toc-seeing-changes-from-other-threads">Seeing changes from other threads</a></li> <li><a href="https://realm.io/docs/swift/latest/#passing-instances-across-threads" id="markdown-toc-passing-instances-across-threads">Passing instances across threads</a></li> <li><a href="https://realm.io/docs/swift/latest/#using-a-realm-across-threads" id="markdown-toc-using-a-realm-across-threads">Using a Realm across threads</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#json" id="markdown-toc-json">JSON</a></li> <li><a href="https://realm.io/docs/swift/latest/#testing-and-debugging" id="markdown-toc-testing-and-debugging">Testing and debugging</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#configuring-the-default-realm" id="markdown-toc-configuring-the-default-realm">Configuring the default Realm</a></li> <li><a href="https://realm.io/docs/swift/latest/#injecting-realm-instances" id="markdown-toc-injecting-realm-instances">Injecting Realm instances</a></li> <li><a href="https://realm.io/docs/swift/latest/#debugging" id="markdown-toc-debugging">Debugging</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#realm-studio-1" id="markdown-toc-realm-studio-1">Realm Studio</a></li> </ul> </li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#current-limitations" id="markdown-toc-current-limitations">Current limitations</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#limitations-general" id="markdown-toc-limitations-general">General</a></li> <li><a href="https://realm.io/docs/swift/latest/#limitations-threads" id="markdown-toc-limitations-threads">Threads</a></li> <li><a href="https://realm.io/docs/swift/latest/#limitations-models" id="markdown-toc-limitations-models">Models</a></li> <li><a href="https://realm.io/docs/swift/latest/#limitations-file-size" id="markdown-toc-limitations-file-size">File size</a></li> <li><a href="https://realm.io/docs/swift/latest/#limitations-swift-properties" id="markdown-toc-limitations-swift-properties">Initializing Swift properties using Realm APIs</a></li> <li><a href="https://realm.io/docs/swift/latest/#limitations-encrypted-realms" id="markdown-toc-limitations-encrypted-realms">Encrypted Realms and multiple processes</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#recipes" id="markdown-toc-recipes">Recipes</a></li> <li><a href="https://realm.io/docs/swift/latest/#faq" id="markdown-toc-faq">FAQ</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#faq-view-realms" id="markdown-toc-faq-view-realms">How can I find and view the content of my Realm file(s)?</a></li> <li><a href="https://realm.io/docs/swift/latest/#faq-library-size" id="markdown-toc-faq-library-size">How big is the Realm base library?</a></li> <li><a href="https://realm.io/docs/swift/latest/#faq-open-source" id="markdown-toc-faq-open-source">Is Realm open source?</a></li> <li><a href="https://realm.io/docs/swift/latest/#faq-mixpanel" id="markdown-toc-faq-mixpanel">I see a network call to Mixpanel when I run my app</a></li> <li><a href="https://realm.io/docs/swift/latest/#faq-swift-structs" id="markdown-toc-faq-swift-structs">Why doesn’t Realm support Swift structs as models?</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#troubleshooting" id="markdown-toc-troubleshooting">Troubleshooting</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#crash-reporting" id="markdown-toc-crash-reporting">Crash reporting</a></li> <li><a href="https://realm.io/docs/swift/latest/#reporting-realm-issues" id="markdown-toc-reporting-realm-issues">Reporting Realm issues</a></li> <li><a href="https://realm.io/docs/swift/latest/#dependency-managers" id="markdown-toc-dependency-managers">Dependency managers</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#cocoapods" id="markdown-toc-cocoapods">CocoaPods</a></li> <li><a href="https://realm.io/docs/swift/latest/#carthage" id="markdown-toc-carthage">Carthage</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#realm-core-binary-fails-to-download" id="markdown-toc-realm-core-binary-fails-to-download">Realm Core binary fails to download</a></li> <li><a href="https://realm.io/docs/swift/latest/#operating-with-low-memory-constraints" id="markdown-toc-operating-with-low-memory-constraints">Operating with low memory constraints</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#getting-help" id="markdown-toc-getting-help">Getting help</a></li> <li><a class="link-line api-ref" href="https://realm.io/docs/swift/4.1.1/api/" target="_blank">API Reference <img src="./realm docs_files/external-link.svg"></a></li><li></li></ul> </div> </div> </div> <div class="nav-bar-left hidden-xs col-sm-3 js-affix-nav affix"> <span class="algolia-autocomplete" style="position: relative; display: inline-block; direction: ltr;"><input autocomplete="off" class="col-xs-12 ds-input" id="search-input" name="search" placeholder="Search the docs" required="required" type="search" aria-label="Search the docs" spellcheck="false" role="combobox" aria-autocomplete="list" aria-expanded="false" aria-labelledby="search-input" aria-owns="algolia-autocomplete-listbox-0" dir="auto" style="position: relative; vertical-align: top;"><pre aria-hidden="true" style="position: absolute; visibility: hidden; white-space: pre; font-family: Realm, Lato, Helvetica, Arial, sans-serif; font-size: 13px; font-style: normal; font-variant: normal; font-weight: 400; word-spacing: 0px; letter-spacing: normal; text-indent: 0px; text-rendering: auto; text-transform: none;"></pre><span class="ds-dropdown-menu" role="listbox" id="algolia-autocomplete-listbox-0" style="position: absolute; top: 100%; z-index: 100; display: none; left: 0px; right: auto;"><div class="ds-dataset-1"></div></span></span> <div class="navbar-docs" id="navbar-docs"> <div> <div class="col-xs-12 no-pad"> <span class="light-text header">Realm Platform </span> </div> <a class="doc-section-header col-xs-12" data-name="Documentation" href="https://docs.realm.io/platform/">Documentation</a> <div class="col-xs-12 no-pad"> <span class="light-text header"> Realm Database </span> </div>  <a class="doc-section-header col-xs-12" data-name="Java" href="https://realm.io/docs/java/latest/">Java</a> <a class="doc-section-header col-xs-12" data-name="Swift" href="https://realm.io/docs/swift/latest/">Swift</a> <div id="doc-toc"> <ul class="nav nav-pills nav-stacked" id="markdown-toc"> <li><a href="https://realm.io/docs/swift/latest/#prerequisites" id="markdown-toc-prerequisites">Prerequisites</a></li> <li><a href="https://realm.io/docs/swift/latest/#installation" id="markdown-toc-installation">Installation</a></li> <li><a href="https://realm.io/docs/swift/latest/#getting-started" id="markdown-toc-getting-started">Getting started</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#realm-studio" id="markdown-toc-realm-studio">Realm Studio</a></li> <li><a href="https://realm.io/docs/swift/latest/#examples" id="markdown-toc-examples">Examples</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#using-the-realm-framework" id="markdown-toc-using-the-realm-framework">Using the Realm framework</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#tvos" id="markdown-toc-tvos">tvOS</a></li> <li><a href="https://realm.io/docs/swift/latest/#using-realm-with-background-app-refresh" id="markdown-toc-using-realm-with-background-app-refresh">Using Realm with background app refresh</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#realms" id="markdown-toc-realms">Realms</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#opening-realms" id="markdown-toc-opening-realms">Opening Local Realms</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#configuring-a-realm" id="markdown-toc-configuring-a-realm">Configuring a Local Realm</a></li> <li><a href="https://realm.io/docs/swift/latest/#default-realm" id="markdown-toc-default-realm">The default Realm</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#opening-a-synchronized-realm" id="markdown-toc-opening-a-synchronized-realm">Opening a synchronized Realm</a></li> <li><a href="https://realm.io/docs/swift/latest/#in-memory-realms" id="markdown-toc-in-memory-realms">In-memory Realms</a></li> <li><a href="https://realm.io/docs/swift/latest/#error-handling" id="markdown-toc-error-handling">Error handling</a></li> <li><a href="https://realm.io/docs/swift/latest/#auxiliary-realm-files" id="markdown-toc-auxiliary-realm-files">Auxiliary Realm files</a></li> <li><a href="https://realm.io/docs/swift/latest/#bundling-a-realm" id="markdown-toc-bundling-a-realm">Bundling a Realm</a></li> <li><a href="https://realm.io/docs/swift/latest/#class-subsets" id="markdown-toc-class-subsets">Class subsets</a></li> <li><a href="https://realm.io/docs/swift/latest/#compacting-realms" id="markdown-toc-compacting-realms">Compacting Realms</a></li> <li><a href="https://realm.io/docs/swift/latest/#deleting-realm-files" id="markdown-toc-deleting-realm-files">Deleting Realm files</a></li> </ul> </li> <li class="active"><a href="https://realm.io/docs/swift/latest/#models" id="markdown-toc-models">Models</a> <ul> <li class=""><a href="https://realm.io/docs/swift/latest/#supported-types" id="markdown-toc-supported-types">Supported property types</a></li> <li class=""><a href="https://realm.io/docs/swift/latest/#required-properties" id="markdown-toc-required-properties">Required properties</a></li> <li><a href="https://realm.io/docs/swift/latest/#primary-keys" id="markdown-toc-primary-keys">Primary keys</a></li> <li><a href="https://realm.io/docs/swift/latest/#indexing-properties" id="markdown-toc-indexing-properties">Indexing properties</a></li> <li><a href="https://realm.io/docs/swift/latest/#ignoring-properties" id="markdown-toc-ignoring-properties">Ignoring properties</a></li> <li><a href="https://realm.io/docs/swift/latest/#property-attributes" id="markdown-toc-property-attributes">Property attributes</a></li> <li><a href="https://realm.io/docs/swift/latest/#property-cheatsheet" id="markdown-toc-property-cheatsheet">Property cheatsheet</a></li> </ul> </li> <li class=""><a href="https://realm.io/docs/swift/latest/#working-with-realm-objects" id="markdown-toc-working-with-realm-objects">Working with Realm objects</a> <ul> <li class=""><a href="https://realm.io/docs/swift/latest/#auto-updating-objects" id="markdown-toc-auto-updating-objects">Auto-updating objects</a></li> <li class=""><a href="https://realm.io/docs/swift/latest/#model-inheritance" id="markdown-toc-model-inheritance">Model inheritance</a></li> </ul> </li> <li class=""><a href="https://realm.io/docs/swift/latest/#collections" id="markdown-toc-collections">Collections</a> <ul> <li class=""><a href="https://realm.io/docs/swift/latest/#copying-objects-between-realms" id="markdown-toc-copying-objects-between-realms">Copying objects between Realms</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#relationships" id="markdown-toc-relationships">Relationships</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#many-to-one" id="markdown-toc-many-to-one">Many-to-one</a></li> <li><a href="https://realm.io/docs/swift/latest/#many-to-many" id="markdown-toc-many-to-many">Many-to-many</a></li> <li><a href="https://realm.io/docs/swift/latest/#inverse-relationships" id="markdown-toc-inverse-relationships">Inverse relationships</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#writes" id="markdown-toc-writes">Writes</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#creating-objects" id="markdown-toc-creating-objects">Creating objects</a></li> <li><a href="https://realm.io/docs/swift/latest/#nested-objects" id="markdown-toc-nested-objects">Nested objects</a></li> <li><a href="https://realm.io/docs/swift/latest/#updating-objects" id="markdown-toc-updating-objects">Updating objects</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#typed-updates" id="markdown-toc-typed-updates">Typed updates</a></li> <li><a href="https://realm.io/docs/swift/latest/#key-value-coding" id="markdown-toc-key-value-coding">Key-value coding</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#objects-with-primary-keys" id="markdown-toc-objects-with-primary-keys">Objects with primary keys</a></li> <li><a href="https://realm.io/docs/swift/latest/#deleting-objects" id="markdown-toc-deleting-objects">Deleting objects</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#queries" id="markdown-toc-queries">Queries</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#filtering" id="markdown-toc-filtering">Filtering</a></li> <li><a href="https://realm.io/docs/swift/latest/#sorting" id="markdown-toc-sorting">Sorting</a></li> <li><a href="https://realm.io/docs/swift/latest/#chaining-queries" id="markdown-toc-chaining-queries">Chaining queries</a></li> <li><a href="https://realm.io/docs/swift/latest/#auto-updating-results" id="markdown-toc-auto-updating-results">Auto-updating results</a></li> <li><a href="https://realm.io/docs/swift/latest/#limiting-results" id="markdown-toc-limiting-results">Limiting results</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#migrations" id="markdown-toc-migrations">Migrations</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#local-migrations" id="markdown-toc-local-migrations">Local migrations</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#updating-values" id="markdown-toc-updating-values">Updating values</a></li> <li><a href="https://realm.io/docs/swift/latest/#renaming-properties" id="markdown-toc-renaming-properties">Renaming properties</a></li> <li><a href="https://realm.io/docs/swift/latest/#linear-migrations" id="markdown-toc-linear-migrations">Linear migrations</a></li> </ul> </li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#notifications" id="markdown-toc-notifications">Notifications</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#realm-notifications" id="markdown-toc-realm-notifications">Realm notifications</a></li> <li><a href="https://realm.io/docs/swift/latest/#collection-notifications" id="markdown-toc-collection-notifications">Collection notifications</a></li> <li><a href="https://realm.io/docs/swift/latest/#object-notifications" id="markdown-toc-object-notifications">Object notifications</a></li> <li><a href="https://realm.io/docs/swift/latest/#interface-driven-writes" id="markdown-toc-interface-driven-writes">Interface-driven writes</a></li> <li><a href="https://realm.io/docs/swift/latest/#key-value-observation" id="markdown-toc-key-value-observation">Key-value observation</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#encryption" id="markdown-toc-encryption">Encryption</a></li> <li><a href="https://realm.io/docs/swift/latest/#working-with-synced-realms" id="markdown-toc-working-with-synced-realms">Working with synced Realms</a></li> <li><a href="https://realm.io/docs/swift/latest/#threading" id="markdown-toc-threading">Threading</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#seeing-changes-from-other-threads" id="markdown-toc-seeing-changes-from-other-threads">Seeing changes from other threads</a></li> <li><a href="https://realm.io/docs/swift/latest/#passing-instances-across-threads" id="markdown-toc-passing-instances-across-threads">Passing instances across threads</a></li> <li><a href="https://realm.io/docs/swift/latest/#using-a-realm-across-threads" id="markdown-toc-using-a-realm-across-threads">Using a Realm across threads</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#json" id="markdown-toc-json">JSON</a></li> <li><a href="https://realm.io/docs/swift/latest/#testing-and-debugging" id="markdown-toc-testing-and-debugging">Testing and debugging</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#configuring-the-default-realm" id="markdown-toc-configuring-the-default-realm">Configuring the default Realm</a></li> <li><a href="https://realm.io/docs/swift/latest/#injecting-realm-instances" id="markdown-toc-injecting-realm-instances">Injecting Realm instances</a></li> <li><a href="https://realm.io/docs/swift/latest/#debugging" id="markdown-toc-debugging">Debugging</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#realm-studio-1" id="markdown-toc-realm-studio-1">Realm Studio</a></li> </ul> </li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#current-limitations" id="markdown-toc-current-limitations">Current limitations</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#limitations-general" id="markdown-toc-limitations-general">General</a></li> <li><a href="https://realm.io/docs/swift/latest/#limitations-threads" id="markdown-toc-limitations-threads">Threads</a></li> <li><a href="https://realm.io/docs/swift/latest/#limitations-models" id="markdown-toc-limitations-models">Models</a></li> <li><a href="https://realm.io/docs/swift/latest/#limitations-file-size" id="markdown-toc-limitations-file-size">File size</a></li> <li><a href="https://realm.io/docs/swift/latest/#limitations-swift-properties" id="markdown-toc-limitations-swift-properties">Initializing Swift properties using Realm APIs</a></li> <li><a href="https://realm.io/docs/swift/latest/#limitations-encrypted-realms" id="markdown-toc-limitations-encrypted-realms">Encrypted Realms and multiple processes</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#recipes" id="markdown-toc-recipes">Recipes</a></li> <li><a href="https://realm.io/docs/swift/latest/#faq" id="markdown-toc-faq">FAQ</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#faq-view-realms" id="markdown-toc-faq-view-realms">How can I find and view the content of my Realm file(s)?</a></li> <li><a href="https://realm.io/docs/swift/latest/#faq-library-size" id="markdown-toc-faq-library-size">How big is the Realm base library?</a></li> <li><a href="https://realm.io/docs/swift/latest/#faq-open-source" id="markdown-toc-faq-open-source">Is Realm open source?</a></li> <li><a href="https://realm.io/docs/swift/latest/#faq-mixpanel" id="markdown-toc-faq-mixpanel">I see a network call to Mixpanel when I run my app</a></li> <li><a href="https://realm.io/docs/swift/latest/#faq-swift-structs" id="markdown-toc-faq-swift-structs">Why doesn’t Realm support Swift structs as models?</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#troubleshooting" id="markdown-toc-troubleshooting">Troubleshooting</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#crash-reporting" id="markdown-toc-crash-reporting">Crash reporting</a></li> <li><a href="https://realm.io/docs/swift/latest/#reporting-realm-issues" id="markdown-toc-reporting-realm-issues">Reporting Realm issues</a></li> <li><a href="https://realm.io/docs/swift/latest/#dependency-managers" id="markdown-toc-dependency-managers">Dependency managers</a> <ul> <li><a href="https://realm.io/docs/swift/latest/#cocoapods" id="markdown-toc-cocoapods">CocoaPods</a></li> <li><a href="https://realm.io/docs/swift/latest/#carthage" id="markdown-toc-carthage">Carthage</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#realm-core-binary-fails-to-download" id="markdown-toc-realm-core-binary-fails-to-download">Realm Core binary fails to download</a></li> <li><a href="https://realm.io/docs/swift/latest/#operating-with-low-memory-constraints" id="markdown-toc-operating-with-low-memory-constraints">Operating with low memory constraints</a></li> </ul> </li> <li><a href="https://realm.io/docs/swift/latest/#getting-help" id="markdown-toc-getting-help">Getting help</a></li> <li><a class="link-line api-ref" href="https://realm.io/docs/swift/4.1.1/api/" target="_blank">API Reference <img src="./realm docs_files/external-link.svg"></a></li><li></li></ul> </div> <a class="doc-section-header col-xs-12" data-name="Objective-C" href="https://realm.io/docs/objc/latest/">Objective-C</a> <a class="doc-section-header col-xs-12" data-name="JavaScript" href="https://realm.io/docs/javascript/latest/">JavaScript</a> <a class="doc-section-header col-xs-12" data-name=".NET" href="https://realm.io/docs/dotnet/latest/">.NET</a> <div class="nav-footer"> <div class="no-pad col-xs-12"> <span class="light-text header">Have a Question?</span> </div> <a href="https://forums.realm.io/" class="link-line col-xs-12">Ask on the Realm Forums</a> <a href="https://stackoverflow.com/questions/tagged/realm" class="link-line col-xs-12">Ask on Stack Overflow</a> <a href="https://github.com/realm/realm-cocoa/issues/new" class="link-line col-xs-12">Submit an Issue</a> </div> </div> <div class="sidebar-bottom"></div> </div> </div> </div>  </main> <div class="block_code_wave col-xs-12"> <svg width="100%" viewBox="0 0 1000 29" version="1.1" preserveAspectRatio="none"> <defs></defs> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="FooterWave" transform="translate(0.000000, -424.000000)" fill="#EBEBF2"> <path d="M1024,452.25271 C1024,452.25271 1024,452.252711 1024,431 C978.405999,427.397902 869.678254,419.256709 671,428 C510.632812,435.114797 388.21875,437.373804 266.320313,437.373804 C144.421875,437.373805 0,428.557398 0,428.557398 L0,452.25271 L1024,452.25271 Z" id="footerBlueTop"></path> </g> </g> </svg> </div> <footer class="footer col-xs-12"> <div class="grid container"> <div class="col-xs-12 col-sm-3"> <ul class="footer-links flex column"> <p class="footer-header"> Products <img src="./realm docs_files/footer_arrow_down.svg"> </p> <li class="light-text"> <a href="https://realm.io/products/realm-platform"> Platform </a> </li> <li class="light-text"> <a href="https://realm.io/products/realm-database"> Database </a> </li> <li class="light-text"> <a href="https://realm.io/products/realm-studio"> Studio </a> </li> <br> <p class="footer-header"> <a href="https://realm.io/pricing"> Pricing </a> </p> <br> <p class="footer-header"> Solutions <img src="./realm docs_files/footer_arrow_down.svg"> </p> <li class="light-text"> <a href="https://realm.io/solutions/realtime-collaboration"> Realtime Collaboration </a> </li> <li class="light-text"> <a href="https://realm.io/solutions/api-mobilization"> API Mobilization </a> </li> <li class="light-text"> <a href="https://realm.io/solutions/offline-first"> Offline First </a> </li> <li class="light-text"> <a href="https://realm.io/addons"> Add-ons </a> </li> </ul> </div> <div class="col-xs-12 col-sm-3"> <ul class="footer-links flex column"> <a href="https://realm.io/docs/"> <p class="footer-header"> Docs <img src="./realm docs_files/footer_arrow_down.svg"> </p> </a> <li class="light-text"> <a href="https://docs.realm.io/platform/"> Realm Platform </a> </li> <li class="light-text"> <a href="https://realm.io/docs/java/latest"> Java </a> </li> <li class="light-text"> <a href="https://realm.io/docs/swift/latest"> Swift </a> </li> <li class="light-text"> <a href="https://realm.io/docs/objc/latest"> Objective‑C </a> </li> <li class="light-text"> <a href="https://realm.io/docs/javascript/latest"> JavaScript </a> </li> <li class="light-text"> <a href="https://realm.io/docs/dotnet/latest"> .NET </a> </li> <br> <a href="https://support.mongodb.com/"> <p class="footer-header"> Support <img src="./realm docs_files/footer_arrow_down.svg"> </p> </a> <li class="light-text"> <a href="https://realm.io/resources"> Resources </a> </li> <li class="light-text"> <a href="https://support.mongodb.com/"> Overview </a> </li> <li class="light-text"> <a href="https://forums.realm.io/"> Forums </a> </li> </ul> </div> <div class="col-xs-12 col-sm-3 footer-links"> <p class="footer-header"> <a href="https://blog.realm.io/"> Blog </a> </p> <ul class="footer-links flex column"> <p class="light-text small"> POPULAR POSTS</p> <li class="light-text"> <a href="https://realm.io/blog/realm-cloud-beta-waitlist/"> Announcing Realm Cloud </a> </li> <li class="light-text"> <a href="https://realm.io/blog/realm-scales-to-the-web/"> Realm Scales with GraphQL </a> </li> <li class="light-text"> <a href="https://realm.io/blog/realm-world-tour-wraps-2017/"> Realm World Tour 2017 </a> </li> </ul> <br> <p class="footer-header"> <a href="https://academy.realm.io/"> Academy </a> </p> <ul class="footer-links flex column"> <p class="light-text small"> POPULAR ARTICLES</p> <li class="light-text"> <a href="https://academy.realm.io/posts/learning-path-understanding-realm/"> Understanding Realm </a> </li> <li class="light-text"> <a href="https://academy.realm.io/posts/learning-path-offline-first/"> Building for Offline-First </a> </li> <li class="light-text"> <a href="https://academy.realm.io/posts/learning-path-what-makes-realm-different/"> What Makes Realm Different? </a> </li> </ul> <br> <p class="footer-header"> <a href="https://realm.io/realm-report"> Realm Report </a> </p> </div> <div class="col-xs-12 col-sm-3"> <p class="footer-header"> Company <img src="./realm docs_files/footer_arrow_down.svg"> </p> <ul class="footer-links flex column"> <li class="light-text"> <a href="https://realm.io/about"> About </a> </li> <li class="light-text"> <a href="https://realm.io/customers"> Customers </a> </li> <li class="light-text"> <a href="https://mongodb.com/careers"> Jobs </a> </li> <li class="light-text"> <a href="https://mongodb.com/press"> Press </a> </li> <li class="light-text"> <a href="https://support.mongodb.com/"> Support </a> </li> <li class="light-text"> <a href="https://realm.io/legal"> Legal </a> </li> <li class="light-text"> <a href="https://mongodb.com/contact-us-realm"> Contact </a> </li> <li class="col-xs-12 footer-sub desktop"> <ul class="social footer-links flex center xs-column"> <li class="social flex center"> <a class="flex center column col-xs-12" href="https://realm.github.io/" title="GitHub"> <svg width="25px" height="25px" viewBox="0 0 25 25" class="footer-icon github"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M1,12.5 C1,17.5810833 4.29475,21.8916667 8.86504167,23.4125417 C9.43908333,23.5189167 9.625,23.1624167 9.625,22.8595833 L9.625,20.7186667 C6.42608333,21.4144167 5.76004167,19.3616667 5.76004167,19.3616667 C5.23679167,18.0324583 4.48258333,17.6788333 4.48258333,17.6788333 C3.43895833,16.964875 4.562125,16.9802083 4.562125,16.9802083 C5.71691667,17.0607083 6.3245,18.1656667 6.3245,18.1656667 C7.34991667,19.92325 9.01454167,19.4153333 9.671,19.121125 C9.77354167,18.3784167 10.0715833,17.8705 10.40125,17.5839583 C7.84729167,17.2916667 5.16204167,16.3055417 5.16204167,11.9000833 C5.16204167,10.6437083 5.6115,9.61829167 6.34654167,8.81329167 C6.22770833,8.52291667 5.83383333,7.35279167 6.45866667,5.769625 C6.45866667,5.769625 7.42466667,5.46104167 9.622125,6.948375 C10.53925,6.69345833 11.5225,6.566 12.5,6.56120833 C13.4775,6.566 14.4617083,6.69345833 15.38075,6.948375 C17.5762917,5.46104167 18.540375,5.769625 18.540375,5.769625 C19.1661667,7.35375 18.7722917,8.523875 18.6534583,8.81329167 C19.391375,9.61829167 19.837,10.6446667 19.837,11.9000833 C19.837,16.3170417 17.1469583,17.28975 14.5862917,17.574375 C14.998375,17.930875 15.375,18.6304583 15.375,19.7037917 L15.375,22.8595833 C15.375,23.1652917 15.559,23.5246667 16.142625,23.4115833 C20.7090833,21.8887917 24,17.5791667 24,12.5 C24,6.149125 18.850875,1 12.5,1 C6.15008333,1 1,6.149125 1,12.5 Z" id="GitHub" fill="#1C233F"></path> </g> </svg> </a> </li> <li class="social flex center"> <a class="flex center column col-xs-12" href="https://twitter.com/realm" title="Twitter"> <svg width="25px" height="25px" viewBox="0 0 25 25" class="footer-icon twitter"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M24,5.42915 C23.1537917,5.80155 22.2443333,6.05235 21.2898333,6.1654 C22.2644583,5.58685 23.0129167,4.6701 23.364625,3.5776 C22.45325,4.1134 21.4431667,4.5029 20.3679167,4.71285 C19.5082917,3.8037 18.2806667,3.2356 16.9236667,3.2356 C13.877125,3.2356 11.6384583,6.0533 12.3265417,8.97835 C8.406,8.7836 4.92916667,6.9216 2.601375,4.09155 C1.365125,6.1939 1.96025,8.94415 4.06091667,10.33685 C3.2885,10.31215 2.56016667,10.1022 1.92479167,9.75165 C1.87304167,11.9186 3.43991667,13.9459 5.70925,14.39715 C5.045125,14.57575 4.31775,14.61755 3.57791667,14.47695 C4.17783333,16.33515 5.92008333,17.687 7.98625,17.725 C6.0025,19.26685 3.50316667,19.9556 1,19.663 C3.08820833,20.99015 5.56933333,21.7644 8.2335,21.7644 C16.9945833,21.7644 21.944375,14.42945 21.645375,7.8507 C22.5672917,7.19045 23.3675,6.3668 24,5.42915 L24,5.42915 Z" id="Twitter" fill="#1C233F"></path> </g> </svg> </a> </li> <li class="social flex center"> <a class="flex center column col-xs-12" href="https://www.facebook.com/realmplatform/" title="Facebook"> <svg width="25px" height="25px" viewBox="0 0 25 25" class="footer-icon facebook"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="F_icon" transform="translate(1.000000, 1.000000)" fill="#1C233F"> <g id="Layer_1"> <path d="M21.6752355,22.9384595 C22.372695,22.9384595 22.9382819,22.3728726 22.9382819,21.6752355 L22.9382819,1.31535135 C22.9382819,0.617625483 22.3727838,0.0522162162 21.6752355,0.0522162162 L1.31535135,0.0522162162 C0.617625483,0.0522162162 0.0522162162,0.617625483 0.0522162162,1.31535135 L0.0522162162,21.6752355 C0.0522162162,22.3727838 0.61753668,22.9384595 1.31535135,22.9384595 L21.6752355,22.9384595 Z M15.8432703,22.9384595 L15.8432703,14.0756448 L18.8180849,14.0756448 L19.2635212,10.6216486 L15.8432703,10.6216486 L15.8432703,8.41649035 C15.8432703,7.41647876 16.1209575,6.73500386 17.5549498,6.73500386 L19.3839382,6.73420463 L19.3839382,3.64492278 C19.0676216,3.60283012 17.9819151,3.50878764 16.7187799,3.50878764 C14.0817722,3.50878764 12.2764054,5.11843243 12.2764054,8.07442085 L12.2764054,10.6216486 L9.29395367,10.6216486 L9.29395367,14.0756448 L12.2764054,14.0756448 L12.2764054,22.9384595 L15.8432703,22.9384595 Z" id="Combined-Shape"></path> </g> </g> </g> </svg> </a> </li> <li class="social flex center"> <a class="flex center column col-xs-12" href="https://www.linkedin.com/company/realm-inc" title="LinkedIn"> <svg width="25px" height="24px" viewBox="0 0 25 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="linkedin" fill-rule="nonzero" fill="#1C233F"> <path d="M5.1875,2.60416667 C5.1875,4.04270833 4.03125,5.20833333 2.60416667,5.20833333 C1.17708333,5.20833333 0.0208333333,4.04270833 0.0208333333,2.60416667 C0.0208333333,1.16666667 1.17708333,0 2.60416667,0 C4.03125,0 5.1875,1.16666667 5.1875,2.60416667 Z M5.20833333,7.29166667 L0,7.29166667 L0,23.9583333 L5.20833333,23.9583333 L5.20833333,7.29166667 Z M13.5229167,7.29166667 L8.34791667,7.29166667 L8.34791667,23.9583333 L13.5239583,23.9583333 L13.5239583,15.209375 C13.5239583,10.3447917 19.8041667,9.946875 19.8041667,15.209375 L19.8041667,23.9583333 L25,23.9583333 L25,13.4052083 C25,5.196875 15.70625,5.49583333 13.5229167,9.53645833 L13.5229167,7.29166667 Z" id="logo"></path> </g> </g> </svg> </a> </li> <li class="social flex center"> <div class="btn-group dropup"> <a href="https://realm.io/docs/swift/latest/#" data-toggle="dropdown" class="dropdown-toggle flex center column" aria-haspopup="true" aria-expanded="false"> <svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M6.503,20.752 C6.503,22.546 5.047,24 3.252,24 C1.456,24 4.4408921e-16,22.546 4.4408921e-16,20.752 C4.4408921e-16,18.958 1.456,17.504 3.252,17.504 C5.047,17.505 6.503,18.958 6.503,20.752 Z M0,8.18 L0,12.991 C6.05,13.053 10.96,17.957 11.022,24 L15.839,24 C15.777,15.29 8.721,8.242 0,8.18 Z M0,4.812 C10.58,4.858 19.152,13.406 19.183,24 L24,24 C23.97,10.769 13.245,0.046 0,0 L0,4.812 Z" id="rss" fill="#1D2340" fill-rule="nonzero"></path> </g> </svg> </a> <ul class="dropdown-menu dropdown-menu-right" role="menu"> <li class="col-xs-12"> <a href="https://blog.realm.io/feed.xml" class="flex rss-link"> <svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M6.503,20.752 C6.503,22.546 5.047,24 3.252,24 C1.456,24 4.4408921e-16,22.546 4.4408921e-16,20.752 C4.4408921e-16,18.958 1.456,17.504 3.252,17.504 C5.047,17.505 6.503,18.958 6.503,20.752 Z M0,8.18 L0,12.991 C6.05,13.053 10.96,17.957 11.022,24 L15.839,24 C15.777,15.29 8.721,8.242 0,8.18 Z M0,4.812 C10.58,4.858 19.152,13.406 19.183,24 L24,24 C23.97,10.769 13.245,0.046 0,0 L0,4.812 Z" id="rss" fill="#1D2340" fill-rule="nonzero"></path> </g> </svg> <p>Realm Blog</p> </a> </li> <li class="col-xs-12"> <a href="https://academy.realm.io/feed.xml" class="flex rss-link"> <svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M6.503,20.752 C6.503,22.546 5.047,24 3.252,24 C1.456,24 4.4408921e-16,22.546 4.4408921e-16,20.752 C4.4408921e-16,18.958 1.456,17.504 3.252,17.504 C5.047,17.505 6.503,18.958 6.503,20.752 Z M0,8.18 L0,12.991 C6.05,13.053 10.96,17.957 11.022,24 L15.839,24 C15.777,15.29 8.721,8.242 0,8.18 Z M0,4.812 C10.58,4.858 19.152,13.406 19.183,24 L24,24 C23.97,10.769 13.245,0.046 0,0 L0,4.812 Z" id="rss" fill="#1D2340" fill-rule="nonzero"></path> </g> </svg> <p>Realm Academy</p> </a> </li> </ul> </div> </li> </ul> </li> </ul> </div> <div class="col-xs-12 footer-sub mobile"> <button data-toggle="modal" data-target="#subbarBtnMobile" class="btn btn-indigo flex center col-xs-12"> <svg width="27px" height="20px" viewBox="0 0 27 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="Artboard" fill-rule="nonzero" fill="#FFFFFF"> <path d="M13.4994368,11 L0,0 L27,0 L13.4994368,11 Z M7,8.96800256 L0,3 L0,17 L7,8.96800256 Z M20,8.96800256 L27,17 L27,3 L20,8.96800256 Z M17.8594924,10 L13.5,13.5431736 L9.1405076,10 L0,20 L27,20 L17.8594924,10 L17.8594924,10 Z" id="Shape"></path> </g> </g> </svg> Subscribe </button> <div id="subbarBtnMobile" class="modal" tabindex="-1" role="dialog" aria-labelledby="sub-news"> <div class="modal-dialog" role="document"> <div class="modal-content col-xs-12"> <div class="modal-header col-xs-12"> <button type="button" class="close" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">×</span> </button> </div> <div class="modal-body col-xs-12 text-center"> <div class="col-xs-12"> <p class="modal-title" id="subTitleText"></p><h3 id="get-the-latest-news-in-your-inbox-every-week">Get the latest news in your inbox every week</h3> <p>Subscribe for Realm tutorials, new features, and company announcements</p> <p></p> <form action="https://www2.realm.io/l/210132/2017-08-09/9ddl8?success_location=https%3A%2F%2Frealm.io%2Fdocs%2Fswift%2Flatest%2F%23relationships%3Fw%3D1" method="post" class="validate"> <div class="input-group input-group-lg col-xs-12"><input type="email" value="" name="email" required="" class="required email home-newsletter-email-input col-sm-12" style="min-height: 46px;" placeholder="Enter your email"> <span class="input-group-btn"> <button type="submit" name="subscribe" style="border-radius:6px;" class="btn btn-indigo btn-subscribe">Subscribe</button> </span> </div> </form> </div> </div> </div> </div> </div> <ul class="social footer-links flex col-xs-12 center"> <li class="social flex center"> <a class="flex center column col-xs-12" href="https://realm.github.io/" title="GitHub"> <svg width="25px" height="25px" viewBox="0 0 25 25" class="footer-icon github"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M1,12.5 C1,17.5810833 4.29475,21.8916667 8.86504167,23.4125417 C9.43908333,23.5189167 9.625,23.1624167 9.625,22.8595833 L9.625,20.7186667 C6.42608333,21.4144167 5.76004167,19.3616667 5.76004167,19.3616667 C5.23679167,18.0324583 4.48258333,17.6788333 4.48258333,17.6788333 C3.43895833,16.964875 4.562125,16.9802083 4.562125,16.9802083 C5.71691667,17.0607083 6.3245,18.1656667 6.3245,18.1656667 C7.34991667,19.92325 9.01454167,19.4153333 9.671,19.121125 C9.77354167,18.3784167 10.0715833,17.8705 10.40125,17.5839583 C7.84729167,17.2916667 5.16204167,16.3055417 5.16204167,11.9000833 C5.16204167,10.6437083 5.6115,9.61829167 6.34654167,8.81329167 C6.22770833,8.52291667 5.83383333,7.35279167 6.45866667,5.769625 C6.45866667,5.769625 7.42466667,5.46104167 9.622125,6.948375 C10.53925,6.69345833 11.5225,6.566 12.5,6.56120833 C13.4775,6.566 14.4617083,6.69345833 15.38075,6.948375 C17.5762917,5.46104167 18.540375,5.769625 18.540375,5.769625 C19.1661667,7.35375 18.7722917,8.523875 18.6534583,8.81329167 C19.391375,9.61829167 19.837,10.6446667 19.837,11.9000833 C19.837,16.3170417 17.1469583,17.28975 14.5862917,17.574375 C14.998375,17.930875 15.375,18.6304583 15.375,19.7037917 L15.375,22.8595833 C15.375,23.1652917 15.559,23.5246667 16.142625,23.4115833 C20.7090833,21.8887917 24,17.5791667 24,12.5 C24,6.149125 18.850875,1 12.5,1 C6.15008333,1 1,6.149125 1,12.5 Z" id="GitHub" fill="#1C233F"></path> </g> </svg> </a> </li> <li class="social flex center"> <a class="flex center column col-xs-12" href="https://twitter.com/realm" title="Twitter"> <svg width="25px" height="25px" viewBox="0 0 25 25" class="footer-icon twitter"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M24,5.42915 C23.1537917,5.80155 22.2443333,6.05235 21.2898333,6.1654 C22.2644583,5.58685 23.0129167,4.6701 23.364625,3.5776 C22.45325,4.1134 21.4431667,4.5029 20.3679167,4.71285 C19.5082917,3.8037 18.2806667,3.2356 16.9236667,3.2356 C13.877125,3.2356 11.6384583,6.0533 12.3265417,8.97835 C8.406,8.7836 4.92916667,6.9216 2.601375,4.09155 C1.365125,6.1939 1.96025,8.94415 4.06091667,10.33685 C3.2885,10.31215 2.56016667,10.1022 1.92479167,9.75165 C1.87304167,11.9186 3.43991667,13.9459 5.70925,14.39715 C5.045125,14.57575 4.31775,14.61755 3.57791667,14.47695 C4.17783333,16.33515 5.92008333,17.687 7.98625,17.725 C6.0025,19.26685 3.50316667,19.9556 1,19.663 C3.08820833,20.99015 5.56933333,21.7644 8.2335,21.7644 C16.9945833,21.7644 21.944375,14.42945 21.645375,7.8507 C22.5672917,7.19045 23.3675,6.3668 24,5.42915 L24,5.42915 Z" id="Twitter" fill="#1C233F"></path> </g> </svg> </a> </li> <li class="social flex center"> <a class="flex center column col-xs-12" href="https://plus.google.com/+RealmPlatform" title="Google+"> <svg width="25px" height="25px" viewBox="0 0 25 25" class="footer-icon google-plus"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="iconmonstr-google-plus-4" fill="#1C233F"> <path d="M12.5,0 C5.596875,0 0,5.596875 0,12.5 C0,19.403125 5.596875,25 12.5,25 C19.403125,25 25,19.403125 25,12.5 C25,5.596875 19.403125,0 12.5,0 L12.5,0 Z M9.46145833,16.753125 C7.109375,16.753125 5.20833333,14.8520833 5.20833333,12.5 C5.20833333,10.1479167 7.109375,8.246875 9.46145833,8.246875 C10.6104167,8.246875 11.5697917,8.665625 12.3104167,9.35833333 L11.1572917,10.4708333 C10.840625,10.1666667 10.2885417,9.81458333 9.46145833,9.81458333 C8.009375,9.81458333 6.825,11.0177083 6.825,12.5010417 C6.825,13.984375 8.01041667,15.1875 9.46145833,15.1875 C11.1447917,15.1875 11.778125,13.9770833 11.8739583,13.3520833 L9.46145833,13.3520833 L9.46145833,11.89375 L13.4770833,11.89375 C13.5145833,12.10625 13.54375,12.31875 13.54375,12.5989583 C13.5447917,15.028125 11.915625,16.753125 9.46145833,16.753125 L9.46145833,16.753125 Z M19.7916667,13.1072917 L17.96875,13.1072917 L17.96875,14.9302083 L16.753125,14.9302083 L16.753125,13.1072917 L14.9302083,13.1072917 L14.9302083,11.8927083 L16.753125,11.8927083 L16.753125,10.0697917 L17.96875,10.0697917 L17.96875,11.8927083 L19.7916667,11.8927083 L19.7916667,13.1072917 L19.7916667,13.1072917 Z" id="Shape"></path> </g> </g> </svg> </a> </li> <li class="social flex center"> <a class="flex center column col-xs-12" href="https://www.facebook.com/realmplatform/" title="Facebook"> <svg width="25px" height="25px" viewBox="0 0 25 25" class="footer-icon facebook"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="F_icon" transform="translate(1.000000, 1.000000)" fill="#1C233F"> <g id="Layer_1"> <path d="M21.6752355,22.9384595 C22.372695,22.9384595 22.9382819,22.3728726 22.9382819,21.6752355 L22.9382819,1.31535135 C22.9382819,0.617625483 22.3727838,0.0522162162 21.6752355,0.0522162162 L1.31535135,0.0522162162 C0.617625483,0.0522162162 0.0522162162,0.617625483 0.0522162162,1.31535135 L0.0522162162,21.6752355 C0.0522162162,22.3727838 0.61753668,22.9384595 1.31535135,22.9384595 L21.6752355,22.9384595 Z M15.8432703,22.9384595 L15.8432703,14.0756448 L18.8180849,14.0756448 L19.2635212,10.6216486 L15.8432703,10.6216486 L15.8432703,8.41649035 C15.8432703,7.41647876 16.1209575,6.73500386 17.5549498,6.73500386 L19.3839382,6.73420463 L19.3839382,3.64492278 C19.0676216,3.60283012 17.9819151,3.50878764 16.7187799,3.50878764 C14.0817722,3.50878764 12.2764054,5.11843243 12.2764054,8.07442085 L12.2764054,10.6216486 L9.29395367,10.6216486 L9.29395367,14.0756448 L12.2764054,14.0756448 L12.2764054,22.9384595 L15.8432703,22.9384595 Z" id="Combined-Shape"></path> </g> </g> </g> </svg> </a> </li> <li class="social flex center"> <a class="flex center column col-xs-12" href="https://www.linkedin.com/company/realm-inc" title="LinkedIn"> <svg width="25px" height="24px" viewBox="0 0 25 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <g id="linkedin" fill-rule="nonzero" fill="#1C233F"> <path d="M5.1875,2.60416667 C5.1875,4.04270833 4.03125,5.20833333 2.60416667,5.20833333 C1.17708333,5.20833333 0.0208333333,4.04270833 0.0208333333,2.60416667 C0.0208333333,1.16666667 1.17708333,0 2.60416667,0 C4.03125,0 5.1875,1.16666667 5.1875,2.60416667 Z M5.20833333,7.29166667 L0,7.29166667 L0,23.9583333 L5.20833333,23.9583333 L5.20833333,7.29166667 Z M13.5229167,7.29166667 L8.34791667,7.29166667 L8.34791667,23.9583333 L13.5239583,23.9583333 L13.5239583,15.209375 C13.5239583,10.3447917 19.8041667,9.946875 19.8041667,15.209375 L19.8041667,23.9583333 L25,23.9583333 L25,13.4052083 C25,5.196875 15.70625,5.49583333 13.5229167,9.53645833 L13.5229167,7.29166667 Z" id="logo"></path> </g> </g> </svg> </a> </li> <li class="social flex center"> <div class="btn-group dropup "> <a href="https://realm.io/docs/swift/latest/#" data-toggle="dropdown" class="dropdown-toggle flex center column" aria-haspopup="true" aria-expanded="false"> <svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M6.503,20.752 C6.503,22.546 5.047,24 3.252,24 C1.456,24 4.4408921e-16,22.546 4.4408921e-16,20.752 C4.4408921e-16,18.958 1.456,17.504 3.252,17.504 C5.047,17.505 6.503,18.958 6.503,20.752 Z M0,8.18 L0,12.991 C6.05,13.053 10.96,17.957 11.022,24 L15.839,24 C15.777,15.29 8.721,8.242 0,8.18 Z M0,4.812 C10.58,4.858 19.152,13.406 19.183,24 L24,24 C23.97,10.769 13.245,0.046 0,0 L0,4.812 Z" id="rss" fill="#1D2340" fill-rule="nonzero"></path> </g> </svg> </a> <ul class="dropdown-menu dropdown-menu-right" role="menu"> <li class="col-xs-12"> <a href="https://blog.realm.io/feed.xml" class="flex rss-link"> <svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M6.503,20.752 C6.503,22.546 5.047,24 3.252,24 C1.456,24 4.4408921e-16,22.546 4.4408921e-16,20.752 C4.4408921e-16,18.958 1.456,17.504 3.252,17.504 C5.047,17.505 6.503,18.958 6.503,20.752 Z M0,8.18 L0,12.991 C6.05,13.053 10.96,17.957 11.022,24 L15.839,24 C15.777,15.29 8.721,8.242 0,8.18 Z M0,4.812 C10.58,4.858 19.152,13.406 19.183,24 L24,24 C23.97,10.769 13.245,0.046 0,0 L0,4.812 Z" id="rss" fill="#1D2340" fill-rule="nonzero"></path> </g> </svg> <p>Realm Blog</p> </a> </li> <li class="col-xs-12"> <a href="https://academy.realm.io/feed.xml" class="flex rss-link"> <svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"> <path d="M6.503,20.752 C6.503,22.546 5.047,24 3.252,24 C1.456,24 4.4408921e-16,22.546 4.4408921e-16,20.752 C4.4408921e-16,18.958 1.456,17.504 3.252,17.504 C5.047,17.505 6.503,18.958 6.503,20.752 Z M0,8.18 L0,12.991 C6.05,13.053 10.96,17.957 11.022,24 L15.839,24 C15.777,15.29 8.721,8.242 0,8.18 Z M0,4.812 C10.58,4.858 19.152,13.406 19.183,24 L24,24 C23.97,10.769 13.245,0.046 0,0 L0,4.812 Z" id="rss" fill="#1D2340" fill-rule="nonzero"></path> </g> </svg> <p>Realm Academy</p> </a> </li> </ul> </div> </li> </ul> </div>   <div class="col-xs-12 realm-inc"> <div class="col-xs-12"> <div class="row"> <span class="wordmark">BUILD BETTER APPS FASTER™</span> <br> © <a href="https://realm.io/" :="">Realm</a> 2014- 2019, all rights reserved. </div> </div> </div> </div>  </footer> <script> _linkedin_data_partner_id = "10114"; </script><script> (function(){var s = document.getElementsByTagName("script")[0]; var b = document.createElement("script"); b.type = "text/javascript";b.async = true; b.src = "https://snap.licdn.com/li.lms-analytics/insight.min.js"; s.parentNode.insertBefore(b, s);})(); </script> <script>
$(document).ready(function(){

  $('form.validate').each(function(index,form) {
    var action = $(form).attr('action');
    var component = 'w=1';
    var combiner = window.location.hash.indexOf('?') ? '?' : '?'
    var success_location = encodeURIComponent(document.location.href+combiner+component);
    $(form).attr('action', action+'?success_location='+success_location);
  });

  // Add subscribed text when subscribed
  var url = window.location.href;
  var msgSubscribed = document.getElementsByClassName('modal-success');
  if(url.match(/w=(1)/)) {
    $(msgSubscribed).modal('show');
  }

});
</script> <script>
$(document).ready(function(){

  // Add subscribed text when subscribed
  var url = window.location.href;
  var msgSubscribed = document.getElementsByClassName('modal-success');
  if(url.match(/w=(1)/)) {
    $(msgSubscribed).modal('show');
  }

  $('#terms-check-download').change(function(){
  if($(this).is(":checked")) {
    $('#proDownload').removeClass("disabled");
  } else {
    $('#proDownload').addClass("disabled");
  }}
  )

});
</script> <div class="modal fadeIn modal-success" id="proLicense" tabindex="-1" role="dialog" aria-labelledby="proLicense"> <div class="modal-dialog" role="document"> <div class="modal-content"> <div class="modal-body text-center"> <h3 id="success">Success!</h3> <p>You will be receiving an email shortly with details</p> </div> </div> </div> </div> <div class="modal fade" id="platformModal" tabindex="-1" role="dialog" aria-labelledby="platformModal" aria-hidden="true"> <div class="modal-dialog" role="document"> <div class="modal-content col-xs-12"> <div class="modal-header"> <button type="button" class="close" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">×</span> </button> </div> <div class="modal-body row"> <h5 class="modal-title row text-center">Choose your flavor of Realm Platform</h5> <a class="col-xs-12 btn btn-indigo" href="https://cloud.realm.io/login/sign-up">Start with Realm Platform: Cloud</a> </div> </div> </div> </div> <div class="modal fadeIn modal-failure" id="proLicense" tabindex="-1" role="dialog" aria-labelledby="proLicense"> <div class="modal-dialog" role="document"> <div class="modal-content"> <div class="modal-body text-center"> <h3 id="oops-something-went-wrong">Oops something went wrong</h3> <p>You will not be receiving an email shortly with details</p> </div> </div> </div> </div> <link rel="stylesheet" href="./realm docs_files/cookieconsent.min.css"> <script src="./realm docs_files/cookieconsent.min.js"></script> <script>
window.addEventListener("load", function(){
window.cookieconsent.initialise({
  "palette": {
    "popup": {
      "background": "#f8f7ff",
      "text": "#000000"
    },
    "button": {
      "background": "#6e60f9"
    }
  },
  "theme": "edgeless",
  "position": "bottom-left",
  "content": {
    "href": "https://realm.io/legal"
  }
})});
</script> <script>var fc_CSS=document.createElement('link');fc_CSS.setAttribute('rel','stylesheet');var fc_isSecured = (window.location && window.location.protocol == 'https:');var fc_lang = document.getElementsByTagName('html')[0].getAttribute('lang'); var fc_rtlLanguages = ['ar','he']; var fc_rtlSuffix = (fc_rtlLanguages.indexOf(fc_lang) >= 0) ? '-rtl' : '';fc_CSS.setAttribute('type','text/css');fc_CSS.setAttribute('href',((fc_isSecured)? 'https://d36mpcpuzc4ztk.cloudfront.net':'http://assets1.chat.freshdesk.com')+'/css/visitor'+fc_rtlSuffix+'.css');document.getElementsByTagName('head')[0].appendChild(fc_CSS);var fc_JS=document.createElement('script'); fc_JS.type='text/javascript'; fc_JS.defer=true;fc_JS.src=((fc_isSecured)?'https://d36mpcpuzc4ztk.cloudfront.net':'http://assets.chat.freshdesk.com')+'/js/visitor.js';(document.body?document.body:document.getElementsByTagName('head')[0]).appendChild(fc_JS);window.livechat_setting= 'eyJ3aWRnZXRfc2l0ZV91cmwiOiJyZWFsbS5mcmVzaGRlc2suY29tIiwicHJvZHVjdF9pZCI6bnVsbCwibmFtZSI6IlJlYWxtIiwid2lkZ2V0X2V4dGVybmFsX2lkIjpudWxsLCJ3aWRnZXRfaWQiOiIxNWYzZWRiZS1hYjhiLTQyMzMtOGViYS01YjdmODdiZTVmMDUiLCJzaG93X29uX3BvcnRhbCI6dHJ1ZSwicG9ydGFsX2xvZ2luX3JlcXVpcmVkIjpmYWxzZSwibGFuZ3VhZ2UiOiJlbiIsInRpbWV6b25lIjoiUGFjaWZpYyBUaW1lIChVUyAmIENhbmFkYSkiLCJpZCI6MzYwMDAwMzM5NzEsIm1haW5fd2lkZ2V0IjoxLCJmY19pZCI6IjRiNGI0MWNlN2FmODkyNGRiYTg0YTIxMTViZDBmZDAyIiwic2hvdyI6MSwicmVxdWlyZWQiOjIsImhlbHBkZXNrbmFtZSI6IlJlYWxtIiwibmFtZV9sYWJlbCI6Ik5hbWUiLCJtZXNzYWdlX2xhYmVsIjoiTWVzc2FnZSIsInBob25lX2xhYmVsIjoiUGhvbmUiLCJ0ZXh0ZmllbGRfbGFiZWwiOiJUZXh0ZmllbGQiLCJkcm9wZG93bl9sYWJlbCI6IkRyb3Bkb3duIiwid2VidXJsIjoicmVhbG0uZnJlc2hkZXNrLmNvbSIsIm5vZGV1cmwiOiJjaGF0LmZyZXNoZGVzay5jb20iLCJkZWJ1ZyI6MSwibWUiOiJNZSIsImV4cGlyeSI6MTUyMTc1NzI0MzAwMCwiZW52aXJvbm1lbnQiOiJwcm9kdWN0aW9uIiwiZW5kX2NoYXRfdGhhbmtfbXNnIjoiVGhhbmsgeW91ISEhIiwiZW5kX2NoYXRfZW5kX3RpdGxlIjoiRW5kIiwiZW5kX2NoYXRfY2FuY2VsX3RpdGxlIjoiQ2FuY2VsIiwic2l0ZV9pZCI6IjRiNGI0MWNlN2FmODkyNGRiYTg0YTIxMTViZDBmZDAyIiwiYWN0aXZlIjoxLCJyb3V0aW5nIjp7ImNob2ljZXMiOnsibGlzdDEiOlsiMCJdLCJsaXN0MiI6WyIwIl0sImxpc3QzIjpbIjAiXSwiZGVmYXVsdCI6WyIwIl19LCJkcm9wZG93bl9iYXNlZCI6ImZhbHNlIn0sInByZWNoYXRfZm9ybSI6MCwiYnVzaW5lc3NfY2FsZW5kYXIiOm51bGwsInByb2FjdGl2ZV9jaGF0IjowLCJwcm9hY3RpdmVfdGltZSI6MTA1LCJzaXRlX3VybCI6InJlYWxtLmZyZXNoZGVzay5jb20iLCJleHRlcm5hbF9pZCI6bnVsbCwiZGVsZXRlZCI6MCwibW9iaWxlIjoxLCJhY2NvdW50X2lkIjpudWxsLCJjcmVhdGVkX2F0IjoiMjAxOC0wMi0xNVQyMzoyNTozNi4wMDBaIiwidXBkYXRlZF9hdCI6IjIwMTgtMDItMjZUMTc6MjQ6MDUuMDAwWiIsImNiRGVmYXVsdE1lc3NhZ2VzIjp7ImNvYnJvd3Npbmdfc3RhcnRfbXNnIjoiWW91ciBzY3JlZW5zaGFyZSBzZXNzaW9uIGhhcyBzdGFydGVkIiwiY29icm93c2luZ19zdG9wX21zZyI6IllvdXIgc2NyZWVuc2hhcmluZyBzZXNzaW9uIGhhcyBlbmRlZCIsImNvYnJvd3NpbmdfZGVueV9tc2ciOiJZb3VyIHJlcXVlc3Qgd2FzIGRlY2xpbmVkIiwiY29icm93c2luZ19hZ2VudF9idXN5IjoiQWdlbnQgaXMgaW4gc2NyZWVuIHNoYXJlIHNlc3Npb24gd2l0aCBjdXN0b21lciIsImNvYnJvd3Npbmdfdmlld2luZ19zY3JlZW4iOiJZb3UgYXJlIHZpZXdpbmcgdGhlIHZpc2l0b3LigJlzIHNjcmVlbiIsImNvYnJvd3NpbmdfY29udHJvbGxpbmdfc2NyZWVuIjoiWW91IGhhdmUgYWNjZXNzIHRvIHZpc2l0b3LigJlzIHNjcmVlbi4iLCJjb2Jyb3dzaW5nX3JlcXVlc3RfY29udHJvbCI6IlJlcXVlc3QgdmlzaXRvciBmb3Igc2NyZWVuIGFjY2VzcyAiLCJjb2Jyb3dzaW5nX2dpdmVfdmlzaXRvcl9jb250cm9sIjoiR2l2ZSBhY2Nlc3MgYmFjayB0byB2aXNpdG9yICIsImNvYnJvd3Npbmdfc3RvcF9yZXF1ZXN0IjoiRW5kIHlvdXIgc2NyZWVuc2hhcmluZyBzZXNzaW9uICIsImNvYnJvd3NpbmdfcmVxdWVzdF9jb250cm9sX3JlamVjdGVkIjoiWW91ciByZXF1ZXN0IHdhcyBkZWNsaW5lZCAiLCJjb2Jyb3dzaW5nX2NhbmNlbF92aXNpdG9yX21zZyI6IlNjcmVlbnNoYXJpbmcgaXMgY3VycmVudGx5IHVuYXZhaWxhYmxlICIsImNvYnJvd3NpbmdfYWdlbnRfcmVxdWVzdF9jb250cm9sIjoiQWdlbnQgaXMgcmVxdWVzdGluZyBhY2Nlc3MgdG8geW91ciBzY3JlZW4gIiwiY2Jfdmlld2luZ19zY3JlZW5fdmkiOiJBZ2VudCBjYW4gdmlldyB5b3VyIHNjcmVlbiAiLCJjYl9jb250cm9sbGluZ19zY3JlZW5fdmkiOiJBZ2VudCBoYXMgYWNjZXNzIHRvIHlvdXIgc2NyZWVuICIsImNiX3ZpZXdfbW9kZV9zdWJ0ZXh0IjoiWW91ciBhY2Nlc3MgdG8gdGhlIHNjcmVlbiBoYXMgYmVlbiB3aXRoZHJhd24gIiwiY2JfZ2l2ZV9jb250cm9sX3ZpIjoiQWxsb3cgYWdlbnQgdG8gYWNjZXNzIHlvdXIgc2NyZWVuICIsImNiX3Zpc2l0b3Jfc2Vzc2lvbl9yZXF1ZXN0IjoiQWdlbnQgc2Vla3MgYWNjZXNzIHRvIHlvdXIgc2NyZWVuICJ9fQ==';</script><script type="text/javascript" defer="" src="./realm docs_files/visitor.js"></script> <script src="https://platform.twitter.com/oct.js"></script> <script>if (typeof twttr !== 'undefined') { twttr.conversion.trackPid('nuhqr', { tw_sale_amount: 0, tw_order_quantity: 0 }); }</script> <noscript> <img height=1 width=1 style="display:none;" alt="" src="https://analytics.twitter.com/i/adsct?txn_id=nuhqr&p_id=Twitter&tw_sale_amount=0&tw_order_quantity=0"/> <img height=1 width=1 style="display:none;" alt="" src="//t.co/i/adsct?txn_id=nuhqr&p_id=Twitter&tw_sale_amount=0&tw_order_quantity=0"/> </noscript> <script type="text/html" id="nav-pills-template">
    <ul class="nav nav-pills col-xs-12">
      <li class="active"><a href="#" data-lang="java">Java</a></li>
      <li><a href="#" data-lang="swift">Swift</a></li>
      <li><a href="#" data-lang="objective_c">Objective‑C</a></li>
      <li><a href="#" data-lang="javascript">JavaScript</a></li>
      <li><a href="#" data-lang="csharp">Xamarin</a></li>
    </ul>
  </script> <script async="" src="./realm docs_files/code-language-select.js"></script> <script src="./realm docs_files/clipboard.min.js"></script> <script>
  $(document).ready(function(){
    var snippets = document.querySelectorAll('.highlight');
    [].forEach.call(snippets, function(snippet) {
      snippet.firstChild.insertAdjacentHTML('beforebegin', '<button class="btn" data-clipboard-snippet><img class="clippy" width="13" src="../../../assets/svg/docs/clippy.svg" alt="Copy to clipboard"></button>');
    });
    var clipboardSnippets = new Clipboard('[data-clipboard-snippet]', {
      target: function(trigger) {
        return trigger.nextElementSibling;
      }
    });
    clipboardSnippets.on('success', function(e) {
      e.clearSelection();
      showTooltip(e.trigger, 'Copied!');
    });
    clipboardSnippets.on('error', function(e) {
      showTooltip(e.trigger, fallbackMessage(e.action));
    });
  });
  </script> <script src="./realm docs_files/docsearch.min.js"></script> <script> 
$(document).ready(function() {
docsearch({
apiKey: '1f7e3fdd7db42cf85027befed97a7436',
indexName: 'realm-io',
inputSelector: '#search-input',
algoliaOptions: { 'facetFilters': ["tags:en"] },
debug: false // Set debug to true if you want to inspect the dropdown
});
});
</script> <script>
  $(document).ready(function () {
    $("#subbarBtnMobile").click(function () {
      $("#sub-bar-news").modal('show');
    });
    
    $(".modal-backdrop").click(function () {
      $(this).hide();
    });
      
  });
</script>  <style id="wistia_18_style" type="text/css" class="wistia_injected_style">
@font-face {
font-family: 'WistiaPlayerOverpassNumbers';
src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAARAQAABAAQRFNJRwAAAAEAAA7oAAAACEdQT1Ow+b/jAAAONAAAAKhHU1VCAAEAAAAADtwAAAAKT1MvMl1sVb8AAAe0AAAAYGNtYXAApwIpAAAIFAAAALJjdnQgAAAAAAAAClQAAAAEZnBnbUM+8IgAAAjIAAABCWdhc3AAGgAjAAAOJAAAABBnbHlmWNZE7QAAARwAAAXMaGVhZIS0XikAAAckAAAANmhoZWEF5gGwAAAHkAAAACRobXR4GNICwAAAB1wAAAA0bG9jYQi0CoYAAAcIAAAAHG1heHAAGQBKAAAG6AAAACBuYW1lGpIbcAAAClgAAAOPcG9zdAAPAKQAAA3oAAAAPHByZXBoUamTAAAJ1AAAAH8ACgBd/wYBmgLuAAMADwAVABkAIwApADUAOQA9AEgAAAUhESEHFTMVIxUzNSM1MzUHFTM1IzUHIzUzBxUzFSMVMzUzNQcVIxUzNQcVMzUzFSM1IxUzNQcVMzUHIzUzBxUzBxUzNSM3MzUBmv7DAT3yQUKmQkKmpkIiISFCQkJkQiGFpmQiIWQhpqamIWRkhUZGpmZGIPoD6EMhJSEhJSGBaCJGRiRhISUhRiE8QiJkejgXL1Bxca1xcVAvZyEvISEvIQAAAAIARv/0AiYCyAAVACUAAAQ3Njc2NTQmJyYjIgcGBwYVFBYXFjMmJyY1NDc2MzIXFhUUBwYjAY87MRgTGRo/flo7LxkTGRs9f1wqIR8pX1oqIR4pXgw9M1tJVkOAMnU9MV1IV0Z/MXQ/X0qCeUxmX0uBfEplAAAAAAEAKAAAAOUCvAAIAAATIwYGIxUzETPlLRBHOXdGArwwJyj9wwAAAAABAEcAAAISAsgAJAAAJSE2Nz4CNzY2NzY1NCYjIgcGBxc2MzIWFRQHBgcHBgYHBhUhAhL+fwszEjIhCDBDG0J0Z1c+OhE+HX9HUTMjUhMrOhhEActDPTARJRYFHjAcRFRbaisoQRxxSzs8NSM2DR0uHFJzAAEAMv/0AggCyAA0AAAENjc2NjU0Jic2NjU0JicmJiMiBwYHFzY3NjMyFhcWFRQGIyMVMzIWFRQHBiMiJicHFhcWMwFJViIiJT83Ki8fHBxMKlM7MRpBFR8rPBkvEidLPyUvS1EwLEg+TxpBGzM6YAwfGxxLK0RiFhdSMCdDGBcaLiZAGS4aJBEQIjk6RUBMQkIlIjxCG0spMAAAAAIAHgAAAiICvAAKAA0AACUzNSMRIwEVIRUzAxEjAbhqair+kAFURkb5vTwBw/4mJb0CQ/62AAAAAQBG//QCLgK8AC0AADYWFxYzMjY3NjY1NCYnJiYjIgYHNyE1IQMXNjc2MzIXFhYVFAYHBgYjIicmJwdTLh1ETjpfIyAiIx8fUy4tVCAoASz+nDk7FykzN0QuFBccGBlEJkIuKiQpPB8MHSkjIVUtMVMfHSEeHfQ//pUSGxIWMRc+IiE+GBgbFxUkMwACADz/9AIEAsgAIQA2AAAENjc2NjU0JicmJiMiBgc2Njc2Njc1BgYHBgYVFBYXFhYzEhcWFRQGBwYjIiYnJiY1NDY3NjYzAVFSHx8jIBwdTCo2UxoIMiUlWzFKhDExNh4dHlc4RS0rFxUsSCE7FRYZGBUVOyMMJB8gVTAnTh4fJCEfLFkoKDsPNxJaPz+RSjpjIyYpAYAtLUgiOhUuGBYVOyEjPBYVGAABACgAAAHLArwADAAANjc2NzUhFSEGBwYHM+ooN4L+XQFTdzMrAkamjsSWLjyXqIq3AAAAAwBG//QCEALIACMALwBCAAAABgcGBhUUFhcGBwYVFBYXFjMyNjc2NjU0Jic2NjU0JicmJiMCJjU0NjMyFhUUBiMCJyY1NDY3NjYzMhcWFhUUBwYjAQJJGxoeMCw1JCMiH0JiMFUfHyJEOS4vHhobSSk5RUc3N0dFOUQrLRYVFToiRC4UFi0rRALIHRkZQiQuThQTNTRCLE0cPCAcHE0sQmcVE04vJEIZGR3+0D8zOkVFOjM//pspK0gfOBYWGC4WOB9IKykAAAACADz/9AIEAsgAIAA0AAASBgcGBhUUFhcWFjMyNjcGBgcGBgcVNjY3NjY1NCYnJiMCJyY1NDc2MzIWFxYWFRQGBwYGI/RUICAkIBwbTCo3VRoGLCMkWDJKfy8uMhwbPG1NLSssLUchOxYWGBgVFTsjAsgjIB9WMClNHh4iIyEtXCgpPA83Elo/PpJKOWMlTv58Ly1IRC4vGRYWOyEjPBYWGQAAAAIAMv/yALAB4wALABcAABI2NTQmIyIGFRQWMxI2NTQmIyIGFRQWM4slJRoaJSUaGiUlGholJRoBZSYZGSYmGRkm/o0mGRkmJhkZJgABAAAADQBJAAoAAAAAAAEAAAAAAAEAAAAAAAAAAAAAAAAAYgBiAJ4AsgDsAToBVgGcAfACCgJuAsAC5gABAAAAARmZfAtXkV8PPPUAAwPoAAAAAE2yzjUAAAAA1Z4zgwAe/wYCLgLuAAAABwACAAAAAAAAAfQAXQAAAAACbABGAU4AKAJYAEcCTgAyAksAHgJ0AEYCSgA8AfMAKAJWAEYCSgA8AOIAMgABAAADtv8GAAACdAAAACgCLgABAAAAAAAAAAAAAAAAAAAADQADAhYBkAAFAAgCigJYAAAASwKKAlgAAAFeABQBMgAAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABERUxWAEAAIAA6Au7/BgEKA7YA+gAAAAEAAAAAAf8CvAAAACAAAgAAAAMAAAADAAAAigABAAAAAAAcAAMAAQAAAIoABgBuAAAACQAyAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAwAEAAUABgAHAAgACQAKAAsADAAEACgAAAAGAAQAAQACACAAOv//AAAAIAAw////4f/SAAEAAAAAAAAAALAALEAOBQYHDQYJFA4TCxIIERBDsAEVRrAJQ0ZhZEJDRUJDRUJDRUJDRrAMQ0ZhZLASQ2FpQkNGsBBDRmFksBRDYWlCQ7BAUHmxBkBCsQUHQ7BAUHmxB0BCsxAFBRJDsBNDYLAUQ2CwBkNgsAdDYLAgYUJDsBFDUrAHQ7BGUlp5swUFBwdDsEBhQkOwQGFCsRAFQ7ARQ1KwBkOwRlJaebMFBQYGQ7BAYUJDsEBhQrEJBUOwEUNSsBJDsEZSWnmxEhJDsEBhQrEIBUOwEUOwQGFQebIGQAZDYEKzDQ8MCkOwEkOyAQEJQxAUEzpDsAZDsApDEDpDsBRDZbAQQxA6Q7AHQ2WwD0MQOi0AAACxAAAAQrE7AEOwAFB5uP+/QBAAAQAAAwQBAAABAAAEAgIAQ0VCQ2lCQ7AEQ0RDYEJDRUJDsAFDsAJDYWpgQkOwA0NEQ2BCHLEtAEOwAVB5swcFBQBDRUJDsF1QebIJBUBCHLIFCgVDYGlCuP/NswABAABDsAVDRENgQhy4LQAdAAAAAAAAAAASAN4AAQAAAAAAAQAWAAAAAQAAAAAAAgAFABYAAQAAAAAAAwAnABsAAQAAAAAABAAcAEIAAQAAAAAABQAPAF4AAQAAAAAABgAcAG0AAQAAAAAACQAgAIkAAQAAAAAACgA4AKkAAwABBAkAAQA4AOEAAwABBAkAAgAOARkAAwABBAkAAwBOAScAAwABBAkABAA4AXUAAwABBAkABQAeAa0AAwABBAkABgA4AXUAAwABBAkACQBAAcsAAwABBAkACgBwAgsAAwABBAkAEAAsAnsAAwABBAkAEQAKAqdXaXN0aWEtUGxheWVyLU92ZXJwYXNzTGlnaHQxLjEwMDtERUxWO1dpc3RpYS1QbGF5ZXItT3ZlcnBhc3MtTGlnaHRXaXN0aWEtUGxheWVyLU92ZXJwYXNzIExpZ2h0VmVyc2lvbiAxLjAzMTAwV2lzdGlhLVBsYXllci1PdmVycGFzcy1MaWdodERlbHZlIFdpdGhyaW5ndG9uLCBUaG9tYXMgSm9ja2luQ29weXJpZ2h0IChjKSAyMDE0IGJ5IFJlZCBIYXQsIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4AVwBpAHMAdABpAGEALQBQAGwAYQB5AGUAcgAtAE8AdgBlAHIAcABhAHMAcwAgAEwAaQBnAGgAdABSAGUAZwB1AGwAYQByADEALgAxADAAMAA7AEQARQBMAFYAOwBXAGkAcwB0AGkAYQAtAFAAbABhAHkAZQByAC0ATwB2AGUAcgBwAGEAcwBzAC0ATABpAGcAaAB0AFcAaQBzAHQAaQBhAC0AUABsAGEAeQBlAHIALQBPAHYAZQByAHAAYQBzAHMALQBMAGkAZwBoAHQAVgBlAHIAcwBpAG8AbgAgADEALgAwADMAMQAwADAARABlAGwAdgBlACAAVwBpAHQAaAByAGkAbgBnAHQAbwBuACwAIABUAGgAbwBtAGEAcwAgAEoAbwBjAGsAaQBuAEMAbwBwAHkAcgBpAGcAaAB0ACAAKABjACkAIAAyADAAMQA0ACAAYgB5ACAAUgBlAGQAIABIAGEAdAAsACAASQBuAGMALgAgAEEAbABsACAAcgBpAGcAaAB0AHMAIAByAGUAcwBlAHIAdgBlAGQALgBXAGkAcwB0AGkAYQAtAFAAbABhAHkAZQByAC0ATwB2AGUAcgBwAGEAcwBzAEwAaQBnAGgAdAAAAgAAAAAAAP+FABQAAAAAAAAAAAAAAAAAAAAAAAAAAAANAAAAAwATABQAFQAWABcAGAAZABoAGwAcAB0AAQADAAcACgATAAf//wAPAAEAAAAKAB4ALAABREZMVAAIAAQAAAAA//8AAQAAAAFrZXJuAAgAAAABAAAAAQAEAAIAAAABAAgAAQBmAAQAAAAIABoAIAAmADAAOgBIAFIAYAABAAb/7AABAAb/9gACAAn/9gAL//EAAgAJ//YAC//xAAMABP/7AAn/9gAL//YAAgAJ/+wAC//dAAMABv+6AAj/4gAJACMAAQAJ//YAAgABAAMACgAAAAEAAAAAAAAAAAAAAAAAAQAAAAA=);
}
</style></body></html>